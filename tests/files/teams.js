/*
 stats Tuesday, November 8th, 2016, 5:52:15 PM 
*/
var appName="stats",stats=angular.module("stats",["ngRoute","ngCookies","ui.bootstrap","ui.slider"]);stats.config(["$tooltipProvider",function($tooltipProvider){$tooltipProvider.options({placement:window.innerWidth<=480?"right":"top",animation:!0,popupDelay:0,appendToBody:!0})}]),stats.config(["$sceDelegateProvider",function($sceDelegateProvider){$sceDelegateProvider.resourceUrlWhitelist(["self","http://*.nba.com/*","http://stats-dev.nba.com/*"])}]),stats.run(["$document","$modal",function($document,$modal){$document.on("click",'span[rel="modal"]',function(e){var $this=angular.element(this),type=$this.attr("type"),title=$this.attr("title"),href=$this.attr("href");$modal.open({templateUrl:"/templates/overlay/modal.html",controller:"ModalInstanceCtrl",size:"lg",windowClass:type,resolve:{url:function(){return href},title:function(){return title},type:function(){return type}}})})}]),stats.run(["$location","$filter","$modal",function($location,$filter,$modal){var searchObject=$location.search();if(searchObject.mtype){var type=searchObject.mtype,title=searchObject.mtitle;searchObject.mtype="",searchObject.mtitle="";var search=$filter("param")(searchObject),modalurl="";switch(type){case"shotchart":modalurl="/shotchart/#!/?"+search;break;case"cvp":modalurl="http://stats.nba.com/cvp.html?"+search;break;case"tracking":modalurl="/playlist/#!/movement?"+search;break;case"movement":modalurl="/playlist/#!/movement?"+search;break;case"pbpmovement":modalurl="/movement/#!/?"+search;break;default:return}$modal.open({templateUrl:"/templates/overlay/modal.html",controller:"ModalInstanceCtrl",size:"lg",windowClass:type,resolve:{url:function(){return modalurl},title:function(){return title},type:function(){return type}}})}}]),stats.run(["$rootScope","$location",function($rootScope,$location){window.IS_MOBILE=/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),$(".nav-buttons").on("mouseenter",".button",function(){$(this).find(".drop").show()}).on("mouseleave",".button",function(){$(this).find(".drop").hide()}),$(".sap-header").click(function(){var URL=$("#sapSponserClickThroughURL").attr("href"),data={focus:"sapheader"};_nba.analytics.click(data),URL&&window.open(URL,"_blank")}),$("#stats-team-summary .sap-sponsor").click(function(){var URL=$("#sapSponserClickThroughURL").attr("href");URL&&window.open(URL,"_blank")}),$("#stats-player-summary .sap-sponsor").click(function(){var URL=$("#sapSponserClickThroughURL").attr("href");URL&&window.open(URL,"_blank")}),$(".stats-beyond-the-numbers .sap-logo").click(function(){var URL=$("#sapBeyondClickThroughURL").attr("href"),data={focus:"sapbeyondthenumbers"};_nba.analytics.click(data),URL&&window.open(URL,"_blank")});var callCount=0;$rootScope.$on("$routeChangeSuccess",function(scope,route){if(route){var path=route.$$route.originalPath;"/"==path.substr(-1)&&("undefined"!=typeof callOmniture&&callCount>0&&callOmniture(),"undefined"!=typeof ga&&ga("send","event","route-change",route.$$route.originalPath,JSON.stringify(route.params)),callCount++)}})}]);var setOmnitureHierarchy=function(splits,filters){var obj={splitsFilters:"",playerid:"PlayerID=none",teamid:"TeamID=none",hier:""};if(window.location.href.indexOf("/scores")>-1){var scores_date=window.location.href.split("#!/")[1];void 0===scores_date?obj.hier="":obj.hier=scores_date}if(window.location.href.indexOf("game")>-1){var game_hash_remove=window.location.href.split("#!/")[1];if(!game_hash_remove)return;var sections=game_hash_remove.match(/([^\/]*)\/*$/);obj.heir=sections.length>0?sections[1]:""}if(window.location.href.indexOf("/league")>-1){var remove_hash=window.location.href.split("#")[0],league_section=remove_hash.match(/([^\/]*)\/*$/)[1];if("team"==league_section&&(window.location.href.indexOf("clutch")>-1?"clutch"==window.location.href.match(/([^\/]*)\/*$/)[1]?obj.hier="clutch":obj.hier="clutch|"+window.location.href.match(/([^\/]*)\/*$/)[1]:obj.hier=window.location.href.match(/([^\/]*)\/*$/)[1]),"player"==league_section&&(window.location.href.indexOf("clutch")>-1?"clutch"==window.location.href.match(/([^\/]*)\/*$/)[1]?obj.hier="clutch":obj.hier="clutch|"+window.location.href.match(/([^\/]*)\/*$/)[1]:obj.hier=window.location.href.split("#!")[1].match(/([^\/]*)\/*$/)[1]),"lineups"==league_section){var lineups_hash_remove=window.location.href.split("#!/")[1],lineups_section=lineups_hash_remove.match(/([^\/]*)\/*$/)[1];obj.hier=lineups_section}}if(window.location.href.indexOf("/team/")>-1&&window.location.href.indexOf("/league/")==-1){var team_remove_hash=window.location.href.split("#!/")[1];10==window.location.href.match(/([^\/]*)\/*$/)[1].length&&"onoffcourt"!=window.location.href.match(/([^\/]*)\/*$/)[1]&&(obj.hier=window.location.href.match(/([^\/]*)\/*$/)[1]+"|landing",obj.teamid="TeamID="+window.location.href.match(/([^\/]*)\/*$/)[1]),team_remove_hash.length>11&&(obj.hier=team_remove_hash.split("/")[0]+"|"+team_remove_hash.split("/")[1]+"|"+team_remove_hash.split("/")[2],obj.teamid="TeamID="+team_remove_hash.split("/")[0])}if("players"==window.location.href.match(/([^\/]*)\/*$/)[1]&&window.location.href.indexOf("/team/")==-1&&(obj.hier="landing"),window.location.href.indexOf("/player/")>-1&&window.location.href.indexOf("/league/")==-1){var player_remove_hash=window.location.href.split("#!/")[1];obj.hier=player_remove_hash.split("/")[0]+"|"+player_remove_hash.split("/")[1]+"|"+player_remove_hash.split("/")[2],obj.playerid="PlayerID="+player_remove_hash.split("/")[0]}if(window.location.href.indexOf("/league/")==-1&&window.location.href.indexOf("/tracking/")>-1&&window.location.href.split("#!/")[1].length<8&&(obj.hier="landing"),window.location.href.indexOf("/league/")==-1&&window.location.href.indexOf("/tracking/")>-1&&window.location.href.split("#!/")[1].length>7){var tracking_remove_hash=window.location.href.split("#!/")[1];obj.hier=tracking_remove_hash.split("/")[0]+"|"+tracking_remove_hash.split("/")[1]+"|"+tracking_remove_hash.split("/")[2]}if(window.location.href.indexOf("/playtype/")>-1&&window.location.href.split("#!/")[1].length<8&&(obj.hier="landing"),window.location.href.indexOf("/playtype/")>-1&&window.location.href.split("#!/")[1].length>7){var tracking_remove_hash=window.location.href.split("#!/")[1];obj.hier=tracking_remove_hash.split("/")[0]+"|"+tracking_remove_hash.split("/")[1]+"|"+tracking_remove_hash.split("/")[2]}if(window.location.href.indexOf("/history/")>-1&&(obj.hier="franchisehistory"),window.location.href.indexOf("/draftcombine/")>-1&&"#!"==window.location.href.match(/([^\/]*)\/*$/)[1]){var combine_remove_hash=window.location.href.split("#!/")[1];obj.hier=combine_remove_hash.split("/")[0]+"|"+combine_remove_hash.split("/")[1]+"|"+combine_remove_hash.split("/")[2]}if(window.location.href.indexOf("/vs/")>-1&&("#!"==window.location.href.match(/([^\/]*)\/*$/)[1]?obj.hier="landing":obj.hier=window.location.href.split("#!/")[1]),window.location.href.indexOf("/draftcombine/")>-1&&"#!"!=window.location.href.match(/([^\/]*)\/*$/)[1]){var combine_remove_hash=window.location.href.split("#!/")[1];obj.hier=combine_remove_hash.split("/")[0]+"|"+combine_remove_hash.split("/")[1]+"|"+combine_remove_hash.split("/")[2]}if(window.location.href.indexOf("/videostatus/")>-1&&(obj.hier=window.location.href.split("#!/")[1]),window.location.href.indexOf("cvp")>-1&&(obj.hier="statsvideo|videopopup|"+window.location.href.split("?")[1]),window.location.href.indexOf("playlist")>-1&&(obj.hier="statsmovements|movementspopup|"+window.location.href.split("?")[1]),window.location.href.indexOf("shotchart")>-1&&(obj.hier="statsshotchart|shotchartpopup|"+window.location.href.split("?")[1]),window.location.href.indexOf("featured")>-1&&(obj.hier=window.location.href.match(/([^\/]*)\/*$/)[1]),window.location.href.indexOf("thelab")>-1&&("statsqa"===window.location.href.match(/([^\/]*)\/*$/)[1]?obj.hier="main":obj.hier="questionasked|"+splits),window.location.href.indexOf("/defensivehub/")>-1&&0===window.location.href.split("#!/")[1].length&&(obj.hier="landing"),window.location.href.indexOf("/defensivehub/")>-1&&window.location.href.split("#!/")[1].length>0){var hub_remove_hash=window.location.href.split("#!/")[1];obj.hier=hub_remove_hash.split("/")[0]+"|"+hub_remove_hash.split("/")[1]+"|"+hub_remove_hash.split("/")[2]}return obj};nbaOmCurrentLeague="nba",nbaOmAccountIds="nbag-n-league";var initOmniture=function(){var hier=document.location.pathname.replace(/^\/(.*)\/$/,"$1").replace(/\//g,"|");"|"!=hier&&""!=hier||(hier="home"),0==hier.indexOf("|")&&(hier=hier.substr(1)),hier=hier.replace(".html",""),nbaOmCurrentLeague="nba","dev.stats.nba.com"==window.location.hostname||"stats-local.nba.com"==window.location.hostname||"linuxpubstats.nba.com"==window.location.hostname?nbaOmAccountIds="nbag-n-league-dev":nbaOmAccountIds="nbag-n-league",nbaOmChannel=hier,nbaOmChannelPrefix="stats.nba.com",nbaOmHier="nba|nba.com|nba.com|stats";var obj=setOmnitureHierarchy();obj&&(obj.hier&&(hier+="|"+obj.hier),obj.playerid&&(nbaOmStatsCustom1=obj.playerid,_nba.analytics.setOverride("statsCustom1",nbaOmStatsCustom1)),obj.teamid&&(nbaOmStatsCustom2=obj.teamid,_nba.analytics.setOverride("statsCustom2",nbaOmStatsCustom2))),nbaOmAppendHier=hier,nbaOmTeamCustom1=window.location+"",_nba.analytics.setGlobal("experience","responsive"),_nba.analytics.setOverride("league",nbaOmCurrentLeague),_nba.analytics.setOverride("accountIds",nbaOmAccountIds),_nba.analytics.setOverride("hier",nbaOmHier),_nba.analytics.setOverride("appendHier",nbaOmAppendHier),_nba.analytics.setOverride("teamCustom1",nbaOmTeamCustom1),_nba.analytics.page()},callOmniture=function(question){var hier=document.location.pathname.replace(/^\/(.*)\/$/,"$1").replace(/\//g,"|");"|"!=hier&&""!=hier||(hier="home"),0==hier.indexOf("|")&&(hier=hier.substr(1)),hier=hier.replace(".html",""),nbaOmCurrentLeague="nba","dev.stats.nba.com"==window.location.hostname||"stats-local.nba.com"==window.location.hostname||"linuxpubstats.nba.com"==window.location.hostname?nbaOmAccountIds="nbag-n-league-dev":nbaOmAccountIds="nbag-n-league",nbaOmChannel=hier,nbaOmChannelPrefix="stats.nba.com",nbaOmHier="nba|nba.com|nba.com|stats";var obj=setOmnitureHierarchy(question);obj&&(obj.hier&&(hier+="|"+obj.hier),obj.playerid&&(nbaOmStatsCustom1=obj.playerid,_nba.analytics.setOverride("statsCustom1",nbaOmStatsCustom1)),obj.teamid&&(nbaOmStatsCustom2=obj.teamid,_nba.analytics.setOverride("statsCustom2",nbaOmStatsCustom2))),nbaOmAppendHier=hier,nbaOmTeamCustom1=window.location+"",_nba.analytics.setGlobal("experience","responsive"),_nba.analytics.setOverride("league",nbaOmCurrentLeague),_nba.analytics.setOverride("accountIds",nbaOmAccountIds),_nba.analytics.setOverride("hier",nbaOmHier),_nba.analytics.setOverride("appendHier",nbaOmAppendHier),_nba.analytics.setOverride("teamCustom1",nbaOmTeamCustom1),_nba.analytics.page()};stats.constant("BOXSCORE_PERIODS",[{text:"All Periods",StartRange:"0000",EndRange:"55800",RangeType:2,id:0},{text:"1st Period",StartRange:"0000",EndRange:"7200",RangeType:2,id:1},{text:"2nd Period",StartRange:"7200",EndRange:"14400",RangeType:2,id:2},{text:"3rd Period",StartRange:"14400",EndRange:"21600",RangeType:2,id:3},{text:"4th Period",StartRange:"21600",EndRange:"28800",RangeType:2,id:4},{text:"1st Half",StartRange:"0000",EndRange:"14400",RangeType:2,id:5},{text:"2nd - 3rd",StartRange:"7200",EndRange:"21600",RangeType:2,id:6},{text:"2nd Half",StartRange:"14400",EndRange:"28800",RangeType:2,id:7},{text:"All Overtime",StartRange:"28800",EndRange:"55800",RangeType:2,id:8},{text:"OT1",StartRange:"28800",EndRange:"31800",RangeType:2,id:9},{text:"OT2",StartRange:"31800",EndRange:"34800",RangeType:2,id:10},{text:"OT3",StartRange:"34800",EndRange:"37800",RangeType:2,id:11},{text:"OT4",StartRange:"37800",EndRange:"40800",RangeType:2,id:12},{text:"OT5",StartRange:"40800",EndRange:"43800",RangeType:2,id:13},{text:"OT6",StartRange:"43800",EndRange:"46800",RangeType:2,id:14},{text:"OT7",StartRange:"46800",EndRange:"49800",RangeType:2,id:15},{text:"OT8",StartRange:"49800",EndRange:"52800",RangeType:2,id:16},{text:"OT9",StartRange:"52800",EndRange:"55800",RangeType:2,id:17}]),function(){function getEnv(){var h=document.location.host;return"stats.nba.com"==h||"www.nba.com"==h?prefix="http://stats-prod.nba.com/":prefix="http://stats-dev.nba.com/",{prefix:prefix}}stats.constant("CMSENV",getEnv())}(),stats.constant("FEEDS_CONFIG",{allstarGamePredictor:"allstarballotpredictor",assistLeaders:"assistleaders",assistTracker:"assisttracker",boxscore:"boxscore",boxscoreBase:"boxscore",boxscorePlayerTracking:"boxscore",boxscorePlayByPlay:"playbyplay",boxscoreAdvanced:"boxscoreadvanced",boxscoreMisc:"boxscoremisc",boxscoreScoring:"boxscorescoring",boxscoreUsage:"boxscoreusage",boxscoreFourFactors:"boxscorefourfactors",boxscorePlayoffSeries:"commonplayoffseries",boxscoreFanduelStats:"infographicfanduelplayer",boxscoreHustle:"hustlestatsboxscore",boxscoreSummary:"boxscoresummaryv2",boxscoreTraditional_2:"boxscoretraditionalv2",boxscoreAdvanced_2:"boxscoreadvancedv2",boxscoreMisc_2:"boxscoremiscv2",boxscoreScoring_2:"boxscorescoringv2",boxscoreUsage_2:"boxscoreusagev2",boxscoreFourFactors_2:"boxscorefourfactorsv2",boxscorePlayerTracker_2:"boxscoreplayertrackv2",boxscorePlayByPlay_2:"playbyplayv2",boxscoreWinProbability:"winprobabilitypbp",draftCombineAgility:"draftcombinedrillresults",draftCombineAnthro:"draftcombineplayeranthro",draftCombineNonstationary:"draftcombinenonstationaryshooting",draftCombineSpotup:"draftcombinespotshooting",draftCombineSummary:"draftcombinestats",draftHistory:"drafthistory",franchiseHistory:"franchisehistory",fantasyWidget:"fantasywidget",homepageLeaders:"homepageleaders",homepageLeaders2:"homepagev2",leagueGameLog:"leaguegamelog",leagueLeaders:"leagueleaders",leagueLeadersAllTiles:"leaderstilesallstats",leagueLeadersTiles:"leaderstiles",leagueLineups:"leaguedashlineups",leaguePlayerBioStats:"leaguedashplayerbiostats",leaguePlayerClutch:"leaguedashplayerclutch",leaguePlayerHustle:"leaguehustlestatsplayer",leaguePlayerHustleStatsLeaders:"leaguehustlestatsplayerleaders",leaguePlayerShotLocations:"leaguedashplayershotlocations",leaguePlayerStats:"leaguedashplayerstats",leaguePlayerTrackingDefense:"leaguedashptdefend",leaguePlayerTrackingShots:"leaguedashplayerptshot",leaguePlayerOnCourt:"leagueplayerondetails",leagueTeamClutch:"leaguedashteamclutch",leagueTeamHustle:"leaguehustlestatsteam",leagueTeamHustleStatsLeaders:"leaguehustlestatsteamleaders",leagueTeamShotLocations:"leaguedashteamshotlocations",leagueTeamStats:"leaguedashteamstats",leagueTeamTrackingDefense:"leaguedashptteamdefend",leagueTeamTrackingShots:"leaguedashteamptshot",leagueTrackingStats:"leaguedashptstats",leagueDefenseLeaders:"defensehub",playoffPicture:"playoffpicture",playerCompare:"playercompare",playerList:"commonallplayers",playerSummary:"commonplayerinfo",playerAwards:"playerawards",playerProfile:"playerprofile",playerProfile2:"playerprofilev2",playerGeneralSplits:"playerdashboardbygeneralsplits",playerOpponentSplits:"playerdashboardbyopponent",playerLastNGamesSplits:"playerdashboardbylastngames",playerInGameSplits:"playerdashboardbygamesplits",playerClutchSplits:"playerdashboardbyclutch",playerFantasySplits:"playerfantasyprofile",playerFantasyBarGraph:"playerfantasyprofilebargraph",playerShooting:"playerdashboardbyshootingsplits",playerTeamPerformance:"playerdashboardbyteamperformance",playerYearOverYear:"playerdashboardbyyearoveryear",playerCareer:"playercareerstats",playerGameLogs:"playergamelog",playerTrackingShots:"playerdashptshots",playerTrackingRebounds:"playerdashptreb",playerTrackingPasses:"playerdashptpass",playerTrackingDefense:"playerdashptshotdefend",playerTrackingLogShots:"playerdashptshotlog",playerTrackingLogRebounds:"playerdashptreboundlogs",playerUpcomingGames:"playernextngames",playerVsPlayer:"playervsplayer",playersVsPlayers:"playersvsplayers",scoreboard:"scoreboard",scoreboard2:"scoreboardV2",shotchart:"shotchartdetail",shotchartLineup:"shotchartlineupdetail",teamAllTimeRecords:"franchiseleaders",teamList:"commonTeamYears",teamSummary:"teaminfocommon",teamCommonRoster:"commonteamroster",teamGeneralSplits:"teamdashboardbygeneralsplits",teamOpponentSplits:"teamdashboardbyopponent",teamLastNGamesSplits:"teamdashboardbylastngames",teamInGameSplits:"teamdashboardbygamesplits",teamClutchSplits:"teamdashboardbyclutch",teamShootingSplits:"teamdashboardbyshootingsplits",teamPerformanceSplits:"teamdashboardbyteamperformance",teamYearOverYearSplits:"teamdashboardbyyearoveryear",teamLineups:"teamdashlineups",teamPlayers:"teamplayerdashboard",teamPlayerOnOffDetails:"teamplayeronoffdetails",teamPlayerOnOffSummary:"teamplayeronoffsummary",teamProfile:"teamdetails",teamGameLogs:"teamgamelog",teamSeason:"teamyearbyyearstats",teamTrackingDashShots:"teamdashptshots",teamTrackingDashRebounds:"teamdashptreb",teamTrackingDashPasses:"teamdashptpass",teamVsPlayer:"teamvsplayer",videoStatus:"videoStatus"}),function(){function getSeasons(){var s={reg:"Regular Season",pre:"Pre Season",pos:"Playoffs",ast:"All Star"},gs={s:"Season",n:null},toSeasonFormat=function(y){return y+"-"+(y+1).toString().slice(-2)},array=[["00",2016,s.reg,gs.n,1996,"site"],["00",2015,s.ast,gs.n,1950,"allstarRoster"],["00",2015,s.ast,gs.n,1996,"allstar"],["00",2015,s.ast,gs.n,1996,"leagueAllstar"],["00",2016,s.reg,gs.n,2015,"boxscoreCharts"],["00",2016,s.reg,gs.n,2014,"boxscoreTracking"],["00",2016,s.reg,gs.n,1996,"boxscorePlayByPlay"],["00",2016,s.reg,gs.n,2e3,"DraftCombineAgility"],["00",2016,s.reg,gs.n,2e3,"DraftCombineAnthro"],["00",2016,s.reg,gs.n,2e3,"DraftCombineSummary"],["00",2016,s.reg,gs.n,2014,"DraftCombineNonstationary"],["00",2016,s.reg,gs.n,2014,"DraftCombineSpotUp"],["00",2016,s.reg,gs.n,1947,"DraftHistory"],["00",2016,s.reg,gs.n,1946,"leagueGameLogs"],["00",2016,s.reg,gs.n,2007,"leagueLineups"],["00",2016,s.reg,gs.n,1996,"leaguePlayerStats"],["00",2016,s.reg,gs.n,1996,"leagueTeamStats"],["00",2016,s.reg,gs.n,2013,"leagueTrackingStats"],["00",2016,s.reg,gs.s,1996,"homepageLeaders"],["00",2016,s.reg,gs.s,1996,"leaderTiles"],["00",2016,s.reg,gs.n,1996,"leadersCurrent"],["00",2016,s.reg,gs.n,1951,"leadersAllTime"],["00",2016,s.reg,gs.n,2015,"leagueDefensiveLeaders"],["00",2016,s.reg,gs.n,2015,"leagueHustleLeaders"],["00",2016,s.reg,gs.n,2015,"leaguePlayerHustle"],["00",2016,s.reg,gs.n,2015,"leagueTeamHustle"],["00",2016,s.reg,gs.n,2015,"leagueGameHustle"],["00",2016,s.reg,gs.n,1996,"playerList"],["00",2016,s.reg,gs.n,1951,"playerProfile"],["00",2016,s.reg,gs.n,1996,"playerGamelogs"],["00",2016,s.reg,gs.n,2014,"playerFantasy"],["00",2016,s.reg,gs.n,1996,"playerStats"],["00",2016,s.reg,gs.n,2013,"playerTracking"],["00",2016,s.reg,gs.n,2015,"playerUpcomingGames"],["00",2015,s.pos,gs.n,2014,"playoffBracket"],["00",2016,s.reg,gs.n,1951,"teamProfile"],["00",2016,s.reg,gs.n,1996,"teamGameLogs"],["00",2016,s.reg,gs.n,2007,"teamLineups"],["00",2016,s.reg,gs.n,1996,"teamOnOffCourt"],["00",2016,s.reg,gs.n,1996,"teamPlayer"],["00",2016,s.reg,gs.n,1951,"teamRoster"],["00",2016,s.reg,gs.n,1996,"teamStats"],["00",2016,s.reg,gs.n,2013,"teamTracking"],["00",2016,s.reg,gs.n,2001,"playerVsPlayerStats"],["00",2016,s.reg,gs.n,2001,"teamVsPlayerStats"],["00",2016,s.reg,gs.n,2015,"playtypeStats"],["00",2016,s.reg,gs.n,2015,"transactions"],["00",2016,s.reg,gs.n,2013,"trackingStats"]],seasonsObject={};for(var i in array){var row=array[i],obj={LeagueID:row[0],Season:toSeasonFormat(row[1]),SeasonYear:row[1],SeasonType:row[2],GameScope:row[3],SeasonFrom:toSeasonFormat(row[4]),SeasonYearFrom:row[4],Section:row[5]},thissection=obj.Section;seasonsObject[thissection]=obj}return seasonsObject}stats.constant("SEASONS",getSeasons())}(),stats.constant("SPLITS",{LeagueID:{name:"LeagueID",label:"League",default:"00",desc:"",type:"select",options:[{val:"00",text:"NBA"},{val:"10",text:"WNBA"},{val:"20",text:"D-League"}]},Season:{name:"Season",label:"Season",default:"2016-17",desc:"",type:"select",options:[{val:"2016-17",text:"2016-17"},{val:"2015-16",text:"2015-16"},{val:"2014-15",text:"2014-15"},{val:"2013-14",text:"2013-14"},{val:"2012-13",text:"2012-13"},{val:"2011-12",text:"2011-12"},{val:"2010-11",text:"2010-11"},{val:"2009-10",text:"2009-10"},{val:"2008-09",text:"2008-09"},{val:"2007-08",text:"2007-08"}]},SeasonType:{name:"SeasonType",label:"Season Type",default:"Regular Season",type:"select",desc:"",options:[{val:"Pre Season",text:"Preseason"},{val:"Regular Season",text:"Regular Season"},{val:"Playoffs",text:"Playoffs"},{val:"All Star",text:"All Star"}]},PerMode:{name:"PerMode",label:"Per Mode",default:"PerGame",type:"select",desc:"",options:[{val:"Totals",text:"Totals"},{val:"PerGame",text:"Per Game"}]},StatCategory:{name:"StatCategory",label:"Stat Category",default:"PTS",type:"select",desc:"",options:[{val:"MIN",text:"MIN"},{val:"FGM",text:"FGM"},{val:"FGA",text:"FGA"},{val:"FG_PCT",text:"FG%"},{val:"FG3M",text:"3PM"},{val:"FG3A",text:"3PA"},{val:"FG3_PCT",text:"3P%"},{val:"FTM",text:"FTM"},{val:"FTA",text:"FTA"},{val:"FT_PCT",text:"FT%"},{val:"OREB",text:"OREB"},{val:"DREB",text:"DREB"},{val:"REB",text:"REB"},{val:"AST",text:"AST"},{val:"STL",text:"STL"},{val:"BLK",text:"BLK"},{val:"TOV",text:"TOV"},{val:"EFF",text:"EFF"},{val:"PTS",text:"PTS"},{val:"AST_TOV",text:"AST/TO"},{val:"STL_TOV",text:"STL/TOV"},{val:"PF",text:"PF"}]},GameScope:{name:"Game Scope",label:"Game Scope",type:"select",description:"",default:"",options:[{val:"",text:"Season"},{val:"Yesterday",text:"Yesterday"},{val:"Last10",text:"Last 10 Games"}]},GameSegment:{name:"GameSegment",label:"By Half",type:"select",description:"The option to view a player or team's stats in either the first half or the second half of a game.",default:"",options:[{val:"",text:"Entire Game"},{val:"First Half",text:"First Half"},{val:"Second Half",text:"Second Half"},{val:"Overtime",text:"Overtime"}]},PaceAdjust:{name:"PaceAdjust",label:"Pace Adjust",default:"N",type:"select",desc:"",options:[{val:"Y",text:"Pace Adjust On"},{val:"N",text:"Pace Adjust Off"}]},Period:{name:"Period",label:"Quarter",default:"0",type:"select",desc:"",options:[{val:"0",text:"All Quarters"},{val:"1",text:"1st Quarter"},{val:"2",text:"2nd Quarter"},{val:"3",text:"3rd Quarter"},{val:"4",text:"4th Quarter"},{val:"5",text:"OT 1"},{val:"6",text:"OT 2"},{val:"7",text:"OT 3"},{val:"8",text:"OT 4"},{val:"9",text:"OT 5"},{val:"10",text:"OT 6"},{val:"11",text:"OT 7"},{val:"12",text:"OT 8"},{val:"13",text:"OT 9"},{val:"14",text:"OT 10"}]},PlusMinus:{name:"PlusMinus",label:"Differentials",default:"N",type:"select",desc:"",options:[{val:"Y",text:"Differentials On"},{val:"N",text:"Differentials Off"}]},Rank:{name:"Rank",label:"Rank",default:"N",type:"select",desc:"",options:[{val:"Y",text:"Rank On"},{val:"N",text:"Rank Off"}]},Scope:{name:"Scope",label:"Scope",default:"S",type:"select",desc:"",options:[{val:"S",text:"All Players"},{val:"Rookies",text:"Rookies"}]},VsConference:{name:"VsConference",label:"VS Conference",default:"",type:"select",desc:"",options:[{val:"",text:"VS All Conferences"},{val:"East",text:"East"},{val:"West",text:"West"}]},VsDivision:{name:"VsDivision",label:"VS Division",default:"",type:"select",desc:"Stats for team or player against a selected division",options:[{val:"",text:"VS All Divisions"},{val:"Atlantic",text:"Atlantic"},{val:"Central",text:"Central"},{val:"Northwest",text:"Northwest"},{val:"Pacific",text:"Pacific"},{val:"Southeast",text:"Southeast"},{val:"Southwest",text:"Southwest"}]},Conference:{name:"Conference",label:"Conference",default:"",type:"select",desc:"",options:[{val:"",text:"All Conferences"},{val:"East",text:"East"},{val:"West",text:"West"}]},Division:{name:"Division",label:"Division",default:"",type:"select",desc:"Stats for team or player against a selected division",options:[{val:"",text:"All Divisions"},{val:"Atlantic",text:"Atlantic"},{val:"Central",text:"Central"},{val:"Northwest",text:"Northwest"},{val:"Pacific",text:"Pacific"},{val:"Southeast",text:"Southeast"},{val:"Southwest",text:"Southwest"}]},Outcome:{name:"Outcome",label:"Outcome",default:"",type:"select",desc:"",options:[{val:"",text:"All Outcomes"},{val:"W",text:"Wins"},{val:"L",text:"Losses"}]},Location:{name:"Location",label:"Location",default:"",type:"select",desc:"",options:[{val:"",text:"All Locations"},{val:"Home",text:"Home"},{val:"Road",text:"Road"}]},SeasonSegment:{name:"SeasonSegment",label:"Season Segment",default:"",type:"select",desc:"",options:[{val:"",text:"Entire Season"},{val:"Pre All-Star",text:"Pre All-Star"},{val:"Post All-Star",text:"Post All-Star"}]},LastNGames:{name:"LastNGames",label:"Last N Games",default:"0",type:"select",desc:"",options:[{val:"0",text:"All Games"},{val:"1",text:"Last Game"},{val:"2",text:"Last 2 Games"},{val:"3",text:"Last 3 Games"},{val:"4",text:"Last 4 Games"},{val:"5",text:"Last 5 Games"},{val:"6",text:"Last 6 Games"},{val:"7",text:"Last 7 Games"},{val:"8",text:"Last 8 Games"},{val:"9",text:"Last 9 Games"},{val:"10",text:"Last 10 Games"},{val:"11",text:"Last 11 Games"},{val:"12",text:"Last 12 Games"},{val:"13",text:"Last 13 Games"},{val:"14",text:"Last 14 Games"},{val:"15",text:"Last 15 Games"}]},OpponentTeamID:{name:"OpponentTeamID",label:"VS Opponent",default:"0",type:"select",desc:"",options:[{val:"0",text:"Vs All Teams"},{val:"1610612737",text:"Atlanta Hawks"},{val:"1610612738",text:"Boston Celtics"},{val:"1610612751",text:"Brooklyn Nets"},{val:"1610612766",text:"Charlotte Hornets"},{val:"1610612741",text:"Chicago Bulls"},{val:"1610612739",text:"Cleveland Cavaliers"},{val:"1610612742",text:"Dallas Mavericks"},{val:"1610612743",text:"Denver Nuggets"},{val:"1610612765",text:"Detroit Pistons"},{val:"1610612744",text:"Golden State Warriors"},{val:"1610612745",text:"Houston Rockets"},{val:"1610612754",text:"Indiana Pacers"},{val:"1610612746",text:"LA Clippers"},{val:"1610612747",text:"Los Angeles Lakers"},{val:"1610612763",text:"Memphis Grizzlies"},{val:"1610612748",text:"Miami Heat"},{val:"1610612749",text:"Milwaukee Bucks"},{val:"1610612750",text:"Minnesota Timberwolves"},{val:"1610612740",text:"New Orleans Pelicans"},{val:"1610612752",text:"New York Knicks"},{val:"1610612760",text:"Oklahoma City Thunder"},{val:"1610612753",text:"Orlando Magic"},{val:"1610612755",text:"Philadelphia 76ers"},{val:"1610612756",text:"Phoenix Suns"},{val:"1610612757",text:"Portland Trail Blazers"},{val:"1610612758",text:"Sacramento Kings"},{val:"1610612759",text:"San Antonio Spurs"},{val:"1610612761",text:"Toronto Raptors"},{val:"1610612762",text:"Utah Jazz"},{val:"1610612764",text:"Washington Wizards"}]},TeamID:{name:"TeamID",label:"Team",default:"0",type:"select",desc:"",options:[{val:"0",text:"All Teams"},{val:"1610612737",text:"Atlanta Hawks"},{val:"1610612738",text:"Boston Celtics"},{val:"1610612751",text:"Brooklyn Nets"},{val:"1610612766",text:"Charlotte Hornets"},{val:"1610612741",text:"Chicago Bulls"},{val:"1610612739",text:"Cleveland Cavaliers"},{val:"1610612742",text:"Dallas Mavericks"},{val:"1610612743",text:"Denver Nuggets"},{val:"1610612765",text:"Detroit Pistons"},{val:"1610612744",text:"Golden State Warriors"},{val:"1610612745",text:"Houston Rockets"},{val:"1610612754",text:"Indiana Pacers"},{val:"1610612746",text:"LA Clippers"},{val:"1610612747",text:"Los Angeles Lakers"},{val:"1610612763",text:"Memphis Grizzlies"},{val:"1610612748",text:"Miami Heat"},{val:"1610612749",text:"Milwaukee Bucks"},{val:"1610612750",text:"Minnesota Timberwolves"},{val:"1610612740",text:"New Orleans Pelicans"},{val:"1610612752",text:"New York Knicks"},{val:"1610612760",text:"Oklahoma City Thunder"},{val:"1610612753",text:"Orlando Magic"},{val:"1610612755",text:"Philadelphia 76ers"},{val:"1610612756",text:"Phoenix Suns"},{val:"1610612757",text:"Portland Trail Blazers"},{val:"1610612758",text:"Sacramento Kings"},{val:"1610612759",text:"San Antonio Spurs"},{val:"1610612761",text:"Toronto Raptors"},{val:"1610612762",text:"Utah Jazz"},{val:"1610612764",text:"Washington Wizards"}]},Month:{name:"Month",label:"Month",default:"0",type:"select",desc:"",options:[{val:"0",text:"All Months"},{val:"4",text:"January"},{val:"5",text:"February"},{val:"6",text:"March"},{val:"7",text:"April"},{val:"8",text:"May"},{val:"9",text:"June"},{val:"10",text:"July"},{val:"11",text:"August"},{val:"12",text:"September"},{val:"1",text:"October"},{val:"2",text:"November"},{val:"3",text:"December"}]},PlayerPosition:{name:"PlayerPosition",label:"Position",default:"",type:"select",desc:"Filter out players by position to view either only Guards, Forwards, or Centers.",options:[{val:"",text:"All Positions"},{val:"F",text:"Forward"},{val:"C",text:"Center"},{val:"G",text:"Guard"}]},StarterBench:{name:"StarterBench",label:"Starter Bench",default:"",type:"select",description:"The option to view stats by either the starters or the bench of a team.",options:[{val:"",text:"All Players"},{val:"Starters",text:"Starters"},{val:"Bench",text:"Bench"}]},PlayerExperience:{name:"PlayerExperience",label:"Experience",default:"",type:"select",description:"The option to view either only rookies, or to exclude rookies from the data set.",options:[{val:"",text:"All Experience"},{val:"Rookie",text:"Rookie"},{val:"Sophomore",text:"Sophomore"},{val:"Veteran",text:"Veteran"}]},GroupQuantity:{name:"GroupQuantity",label:"Line Ups",default:"5",type:"select",description:"",options:[{val:"5",text:"5 Man Lineups"},{val:"4",text:"4 Man Lineups"},{val:"3",text:"3 Man Lineups"},{val:"2",text:"2 Man Lineups"}]},ClutchTime:{name:"ClutchTime",label:"Clutch Time",default:"Last 5 Minutes",type:"select",description:"",options:[{val:"Last 5 Minutes",text:"Last 5 Minutes"},{val:"Last 4 Minutes",text:"Last 4 Minutes"},{val:"Last 3 Minutes",text:"Last 3 Minutes"},{val:"Last 2 Minutes",text:"Last 2 Minutes"},{val:"Last 1 Minute",text:"Last 1 Minute"},{val:"Last 30 Seconds",text:"Last 30 Seconds"},{val:"Last 10 Seconds",text:"Last 10 Seconds"}]},AheadBehind:{name:"AheadBehind",label:"Ahead or Behind",default:"Ahead or Behind",type:"select",description:"",options:[{val:"Ahead or Behind",text:"Ahead or Behind"},{val:"Behind or Tied",text:"Behind or Tied"},{val:"Ahead or Tied",text:"Ahead or Tied"}]},PointDiff:{name:"PointDiff",label:"PointDiff",default:"5",type:"select",description:"",options:[{val:"5",text:"5 Point Diff or Less"},{val:"4",text:"4 Point Diff or Less"},{val:"3",text:"3 Point Diff or Less"},{val:"2",text:"2 Point Diff or Less"},{val:"1",text:"1 Point Diff"}]},DistanceRange:{name:"DistanceRange",label:"Distance Range",default:"5ft Range",type:"select",description:"",options:[{val:"5ft Range",text:"5ft Range"},{val:"8ft Range",text:"8ft Range"},{val:"By Zone",text:"By Zone"}]},DateFrom:{name:"DateFrom",label:"Date From",default:"",type:"datepicker",description:"",selected:{val:""}},DateTo:{name:"DateTo",label:"Date To",default:"",type:"datepicker",description:"",selected:{val:""}},PT:{name:"PT",label:"Players or Teams",default:"player",type:"select",desc:"",options:[{val:"player",text:"Player Stats"},{val:"team",text:"Team Stats"}]},OD:{name:"OD",label:"Offensive or Defensive",default:"offensive",type:"select",desc:"",options:[{val:"offensive",text:"Offensive"},{val:"defensive",text:"Defensive"}]},ShotClockRange:{name:"ShotClockRange",label:"Shot Clock Range",default:"",type:"select",desc:"",options:[{val:"",text:"All Shot Clock Ranges"},{val:"24-22",text:"24-22"},{val:"22-18 Very Early",text:"22-18 Very Early"},{val:"18-15 Early",text:"18-15 Early"},{val:"15-7 Average",text:"15-7 Average"},{val:"7-4 Late",text:"7-4 Late"},{val:"4-0 Very Late",text:"4-0 Very Late"},{val:"ShotClock Off",text:"ShotClock Off"}]},PORound:{name:"PORound",label:"Playoff Round",default:"0",type:"select",desc:"",options:[{val:"0",text:"All Playoff Rounds"},{val:"1",text:"Conference Quarter-Finals"},{val:"2",text:"Conference Semi-Finals"},{val:"3",text:"Conference Finals"},{val:"4",text:"Finals"}]},DraftYear:{name:"DraftYear",label:"Draft Year",default:"",type:"select",desc:"",options:function(){for(var arr=[{val:"",text:"All Draft Years"}],i=2015;i>=1947;--i)arr.push({val:i+"",text:i+""});return arr;
}()},DraftPick:{name:"DraftPick",label:"Draft Pick",default:"",type:"select",desc:"",options:[{val:"",text:"All Draft Rounds"},{val:"1st Round",text:"1st Round"},{val:"2nd Round",text:"2nd Round"},{val:"1st Pick",text:"1st Pick"},{val:"Lottery Pick",text:"Lottery Pick"},{val:"Top 5 Pick",text:"Top 5 Pick"},{val:"Top 10 Pick",text:"Top 10 Pick"},{val:"Top 15 Pick",text:"Top 15 Pick"},{val:"Top 20 Pick",text:"Top 20 Pick"},{val:"Top 25 Pick",text:"Top 25 Pick"},{val:"Picks 11 Thru 20",text:"Picks 11 Thru 20"},{val:"Picks 21 Thru 30",text:"Picks 21 Thru 30"},{val:"Undrafted",text:"Undrafted"}]},College:{name:"College",label:"College",default:"",type:"select",desc:"",options:function(){var arr=[{val:"",text:"All Affiliations"},{val:"High School",text:"High School"},{val:"D-League",text:"D-League"},{val:"None",text:"No College"},{val:"",text:"---"}],colleges=["Acadia (CAN)","Adams State","Adelphi","Air Force","Akron","Alabama","Alabama A&M","Alabama-Birmingham","Alabama-Huntsville","Alabama State","Albany","Albany State (GA)","Alcorn State","Alliance","American","American International","Angelo State","Appalachian State","Arizona","Arizona State","Arkansas","Arkansas-Fort Smith","Arkansas-Little Rock","Arkansas-Pine Bluff","Arkansas State","Army","Assumption","Auburn","Auburn-Montgomery","Augsburg","Augustana (IL)","Augustana (SD)","Augusta State","Aurora","Austin Peay","Averett","Azusa Pacific","Ball State","Baltimore","Barton","Barton Community College","Baylor","Belmont","Belmont Abbey","Beloit","Bemidji State","Benedict","Bethel (TN)","Binghamton","Biola","Blinn","Bloomfield","Bloomsburg","Bluefield","Boise State","Boston College","Boston University","Bowie State","Bowling Green","Bradley","Brevard Community College","Brewton-Parker","Bridgeport","Brigham Young","Brigham Young-Hawaii","Brooklyn","Brown","Bryant","Bucknell","Buffalo","Buffalo State","Butler","Butler Community College","C.W. Post","California","California (PA)","California-Berkeley","California-Davis","California-Irvine","California-Los Angeles","California-Riverside","California-Santa Barbara","Cal State-Bakersfield","Cal State-Dominguez Hills","Cal State-Fullerton","Cal State-Los Angeles","Cal State-Northridge","Cal State-Poly Pomona","Cal State-San Bernardino","Campbell","Campbellsville","Canisius","Case Western","Catholic","Centenary (LA)","Central Arkansas","Central Connecticut State","Central Florida","Central Michigan","Central Missouri","Central Oklahoma","Central State (OH)","Central Washington","Charleston (WV)","Cheyney","Chicago State","Christopher Newport","Cincinnati","City College of New York","Claflin","Clark Atlanta","Clayton State","Clemson","Cleveland State","Colgate","College of Charleston","College of New Jersey","Colorado","Colorado Christian","Colorado State","Colorado State-Pueblo","Columbia","Columbus State","Concordia","Concordia-Irvine","Connecticut","Coppin State","Cornell","Corpus Christi","Creighton","Culver-Stockton","Dakota Wesleyan","Dartmouth","Davidson","Davis & Elkins","Dayton","Delaware","Delaware State","Delta State","Denver","DePaul","DePauw","Detroit Mercy","Dillard","District of Columbia","Drake","Drexel","Duke","Duquesne","East Carolina","East Central","Eastern Illinois","Eastern Kentucky","Eastern Michigan","Eastern New Mexico","Eastern Oklahoma State (Junior College)","Eastern Washington","East Tennessee State","Eckerd","Elizabeth City State","Elon","Evangel","Evansville","Fairfield","Fairleigh Dickinson","Fayetteville State","Ferris State","Findlay","Florida","Florida A&M","Florida Atlantic","Florida Community College","Florida Gulf Coast","Florida International","Florida State","Fordham","Fort Valley State","Franklin","Fresno State","Friends","Furman","Gannon","Gardner-Webb","George Mason","Georgetown","Georgetown College","George Washington","Georgia","Georgia Southern","Georgia State","Georgia Tech","Gonzaga","Grambling","Grand Canyon","Green Bay","Grinnell College","Guilford","Hamline","Hampton","Hardin-Simmons","Hartford","Harvard","Hawaii","High Point","Hillsborough Community College","Hillsdale","Hofstra","Holy Cross","Holy Family","Houston","Houston Baptist","Howard","Humboldt State","Huntington","Idaho","Idaho State","Illinois","Illinois-Chicago","Illinois State","Illinois Wesleyan","Incarnate Word","Indiana","Indianapolis","Indiana Purdue-Fort Wayne","Indiana Purdue-Indianapolis","Indiana State","Indiana Tech","Indian Hills Community College","Iona","Iowa","Iowa State","Jackson State","Jacksonville","Jacksonville State","James Madison","Johnson C. Smith","Kansas","Kansas State","Kennesaw State","Kent State","Kentucky","Kentucky State","Kentucky Wesleyan","Kenyon","King's (NY)","Lafayette","Lamar","La Salle","Lawrence Tech","Lebanon Valley","Lee","Lehigh","Le Moyne","Lewis","Liberty","Lincoln (MO)","Lipscomb","Long Beach State","Long Island-Brooklyn","Longwood","Los Angeles Community College","Louisiana-Lafayette","Louisiana-Monroe","Louisiana State","Louisiana Tech","Louisville","Loyola-Chicago","Loyola-Maryland","Loyola-Marymount","Maine","Manhattan","Marist","Marquette","Marshall","Maryland","Maryland-Eastern Shore","Massachusetts","Master's","McNeese State","Memphis","Mercer","Meridian Community College","Merrimack","Metro State","Miami (FL)","Miami (OH)","Michigan","Michigan State","Middle Tennessee State","Midland","Midwestern State","Miles","Millersville","Minnesota","Minnesota-Duluth","Minnesota State-Mankato","Mississippi","Mississippi Gulf Community College","Mississippi State","Mississippi Valley State","Missouri","Missouri-Kansas City","Missouri State","Missouri Western State","Monmouth","Montana","Montana State","Montevallo","Morehead State","Morehouse","Morgan State","Mountain State","Mount St. Mary's","Mount Union","Mt. San Antonio","Muhlenberg","Murray State","Navy","Nebraska","Nebraska-Kearney","Nebraska-Omaha","Nevada","Nevada-Las Vegas","Nevada-Reno","New Jersey Institute of Technology","New Mexico","New Mexico Highlands","New Mexico State","New Mexico Tech","New Orleans","New York University","Niagara","Nicholls State","Norfolk State","North Carolina","North Carolina A&T","North Carolina-Asheville","North Carolina Central","North Carolina-Charlotte","North Carolina-Greensboro","North Carolina State","North Carolina-Wilmington","North Dakota","North Dakota State","Northeastern","Northeastern State","Northeast Mississippi Community College","Northern Arizona","Northern Colorado","Northern Illinois","Northern Iowa","Northern Kentucky","North Park","North Texas","Northwestern","Northwestern Oklahoma","Northwestern Oklahoma State","Northwestern State","Northwest Florida State","Northwest Nazarene","Northwood","Notre Dame","Oakland","Ohio","Ohio State","Ohio Wesleyan","Oklahoma","Oklahoma Baptist","Oklahoma City","Oklahoma Science and Arts","Oklahoma State","Oklahoma Wesleyan","Old Dominion","Oral Roberts","Oregon","Oregon State","Ouachita Baptist","Pacific","Paine","Penn State","Pennsylvania","Pennsylvania-Kutztown","Pepperdine","Pfeiffer","Phillips","Pikeville","Pittsburgh","Portland","Portland State","Potsdam","Prairie View A&M","Princeton","Providence","Puget Sound","Purdue","Queens (NY)","Quincy","Rhode Island","Rice","Richmond","Rider","Robert Morris (IL)","Rochester (NY)","Rockhurst","Rutgers","Sacramento State","Sacred Heart","Saginaw Valley","Saint Augustine's","Saint Francis (PA)","Saint Joseph's","Saint Louis","Saint Mary's (CA)","Saint Mary's (MN)","Saint Peter's","Saint Rose","Saint Vincent","Salem International","Sam Houston State","San Diego","San Diego State","San Francisco","San Jose State","Santa Clara","Scranton","Seattle","Seton Hall","Seward County Community College","Shaw","Shippensburg","Siena","Slippery Rock","South Alabama","South Carolina","South Carolina-Aiken","South Carolina State","South Carolina Upstate","South Dakota","South Dakota State","Southeastern Illinois","Southeastern Louisiana","Southeastern Oklahoma State","Southeast Missouri State","Southern","Southern California","Southern Illinois","Southern Methodist","Southern Mississippi","Southern Nazarene","Southern Utah","South Florida","Southwest Baptist","Springfield","St. Ambrose","St. Anselm","St. Bonaventure","St. Cloud State","St. Francis Brooklyn","St. John's (NY)","St. Mary's (CA)","St. Mary's (TX)","St. Peter's","St. Thomas (FL)","Stanford","Stephen F. Austin","Stetson","Stony Brook","Syracuse","Tampa","Tarleton State","Temple","Tennessee","Tennessee-Chattanooga","Tennessee-Martin","Tennessee State","Tennessee Tech","Texas","Texas A&M","Texas A&M-Commerce","Texas A&M-Corpus Christi","Texas-Arlington","Texas Christian","Texas-El Paso","Texas-Pan American","Texas-San Antonio","Texas Southern","Texas State","Texas Tech","Texas Wesleyan","Thomas More","Toledo","Towson","Trinity Valley Community College","Troy State","Truman State","Tulane","Tulsa","Tuskegee","UCLA","Utah","Utah State","Utah Valley","Valdosta State","Valparaiso","Vanderbilt","Venezuela","Vermont","Villanova","Virginia","Virginia Commonwealth","Virginia Military Institute","Virginia Tech","Virginia Union","Voorhees","Vorhees","Wake Forest","Walsh","Washington","Washington & Jefferson","Washington State","Wayne State (MI)","Weber State","Western Carolina","Western Illinois","Western Kentucky","Western Michigan","Western Washington","West Florida","West Georgia","Westminster (PA)","West Texas A&M","West Virginia","West Virginia State","West Virginia Tech","West Virginia Wesleyan","Wheaton (IL)","Whitworth","Wichita State","Wilberforce","William & Mary","William Jessup","William Paterson","William Penn","Wingate","Winona State","Winston-Salem State","Winthrop (SC)","Wisconsin","Wisconsin-Eau Claire","Wisconsin-Green Bay","Wisconsin-Milwaukee","Wisconsin-Parkside","Wisconsin-River Falls","Wisconsin-Stevens Point","Wisconsin-Whitewater","Wofford","Wooster","Wright State","Wyoming","Xavier","Xavier (LA)","Yale","Yonsei (KOR)","Youngstown State"];for(var i in colleges)arr.push({val:colleges[i],text:colleges[i]});return arr}()},Country:{name:"Country",label:"Country",default:"",type:"select",desc:"",options:function(){var arr=[{val:"",text:"All Countries"}],countries=["International","Angola","Argentina","Australia","Belize","Boznia & Herzegovina","Brazil","Cameroon","Canada","China","Congo","Croatia","Czech Republic","Democratic Republic of Congo","Dominican Republic","England","Finland","France","Georgia","Germany","Great Britain","Greece","Haiti","Iran","Ireland","Israel","Italy","Jamaica","Latvia","Lithuania","Macedonia","Mali","Mexico","Montenegro","Netherlands","New Zealand","Nigeria","Panama","Poland","Puerto Rico","Russia","Scotland","Senegal","Serbia","Serbia and Montenegro","Slovenia","South Korea","Spain","St. Vincent & Grenadines","Sudan","Sudan (UK)","Sweden","Switzerland","Tanzania","Turkey","U.S. Virgin Islands","Ukraine","Uruguay","USA","USSR","Venezuela","Yugoslavia"];for(var i in countries)arr.push({val:countries[i],text:countries[i]});return arr}()},Height:{name:"Height",label:"Height",default:"",type:"select",desc:"",options:[{val:"",text:"All Heights"},{val:"LT 6-0",text:"< 6-0"},{val:"GT 6-0",text:"> 6-0"},{val:"LT 6-4",text:"< 6-4"},{val:"GT 6-4",text:"> 6-4"},{val:"LT 6-7",text:"< 6-7"},{val:"GT 6-7",text:"> 6-7"},{val:"LT 6-10",text:"< 6-10"},{val:"GT 6-10",text:"> 6-10"},{val:"LT 7-0",text:"< 7-0"},{val:"GT 7-0",text:"> 7-0"}]},Weight:{name:"Weight",label:"Weight",default:"",type:"select",desc:"",options:[{val:"",text:"All Weights"},{val:"LT 200",text:"< 200"},{val:"GT 200",text:"> 200"},{val:"LT 225",text:"< 225"},{val:"GT 225",text:"> 225"},{val:"LT 250",text:"< 250"},{val:"GT 250",text:"> 250"},{val:"LT 275",text:"< 275"},{val:"GT 275",text:"> 275"},{val:"LT 300",text:"< 300"},{val:"GT 300",text:"> 300"}]},DefenseCategory:{name:"DefenseCategory",label:"Defense Category",default:"Overall",type:"select",desc:"",options:[{val:"Overall",text:"Overall"},{val:"3 Pointers",text:"3 Pointers"},{val:"2 Pointers",text:"2 Pointers"},{val:"Less Than 6Ft",text:"Less Than 6Ft"},{val:"Less Than 10Ft",text:"Less Than 10Ft"},{val:"Less Than 10Ft",text:"Less Than 10Ft"},{val:"Greater Than 15Ft",text:"Greater Than 15Ft"}]}}),function(){function getTeams(){var conf={e:"Eastern",w:"Western"},div={at:"Atlantic",ce:"Central",nw:"Northwest",pa:"Pacific",se:"Southeast",sw:"Southwest"},array=[["1610612737","ATL",conf.e,div.se,0,"hawks","Atlanta","Hawks",["E13A3E","C4D600","061922"]],["1610612738","BOS",conf.e,div.at,0,"celtics","Boston","Celtics",["008348","061922","BB9753"]],["1610612751","BKN",conf.e,div.at,0,"nets","Brooklyn","Nets",["061922","FFFFFF"]],["1610612766","CHA",conf.e,div.se,0,"hornets","Charlotte","Hornets",["1D1160","008CA8","A1A1A4"]],["1610612741","CHI",conf.e,div.ce,0,"bulls","Chicago","Bulls",["CE1141","061922"]],["1610612739","CLE",conf.e,div.ce,0,"cavaliers","Cleveland","Cavaliers",["860038","FDBB30","002D62"]],["1610612742","DAL",conf.w,div.sw,0,"mavericks","Dallas","Mavericks",["061922","007DC5","C4CED3","061922"]],["1610612743","DEN",conf.w,div.nw,0,"nuggets","Denver","Nuggets",["4D90CD","FDB927"]],["1610612765","DET",conf.e,div.ce,0,"pistons","Detroit","Pistons",["006BB6","ED174C","0F586C"]],["1610612744","GSW",conf.w,div.pa,0,"warriors","Golden State","Warriors",["FDB927","006BB6"]],["1610612745","HOU",conf.w,div.sw,0,"rockets","Houston","Rockets",["CE1141","C4CED3","061922"]],["1610612754","IND",conf.e,div.ce,0,"pacers","Indiana","Pacers",["FFC633","00275D","BEC0C2"]],["1610612746","LAC",conf.w,div.pa,0,"clippers","LA","Clippers",["ED174C","006BB6","061922"]],["1610612747","LAL",conf.w,div.pa,0,"lakers","Los Angeles","Lakers",["FDB927","552582","061922"]],["1610612763","MEM",conf.w,div.sw,0,"grizzlies","Memphis","Grizzlies",["7399C6","BED4E9","FDB927","0F586C"]],["1610612748","MIA",conf.e,div.se,0,"heat","Miami","Heat",["98002E","F9A01B","061922"]],["1610612749","MIL",conf.e,div.ce,0,"bucks","Milwaukee","Bucks",["00471B","F0EBD2","061922","007DC5"]],["1610612750","MIN",conf.w,div.nw,0,"timberwolves","Minnesota","Timberwolves",["005083","00A94F","C4CED3","061922"]],["1610612740","NOP",conf.w,div.sw,0,"pelicans","New Orleans","Pelicans",["002B5C","E31837","B4975A"]],["1610612752","NYK",conf.e,div.at,0,"knicks","New York","Knicks",["006BB6","F58426","BEC0C2"]],["1610612760","OKC",conf.w,div.nw,0,"thunder","Oklahoma City","Thunder",["007DC3","F05133","FDBB30","002D62"]],["1610612753","ORL",conf.e,div.se,0,"magic","Orlando","Magic",["007DC5","C4CED3","061922"]],["1610612755","PHI",conf.e,div.at,0,"sixers","Philadelphia","Sixers",["ED174C","006BB6","002B5C"]],["1610612756","PHX",conf.w,div.pa,0,"suns","Phoenix","Suns",["E56020","1D1160","63717A","F9A01B"]],["1610612757","POR",conf.w,div.nw,0,"blazers","Portland","Trail Blazers",["061922","E03A3E","BAC3C9","061922"]],["1610612758","SAC",conf.w,div.pa,0,"kings","Sacramento","Kings",["724C9F","8E9090","061922"]],["1610612759","SAS",conf.w,div.sw,0,"spurs","San Antonio","Spurs",["061922","BAC3C9"]],["1610612761","TOR",conf.e,div.at,0,"raptors","Toronto","Raptors",["CE1141","061922","A1A1A4"]],["1610612762","UTA",conf.w,div.nw,0,"jazz","Utah","Jazz",["002B5C","F9A01B","00471B","BEC0C2"]],["1610612764","WAS",conf.e,div.se,0,"wizards","Washington","Wizards",["002B5C","E31837","C4CED4"]],["1610616833","EST",conf.e,div.se,1,"east","East","All-Star East",["00559A"]],["1610616834","WST",conf.w,div.sw,1,"est","West","All-Star West",["EC003D"]]],teamsObject=array.map(function(row){var obj={id:row[0],abbr:row[1],displayAbbr:row[1],conference:row[2],displayConference:row[2],division:row[3],special:!!row[4],code:row[5],city:row[6],name:row[7],color:row[8][0],colors:row[8]};return obj});return teamsObject}stats.constant("TEAMS",getTeams())}(),function(){stats.config(["$locationProvider","$routeProvider",function($locationProvider,$routeProvider){$locationProvider.html5Mode(!1),$locationProvider.hashPrefix("!");var routes=[["/articles/","/id/:ArticleID/",!1,""],["/articles/","/:PostSlug/",!1,""],["/game/","/:GameID/","game/boxscore.html","boxscore"],["/game/","/:GameID/advanced/","game/advanced.html","advanced"],["/game/","/:GameID/fourfactors/","game/fourfactors.html","fourfactors"],["/game/","/:GameID/misc/","game/misc.html","misc"],["/game/","/:GameID/scoring/","game/scoring.html","scoring"],["/game/","/:GameID/usage/","game/usage.html","usage"],["/game/","/:GameID/playbyplay/","game/playbyplay.html","playbyplay"],["/game/","/:GameID/playertracking/","game/playertracking.html","playertracking"],["/game/","/:GameID/gamecharts/","game/gamecharts.html","gamecharts"],["/game/","/:GameID/hustle/","game/hustle.html","hustle"],["/team/","/:TeamID/","team/profile.html","profile"],["/team/","/:TeamID/stats/","team/statsTraditional.html","statsTraditional"],["/team/","/:TeamID/stats/advanced/","team/statsAdvanced.html","statsAdvanced"],["/team/","/:TeamID/stats/fourfactors/","team/statsFourFactors.html","statsFourFactors"],["/team/","/:TeamID/stats/misc/","team/statsMisc.html","statsMisc"],["/team/","/:TeamID/stats/scoring/","team/statsScoring.html","statsScoring"],["/team/","/:TeamID/stats/opponent/","team/statsOpponent.html","statsOpponent"],["/team/","/:TeamID/stats/shooting/","team/statsShooting.html","statsShooting"],["/team/","/:TeamID/lineups/","team/lineupsTraditional.html","lineupsTraditional"],["/team/","/:TeamID/lineups/advanced/","team/lineupsAdvanced.html","lineupsAdvanced"],["/team/","/:TeamID/lineups/fourfactors/","team/lineupsFourFactors.html","lineupsFourFactors"],["/team/","/:TeamID/lineups/misc/","team/lineupsMisc.html","lineupsMisc"],["/team/","/:TeamID/lineups/scoring/","team/lineupsScoring.html","lineupsScoring"],["/team/","/:TeamID/lineups/opponent/","team/lineupsOpponent.html","lineupsOpponent"],["/team/","/:TeamID/players/","team/playersTraditional.html","playersTraditional"],["/team/","/:TeamID/players/advanced/","team/playersAdvanced.html","playersAdvanced"],["/team/","/:TeamID/players/misc/","team/playersMisc.html","playersMisc"],["/team/","/:TeamID/players/scoring/","team/playersScoring.html","playersScoring"],["/team/","/:TeamID/players/usage/","team/playersUsage.html","playersUsage"],["/team/","/:TeamID/onoffcourt/","team/onoffcourtTraditional.html","onoffcourtTraditional"],["/team/","/:TeamID/onoffcourt/advanced/","team/onoffcourtAdvanced.html","onoffcourtAdvanced"],["/team/","/:TeamID/onoffcourt/fourfactors/","team/onoffcourtFourFactors.html","onoffcourtFourFactors"],["/team/","/:TeamID/onoffcourt/misc/","team/onoffcourtMisc.html","onoffcourtMisc"],["/team/","/:TeamID/onoffcourt/scoring/","team/onoffcourtScoring.html","onoffcourtScoring"],["/team/","/:TeamID/onoffcourt/opponent/","team/onoffcourtOpponent.html","onoffcourtOpponent"],["/team/","/:TeamID/onoffcourt/summary/","team/onoffcourtSummary.html","onoffcourtSummary"],["/team/","/:TeamID/gamelogs/","team/gamelogs.html","gamelogs"],["/team/","/:TeamID/seasons/","team/seasons.html","seasons"],["/team/","/:TeamID/yearoveryear/","team/yearoveryear.html","yearoveryear"],["/team/","/:TeamID/tracking/shots/","team/trackingDashShots.html","trackingdashshots"],["/team/","/:TeamID/tracking/rebounds/","team/trackingDashRebounds.html","trackingdashrebounds"],["/team/","/:TeamID/tracking/passes/","team/trackingDashPasses.html","trackingdashpasses"],["/player/","/:PlayerID/video/","player/video.html","video"],["/player/","/:PlayerID/","player/profile.html","profile"],["/player/","/:PlayerID/career/","player/career.html","career"],["/player/","/:PlayerID/fantasy","player/fantasy.html","fantasy"],["/player/","/:PlayerID/vs/","player/vsPlayerBase.html","compare"],["/player/","/:PlayerID/vs/:VsPlayer/:MultiPlayer","player/vsPlayerBase.html","compare"],["/player/","/:PlayerID/gamelogs/","player/game-logs.html","gamelogs"],["/player/","/:PlayerID/stats/","player/statsTraditional.html","statsTraditional"],["/player/","/:PlayerID/stats/advanced/","player/statsAdvanced.html","statsAdvanced"],["/player/","/:PlayerID/stats/misc/","player/statsMisc.html","statsMisc"],["/player/","/:PlayerID/stats/scoring/","player/statsScoring.html","statsScoring"],["/player/","/:PlayerID/stats/shooting/","player/statsShooting.html","statsShooting"],["/player/","/:PlayerID/stats/usage/","player/statsUsage.html","statsUsage"],["/player/","/:PlayerID/tracking/shots/","player/trackingShots.html","trackingShots"],["/player/","/:PlayerID/tracking/rebounds/","player/trackingRebounds.html","trackingRebounds"],["/player/","/:PlayerID/tracking/passes/","player/trackingPasses.html","trackingPasses"],["/player/","/:PlayerID/tracking/defense/","player/trackingDefense.html","trackingDefense"],["/league/team/defense/","/","league/team/defense/overall.html"],["/league/team/defense/","/3pt/","league/team/defense/3pt.html"],["/league/team/defense/","/2pt/","league/team/defense/2pt.html"],["/league/team/defense/","/lt6/","league/team/defense/lt6.html"],["/league/team/defense/","/lt10/","league/team/defense/lt10.html"],["/league/team/defense/","/gt15/","league/team/defense/gt15.html"],["/league/team/shots/","/","league/team/shots/league-team-shots.html"],["/league/team/","/","league/team/generalTraditional.html","generalTraditional"],["/league/team/","/advanced/","league/team/generalAdvanced.html","generalAdvanced"],["/league/team/","/fourfactors/","league/team/generalFourFactors.html","generalFourFactors"],["/league/team/","/misc/","league/team/generalMisc.html","generalMisc"],["/league/team/","/scoring/","league/team/generalScoring.html","generalScoring"],["/league/team/","/opponent/","league/team/generalOpponent.html","generalOpponent"],["/league/team/","/defense/","league/team/generalDefense.html","generalDefense"],["/league/team/","/clutch/","league/team/clutchTraditional.html","clutchTraditional"],["/league/team/","/clutch/advanced/","league/team/clutchAdvanced.html","clutchAdvanced"],["/league/team/","/clutch/fourfactors/","league/team/clutchFourFactors.html","clutchFourFactors"],["/league/team/","/clutch/misc/","league/team/clutchMisc.html","clutchMisc"],["/league/team/","/clutch/scoring/","league/team/clutchScoring.html","clutchScoring"],["/league/team/","/clutch/opponent/","league/team/clutchOpponent.html","clutchOpponent"],["/league/team/","/hustle/","league/team/hustle.html","hustle"],["/league/team/","/shooting/","league/team/shooting.html","shooting"],["/league/team/","/oppshooting/","league/team/oppShooting.html","oppshooting"],["/league/team/","/gamelogs/","league/team/gamelogs/league-team-game-logs.html","gamelogs"],["/league/team/","/playtype/","league/team/playtype/transition.html","playtype"],["/league/team/","/playtype/transition/","league/team/playtype/transition.html","playtype"],["/league/team/","/playtype/isolation/","league/team/playtype/isolation.html","playtype"],["/league/team/","/playtype/ball-handler/","league/team/playtype/ball-handler.html","playtype"],["/league/team/","/playtype/roll-man/","league/team/playtype/roll-man.html","playtype"],["/league/team/","/playtype/post-up/","league/team/playtype/post-up.html","playtype"],["/league/team/","/playtype/spot-up/","league/team/playtype/spot-up.html","playtype"],["/league/team/","/playtype/hand-off/","league/team/playtype/hand-off.html","playtype"],["/league/team/","/playtype/off-screen/","league/team/playtype/off-screen.html","playtype"],["/league/team/","/playtype/cut/","league/team/playtype/cut.html","playtype"],["/league/team/","/playtype/putbacks/","league/team/playtype/putbacks.html","playtype"],["/league/team/","/playtype/misc/","league/team/playtype/misc.html","playtype"],["/league/allstar/","/","league/allstar/generalTraditional.html","generalTraditional"],["/league/allstar/","/advanced/","league/allstar/generalAdvanced.html","generalAdvanced"],["/league/allstar/","/fourfactors/","league/allstar/generalFourFactors.html","generalFourFactors"],["/league/allstar/","/misc/","league/allstar/generalMisc.html","generalMisc"],["/league/allstar/","/scoring/","league/allstar/generalScoring.html","generalScoring"],["/league/allstar/","/opponent/","league/allstar/generalOpponent.html","generalOpponent"],["/league/allstar/","/clutch/","league/allstar/clutchTraditional.html","clutchTraditional"],["/league/allstar/","/clutch/advanced/","league/allstar/clutchAdvanced.html","clutchAdvanced"],["/league/allstar/","/clutch/fourfactors/","league/allstar/clutchFourFactors.html","clutchFourFactors"],["/league/allstar/","/clutch/misc/","league/allstar/clutchMisc.html","clutchMisc"],["/league/allstar/","/clutch/scoring/","league/allstar/clutchScoring.html","clutchScoring"],["/league/allstar/","/clutch/opponent/","league/allstar/clutchOpponent.html","clutchOpponent"],["/league/allstar/","/shooting/","league/allstar/shooting.html","shooting"],["/league/allstar/","/oppshooting/","league/allstar/oppShooting.html","oppshooting"],["/league/player/defense/","/","league/player/defense/overall.html"],["/league/player/defense/","/2pt/","league/player/defense/2pt.html"],["/league/player/defense/","/3pt/","league/player/defense/3pt.html"],["/league/player/defense/","/lt6/","league/player/defense/lt6.html"],["/league/player/defense/","/lt10/","league/player/defense/lt10.html"],["/league/player/defense/","/gt15/","league/player/defense/gt15.html"],["/league/player/shots/","/","league/player/shots/league-player-shots.html"],["/league/player/","/","league/player/generalTraditional.html","generalTraditional"],["/league/player/","/advanced/","league/player/generalAdvanced.html","generalAdvanced"],["/league/player/","/misc/","league/player/generalMisc.html","generalMisc"],["/league/player/","/scoring/","league/player/generalScoring.html","generalScoring"],["/league/player/","/usage/","league/player/generalUsage.html","generalUsage"],["/league/player/","/opponent/","league/player/generalOpponent.html","generalOpponent"],["/league/player/","/defense/","league/player/generalDefense.html","generalDefense"],["/league/player/","/clutch/","league/player/clutchTraditional.html","clutchTraditional"],["/league/player/","/clutch/advanced/","league/player/clutchAdvanced.html","clutchAdvanced"],["/league/player/","/clutch/misc/","league/player/clutchMisc.html","clutchMisc"],["/league/player/","/clutch/scoring/","league/player/clutchScoring.html","clutchScoring"],["/league/player/","/clutch/usage/","league/player/clutchUsage.html","clutchUsage"],["/league/player/","/hustle/","league/player/hustle.html","hustle"],["/league/player/","/shooting/","league/player/shooting.html","shooting"],["/league/player/","/oppshooting/","league/player/oppShooting.html","oppshooting"],["/league/player/","/tracking/shots/","league/player/tracking/league-player-tracking-shots.html","trackingShots"],["/league/player/","/bio/","league/player/bio/league-player-bio.html","playerBio"],["/league/player/","/gamelogs/","league/player/gamelogs/league-player-game-logs.html","gamelogs"],["/league/player/","/playtype/","league/player/playtype/transition.html","playtype"],["/league/player/","/playtype/transition/","league/player/playtype/transition.html","playtype"],["/league/player/","/playtype/isolation/","league/player/playtype/isolation.html","playtype"],["/league/player/","/playtype/ball-handler/","league/player/playtype/ball-handler.html","playtype"],["/league/player/","/playtype/roll-man/","league/player/playtype/roll-man.html","playtype"],["/league/player/","/playtype/post-up/","league/player/playtype/post-up.html","playtype"],["/league/player/","/playtype/spot-up/","league/player/playtype/spot-up.html","playtype"],["/league/player/","/playtype/hand-off/","league/player/playtype/hand-off.html","playtype"],["/league/player/","/playtype/off-screen/","league/player/playtype/off-screen.html","playtype"],["/league/player/","/playtype/cut/","league/player/playtype/cut.html","playtype"],["/league/player/","/playtype/putbacks/","league/player/playtype/putbacks.html","playtype"],["/league/player/","/playtype/misc/","league/player/playtype/misc.html","playtype"],["/league/lineups/","/","league/lineups/traditional.html","traditional"],["/league/lineups/","/advanced/","league/lineups/advanced.html","advanced"],["/league/lineups/","/fourfactors/","league/lineups/fourfactors.html","fourfactors"],["/league/lineups/","/misc/","league/lineups/misc.html","misc"],["/league/lineups/","/scoring/","league/lineups/scoring.html","scoring"],["/league/lineups/","/opponent/","league/lineups/opponent.html","opponent"],["/defensivehub/","/","league/defensivehub/summary.html","summary"],["/defensivehub/","/leaders/player/","league/defensivehub/generalDefensePlayer.html","leaders"],["/defensivehub/","/leaders/team/","league/defensivehub/generalDefenseTeam.html","leaders"],["/defensivehub/","/opp/player/","league/defensivehub/opponentPlayer.html","opponent"],["/defensivehub/","/opp/team/","league/defensivehub/opponentTeam.html","opponent"],["/defensivehub/","/oppshooting/player/","league/defensivehub/oppShootingPlayer.html","shooting"],["/defensivehub/","/oppshooting/team/","league/defensivehub/oppShootingTeam.html","shooting"],["/defensivehub/","/hustle/player/","league/defensivehub/hustlePlayer.html","hustle"],["/defensivehub/","/hustle/team/","league/defensivehub/hustleTeam.html","hustle"],["/defensivehub/","/lineups/","league/defensivehub/lineups.html","lineups"],["/defensivehub/","/tracking/player/","league/defensivehub/tracking/player/overall.html","tracking"],["/defensivehub/","/tracking/player/2pt/","league/defensivehub/tracking/player/2pt.html","tracking"],["/defensivehub/","/tracking/player/3pt/","league/defensivehub/tracking/player/3pt.html","tracking"],["/defensivehub/","/tracking/player/lt6/","league/defensivehub/tracking/player/lt6.html","tracking"],["/defensivehub/","/tracking/player/lt10/","league/defensivehub/tracking/player/lt10.html","tracking"],["/defensivehub/","/tracking/player/gt15/","league/defensivehub/tracking/player/gt15.html","tracking"],["/defensivehub/","/tracking/player/rim/","league/defensivehub/tracking/player/rim.html","tracking"],["/defensivehub/","/tracking/team/","league/defensivehub/tracking/team/overall.html","tracking"],["/defensivehub/","/tracking/team/2pt/","league/defensivehub/tracking/team/2pt.html","tracking"],["/defensivehub/","/tracking/team/3pt/","league/defensivehub/tracking/team/3pt.html","tracking"],["/defensivehub/","/tracking/team/lt6/","league/defensivehub/tracking/team/lt6.html","tracking"],["/defensivehub/","/tracking/team/lt10/","league/defensivehub/tracking/team/lt10.html","tracking"],["/defensivehub/","/tracking/team/gt15/","league/defensivehub/tracking/team/gt15.html","tracking"],["/defensivehub/","/tracking/team/rim/","league/defensivehub/tracking/team/rim.html","tracking"],["/defensivehub/","/playtype/player/","league/defensivehub/playtype/player/isolation.html","playtype"],["/defensivehub/","/playtype/player/isolation/","league/defensivehub/playtype/player/isolation.html","playtype"],["/defensivehub/","/playtype/player/ball-handler/","league/defensivehub/playtype/player/ball-handler.html","playtype"],["/defensivehub/","/playtype/player/roll-man/","league/defensivehub/playtype/player/roll-man.html","playtype"],["/defensivehub/","/playtype/player/post-up/","league/defensivehub/playtype/player/post-up.html","playtype"],["/defensivehub/","/playtype/player/spot-up/","league/defensivehub/playtype/player/spot-up.html","playtype"],["/defensivehub/","/playtype/player/hand-off/","league/defensivehub/playtype/player/hand-off.html","playtype"],["/defensivehub/","/playtype/player/off-screen/","league/defensivehub/playtype/player/off-screen.html","playtype"],["/defensivehub/","/playtype/team/","league/defensivehub/playtype/team/isolation.html","playtype"],["/defensivehub/","/playtype/team/isolation/","league/defensivehub/playtype/team/isolation.html","playtype"],["/defensivehub/","/playtype/team/transition/","league/defensivehub/playtype/team/transition.html","playtype"],["/defensivehub/","/playtype/team/ball-handler/","league/defensivehub/playtype/team/ball-handler.html","playtype"],["/defensivehub/","/playtype/team/roll-man/","league/defensivehub/playtype/team/roll-man.html","playtype"],["/defensivehub/","/playtype/team/post-up/","league/defensivehub/playtype/team/post-up.html","playtype"],["/defensivehub/","/playtype/team/spot-up/","league/defensivehub/playtype/team/spot-up.html","playtype"],["/defensivehub/","/playtype/team/hand-off/","league/defensivehub/playtype/team/hand-off.html","playtype"],["/defensivehub/","/playtype/team/off-screen/","league/defensivehub/playtype/team/off-screen.html","playtype"],["/defensivehub/","/playtype/team/cut/","league/defensivehub/playtype/team/cut.html","playtype"],["/defensivehub/","/playtype/team/putbacks/","league/defensivehub/playtype/team/putbacks.html","playtype"],["/draftcombine/","/","draftcombine/summary.html","summary"],["/draftcombine/","/spotup/","draftcombine/spotup.html","spotup"],["/draftcombine/","/nonstationary/","draftcombine/nonstationary.html","nonstationary"],["/draftcombine/","/agility/","draftcombine/agility.html","agility"],["/draftcombine/","/anthro/","draftcombine/anthro.html","summary"],["/draftcombine/","/scrimmages/thursday/","draftcombine/scrimmages-thursday.html","thursday"],["/draftcombine/","/scrimmages/friday/","draftcombine/scrimmages-friday.html","friday"],["/drafthistory/","/","drafthistory/summary.html","summary"],["/tracking/","/","tracking/catchshoot.html","catchshoot"],["/tracking/","/:Section/","tracking/catchshoot.html","catchshoot"],["/tracking/","/:Section/catchshoot/","tracking/catchshoot.html","catchshoot"],["/tracking/","/:Section/defense/","tracking/defense.html","defense"],["/tracking/","/:Section/drives/","tracking/drives.html","drives"],["/tracking/","/:Section/passing/","tracking/passing.html","passing"],["/tracking/","/:Section/possessions/","tracking/possessions.html","possessions"],["/tracking/","/:Section/pullup/","tracking/pullup.html","pullup"],["/tracking/","/:Section/offensive-rebounding/","tracking/offensive-rebounding.html","offensive-rebounding"],["/tracking/","/:Section/defensive-rebounding/","tracking/defensive-rebounding.html","defensive-rebounding"],["/tracking/","/:Section/rebounding/","tracking/rebounding.html","rebounding"],["/tracking/","/:Section/shooting/","tracking/shooting.html","shooting"],["/tracking/","/:Section/speed/","tracking/speed.html","speed"],["/tracking/","/:Section/elbow/","tracking/elbow.html","elbow"],["/tracking/","/:Section/post/","tracking/post.html","post"],["/tracking/","/:Section/paint/","tracking/paint.html","paint"],["/playlist/","/cvp/","overlay/cvp.html","cvp"],["/playlist/","/movement/","overlay/movement.html","movement"],["/playoffs/","/:SeriesID/","playoffs/series-section-preview.html","preview"],["/playoffs/","/:SeriesID/preview/","playoffs/series-section-preview.html","preview"],["/playoffs/","/:SeriesID/summary/","playoffs/series-section-summary.html","summary"],["/playoffs/","/:SeriesID/:GameID/","playoffs/series-section-game.html","game"],["/vs/","/","vs/vsPlayerBase.html","pvp"],["/vs/","/advanced","vs/vsPlayerAdvanced.html","advanced"],["/vs/","/misc","vs/vsPlayerMisc.html","misc"],["/vs/","/scoring","vs/vsPlayerScoring.html","scoring"],["/vs/","/fourfactors","vs/vsTeamFourFactors.html","shooting"],["/vs/","/opponent","vs/vsTeamOpponent.html","shooting"],["/fantasycompare/","/","fantasycompare/fantasyComparePlayerBase.html","pvp"],["/fantasycompare/","/advanced","fantasycompare/fantasyComparePlayerAdvanced.html","advanced"],["/fantasycompare/","/misc","fantasycompare/fantasyComparePlayerMisc.html","misc"],["/fantasycompare/","/scoring","fantasycompare/fantasyComparePlayerScoring.html","scoring"],["/fantasycompare/","/fourfactors","fantasycompare/fantasyCompareTeamFourFactors.html","shooting"],["/fantasycompare/","/opponent","fantasycompare/fantasyCompareOpponent.html","shooting"],["/fantasycompare/","/usage","fantasycompare/fantasyCompareUsage.html","usage"]],sectionRoutes=routes.filter(function(r){
return r[0]===window.location.pathname});sectionRoutes.forEach(function(r){$routeProvider.when(r[1],{templateUrl:r[2]?"/templates/"+r[2]:" ",reloadOnSearch:!1,page:r[3]||""})})}])}(),function(){function GamePredictorService($q,$filter,StatsRequest,TEAMS){function parse(data){var dt=data.PredictedValues.datatable;dt.forEach(function(n){var t=$filter("filter")(TEAMS,{abbr:n.PLAYER_LAST_TEAM_ABBREVIATION})[0];n.color=t.color,n.tid=t.id});var obj={PredictedValues:data.PredictedValues.datatable,Players:{East:$filter("filter")(data.PredictedValues.datatable,{TEAM_CONFERENCE:"East"}),West:$filter("filter")(data.PredictedValues.datatable,{TEAM_CONFERENCE:"West"})}};return obj}function get(params){var deferred=$q.defer();return StatsRequest.get("allstarGamePredictor","",params).then(function(request){var data=request.sets,datasets=parse(data);deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("GamePredictorService",GamePredictorService),GamePredictorService.$inject=["$q","$filter","StatsRequest","TEAMS"]}(),stats.service("FantasyCompareService",["$q","$filter","SEASONS","StatsRequest",function($q,$filter,SEASONS,StatsRequest){"use strict";function makeDatasets(obj,datasets){var i;for(i in datasets)datasets[i].name=datasets[i].name.replace(/([A-Z]+)/g,",$1"),datasets[i].name=datasets[i].name.replace(/,/g," ");obj.datasets={OverallCompare:{},Individual:{}};for(i in datasets)obj.datasets[i]&&(obj.datasets[i]=datasets[i]);if(obj.player={a:datasets.OverallCompare.datatable[0],b:"team"==obj.compare.left.type?datasets.vsPlayerOverall.datatable[0]:datasets.OverallCompare.datatable[1]},obj.datasets.Individual&&obj.datasets.Individual.datatable.length>0)for(i in obj.datasets.Individual.datatable)obj.datasets.Individual.datatable[i].TM_TOV_PCT&&(obj.datasets.Individual.datatable[i].TM_TOV_PCT=obj.datasets.Individual.datatable[i].TM_TOV_PCT/100);if(obj.datasets.OverallCompare&&obj.datasets.OverallCompare.datatable.length>0)for(i in obj.datasets.OverallCompare.datatable)obj.datasets.OverallCompare.datatable[i].TM_TOV_PCT&&(obj.datasets.OverallCompare.datatable[i].TM_TOV_PCT=obj.datasets.OverallCompare.datatable[i].TM_TOV_PCT/100);obj.isLoading=!1}function getStats(obj){var defer=$q.defer();return obj.isLoading=!0,obj.showGraph=!0,StatsRequest.get("playerCompare","",obj.params).then(function(){var datasets=StatsRequest.getData();makeDatasets(obj,datasets),obj.isLoading=!1,defer.resolve()}),defer.promise}return{getStats:getStats}}]),stats.service("PlayerVersusService",["$q","$filter","SEASONS","StatsRequest",function($q,$filter,SEASONS,StatsRequest){"use strict";function makeDatasets(obj,datasets){var i,_compareType=obj.compare.left.type;for(i in datasets)datasets[i].name=datasets[i].name.replace(/([A-Z]+)/g,",$1"),datasets[i].name=datasets[i].name.replace(/,/g," ");"lineup"===_compareType||""===_compareType?obj.datasets={Combined:{},Individual:{},OverallCompare:{}}:obj.datasets={OnOffCourt:{},Overall:{}},"team"===_compareType&&(obj.datasets.vsPlayerOverall={}),obj.shootingsets={ShotAreaOffCourt:{},ShotAreaOnCourt:{},ShotAreaOverall:{},ShotDistanceOffCourt:{},ShotDistanceOnCourt:{},ShotDistanceOverall:{}};for(i in datasets)obj.datasets[i]&&(obj.datasets[i]=datasets[i]),obj.shootingsets[i]&&(obj.shootingsets[i]=datasets[i]);if("lineup"===_compareType||""===_compareType)obj.player={a:datasets.OverallCompare.datatable[0],b:datasets.OverallCompare.datatable[1]};else{obj.player={a:datasets.Overall.datatable[0],b:"team"==obj.compare.left.type?datasets.vsPlayerOverall.datatable[0]:datasets.Overall.datatable[1]},obj.shootingsets=datasets;for(i in obj.shootingsets)i.indexOf("Shot")<0&&delete obj.shootingsets[i];obj.shootingByDistance=[obj.shootingsets.ShotDistanceOverall,obj.shootingsets.ShotDistanceOnCourt,obj.shootingsets.ShotDistanceOffCourt],obj.shootingByArea=[obj.shootingsets.ShotAreaOverall,obj.shootingsets.ShotAreaOnCourt,obj.shootingsets.ShotAreaOffCourt]}if("team"==obj.compare.left.type){if(obj.datasets.vsPlayerOverall&&obj.datasets.vsPlayerOverall.datatable.length>0)for(i in obj.datasets.vsPlayerOverall.datatable)obj.datasets.vsPlayerOverall.datatable[i].TM_TOV_PCT&&(obj.datasets.vsPlayerOverall.datatable[i].TM_TOV_PCT=obj.datasets.vsPlayerOverall.datatable[i].TM_TOV_PCT/100)}else if("lineup"==obj.compare.left.type);else{if(obj.datasets.Overall&&obj.datasets.Overall.datatable.length>0)for(i in obj.datasets.Overall.datatable)obj.datasets.Overall.datatable[i].TM_TOV_PCT&&(obj.datasets.Overall.datatable[i].TM_TOV_PCT=obj.datasets.Overall.datatable[i].TM_TOV_PCT/100);if(obj.datasets.OnOffCourt&&obj.datasets.OnOffCourt.datatable.length>0)for(i in obj.datasets.OnOffCourt.datatable)obj.datasets.OnOffCourt.datatable[i].TM_TOV_PCT&&(obj.datasets.OnOffCourt.datatable[i].TM_TOV_PCT=obj.datasets.OnOffCourt.datatable[i].TM_TOV_PCT/100)}obj.isLoading=!1}function getStats(obj){var type,_hasPlayerLeft=obj.compare.left.hasPlayer,_hasTeamLeft=obj.compare.left.hasTeam,_hasLineupLeft=!!obj.compare.left.lineupIDs.length,defer=$q.defer();if(_hasPlayerLeft&&(type="playerVsPlayer",obj.params.PlayerID=obj.compare.left.info.PERSON_ID,obj.params.VsPlayerID=obj.compare.right.info.PERSON_ID),_hasTeamLeft&&(type="teamVsPlayer",obj.params.TeamID=obj.compare.left.info.id,obj.params.VsPlayerID=obj.compare.right.info.PERSON_ID),_hasLineupLeft){type="playersVsPlayers";var lineupIDs=[obj.params.PlayerID1,obj.params.PlayerID2,obj.params.PlayerID3,obj.params.PlayerID4,obj.params.PlayerID5],vsLineupIDs=[obj.params.VsPlayerID1,obj.params.VsPlayerID2,obj.params.VsPlayerID3,obj.params.VsPlayerID4,obj.params.VsPlayerID5];obj.compare.left.lineupChosen.forEach(function(value,index,array){lineupIDs[index]=obj.compare.left.lineupChosen[index].PLAYER_ID}),obj.compare.right.lineupChosen.forEach(function(value,index,array){vsLineupIDs[index]=obj.compare.right.lineupChosen[index].PLAYER_ID});for(var j in obj.params)for(var k=0,len2=lineupIDs.length;i<len2;i++)obj.params[lineupIDs[k]]&&(obj.params[lineupIDs[k]]=lineupIDs[k]),obj.params[vsLineupIDs[k]]&&(obj.params[VslineupIDs[k]]=vsLineupIDs[k])}return obj.isLoading=!0,obj.showGraph=!0,StatsRequest.get(type,"",obj.params).then(function(){var datasets=StatsRequest.getData();makeDatasets(obj,datasets),obj.isLoading=!1,defer.resolve()}),defer.promise}return{getStats:getStats}}]),function(){function DraftCombineAgilityService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("draftCombineAgility","",params).then(function(){var datasets=StatsRequest.getResults();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("DraftCombineAgilityService",DraftCombineAgilityService),DraftCombineAgilityService.$inject=["$q","StatsRequest"]}(),function(){function DraftCombineAnthroService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("draftCombineAnthro","",params).then(function(){var datasets=StatsRequest.getResults();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("DraftCombineAnthroService",DraftCombineAnthroService),DraftCombineAnthroService.$inject=["$q","StatsRequest"]}(),function(){function DraftCombineNonStationaryService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("draftCombineNonstationary","",params).then(function(){var datasets=StatsRequest.getResults();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("DraftCombineNonStationaryService",DraftCombineNonStationaryService),DraftCombineNonStationaryService.$inject=["$q","StatsRequest"]}(),function(){function DraftCombineSpotUpService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("draftCombineSpotup","",params).then(function(){var datasets=StatsRequest.getResults();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("DraftCombineSpotUpService",DraftCombineSpotUpService),DraftCombineSpotUpService.$inject=["$q","StatsRequest"]}(),function(){function DraftHistoryService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("draftHistory","",params).then(function(){var datasets=StatsRequest.getData();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("DraftHistoryService",DraftHistoryService),DraftHistoryService.$inject=["$q","$filter","StatsRequest"]}(),function(){function FantasyNewsService($q,$http,CMSENV){function get(TeamID){var url,deferred=$q.defer();return url=TeamID?CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/?team="+TeamID:CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/",$http({method:"GET",url:url}).success(function(response){var items=TeamID?response.TeamRotowires:response.ListItems;deferred.resolve(items)}),deferred.promise}return{get:get}}stats.service("FantasyNewsService",FantasyNewsService),FantasyNewsService.$inject=["$q","$http","CMSENV"]}(),function(){function FantasyWidgetService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("fantasyWidget","",params).then(function(response){var data=response.sets;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("FantasyWidgetService",FantasyWidgetService),FantasyWidgetService.$inject=["$q","$filter","StatsRequest"]}(),function(){function BoxscoreFanduelStatsService($filter,$q,StatsRequest,Teams){function get(params){var deferred=$q.defer();return StatsRequest.get("boxscoreFanduelStats","",params).then(function(data){deferred.resolve(data.sets)}),deferred.promise}return{get:get}}stats.service("BoxscoreFanduelStatsService",BoxscoreFanduelStatsService),BoxscoreFanduelStatsService.$inject=["$filter","$q","StatsRequest"]}(),function(){function boxscoreHustleService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreHustle","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.HustleStatsTeamBoxScore.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.HustleStatsPlayerBoxScore.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreHustleService",boxscoreHustleService),boxscoreHustleService.$inject=["$q","$filter","StatsRequest"]}(),function(){function boxscoreSummaryService($q,$filter,StatsRequest,TEAMS){function get(params){var deferred=$q.defer();return StatsRequest.get("boxscoreSummary","",params).then(function(response){var data=response.sets,boxscore=parse(data);deferred.resolve(boxscore)}),deferred.promise}var parse=function(data){var boxscore={teams:{}};if(boxscore.summary=data.GameSummary.datatable[0],boxscore.gameInfo=data.GameInfo.datatable[0],boxscore.officials=data.Officials.datatable,boxscore.seasontype=$filter("seasontype")(boxscore.summary.GAME_ID),boxscore.seasonYear=parseInt(boxscore.summary.SEASON,10),boxscore.season=$filter("seasonyear")(boxscore.seasonYear),boxscore.isFinals="Playoffs"==boxscore.seasontype&&"4"==boxscore.summary.GAME_ID.charAt(7),boxscore.av={hasVideo:1===data.AvailableVideo.datatable[0].VIDEO_AVAILABLE_FLAG,hasXYZ:data.AvailableVideo.datatable[0].PT_XYZ_AVAILABLE>=1,hasTracking:data.AvailableVideo.datatable[0].PT_AVAILABLE>=1,hasAdvancedStats:1===data.AvailableVideo.datatable[0].WH_STATUS,hasHustle:1===data.AvailableVideo.datatable[0].HUSTLE_STATUS},boxscore.teams.vtm=$filter("filter")(data.LineScore.datatable,{TEAM_ID:boxscore.summary.VISITOR_TEAM_ID})[0],boxscore.teams.htm=$filter("filter")(data.LineScore.datatable,{TEAM_ID:boxscore.summary.HOME_TEAM_ID})[0],boxscore.otherStats={vtm:$filter("filter")(data.OtherStats.datatable,{TEAM_ID:boxscore.summary.VISITOR_TEAM_ID})[0],htm:$filter("filter")(data.OtherStats.datatable,{TEAM_ID:boxscore.summary.HOME_TEAM_ID})[0]},boxscore.teamInfo={vtm:$filter("filter")(TEAMS,{id:boxscore.summary.VISITOR_TEAM_ID})[0],htm:$filter("filter")(TEAMS,{id:boxscore.summary.HOME_TEAM_ID})[0]},boxscore.teamInfo.vtm&&boxscore.teamInfo.htm)var colors=$filter("TeamColorChooser")(boxscore.teamInfo.htm,boxscore.teamInfo.vtm);return colors&&(boxscore.teamInfo.vtm.color=colors.vtm,boxscore.teamInfo.htm.color=colors.htm),boxscore.summary.broadcasterAbbr=(boxscore.summary.NATL_TV_BROADCASTER_ABBREVIATION||"lp").toLowerCase().replace(" ",""),boxscore};return{get:get}}stats.service("boxscoreSummaryService",boxscoreSummaryService),boxscoreSummaryService.$inject=["$q","$filter","StatsRequest","TEAMS"]}(),function(){function boxscoreTraditionalService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreTraditional_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.TeamStats.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.PlayerStats.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreTraditionalService",boxscoreTraditionalService),boxscoreTraditionalService.$inject=["$q","$filter","StatsRequest"]}(),function(){function BoxscoreWinProbabilityService($filter,$q,StatsRequest,Teams){function parse(data){var rs=data.Table1||data.GameInfo,boxscore=rs.datatable[0],vtm=$filter("filter")(Teams,{id:boxscore.VISITOR_TEAM_ID})[0],htm=$filter("filter")(Teams,{id:boxscore.HOME_TEAM_ID})[0],colors=$filter("TeamColorChooser")(htm,vtm);return colors&&(vtm.color=colors.vtm,htm.color=colors.htm),{boxscore:boxscore,events:data.WinProbPBP.datatable,colors:colors,teams:{htm:htm,vtm:vtm}}}function get(params){var deferred=$q.defer();return StatsRequest.get("boxscoreWinProbability","",params).then(function(data){var summary=parse(data.sets);deferred.resolve(summary)}),deferred.promise}return{get:get}}stats.service("BoxscoreWinProbabilityService",BoxscoreWinProbabilityService),BoxscoreWinProbabilityService.$inject=["$filter","$q","StatsRequest","TEAMS"]}(),function(){function boxscoreAdvancedService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreAdvanced_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.TeamStats.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.PlayerStats.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreAdvancedService",boxscoreAdvancedService),boxscoreAdvancedService.$inject=["$q","$filter","StatsRequest"]}(),stats.factory("boxscoreCommonFactory",["BOXSCORE_PERIODS",function(BOXSCORE_PERIODS){"use strict";function getPeriodsFn(end){var index=end>q4max?getOTindex(end):8;return BOXSCORE_PERIODS.slice(0,index)}function getOTindex(end){var overtime=end-q4max,OTperiods=Math.ceil(overtime/otLength);return OTperiods+9}var q4max=28800,otLength=3e3;return{getPeriods:getPeriodsFn}}]),function(){function boxscoreFourFactorsService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreFourFactors_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.sqlTeamsFourFactors.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.sqlPlayersFourFactors.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreFourFactorsService",boxscoreFourFactorsService),boxscoreFourFactorsService.$inject=["$q","$filter","StatsRequest"]}(),function(){function boxscoreMiscService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreMisc_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.sqlTeamsMisc.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.sqlPlayersMisc.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreMiscService",boxscoreMiscService),boxscoreMiscService.$inject=["$q","$filter","StatsRequest"]}(),function(){function boxscorePlayByPlayService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("boxscorePlayByPlay_2","",params).then(function(response){var data=response.sets,plays=data.PlayByPlay.datatable;deferred.resolve(plays)}),deferred.promise}return{get:get}}stats.service("boxscorePlayByPlayService",boxscorePlayByPlayService),boxscorePlayByPlayService.$inject=["$q","StatsRequest"]}(),function(){function boxscorePlayerTrackingService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscorePlayerTracker_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.PlayerTrackTeam.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.PlayerTrack.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NICKNAME}return linescores};return{get:get}}stats.service("boxscorePlayerTrackingService",boxscorePlayerTrackingService),boxscorePlayerTrackingService.$inject=["$q","$filter","StatsRequest"]}(),function(){function boxscoreScoringService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreScoring_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.sqlTeamsScoring.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.sqlPlayersScoring.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreScoringService",boxscoreScoringService),boxscoreScoringService.$inject=["$q","$filter","StatsRequest"]}(),function(){function boxscoreUsageService($q,$filter,StatsRequest){function get(params,htmid,vtmid){var deferred=$q.defer();return StatsRequest.get("boxscoreUsage_2","",params).then(function(response){var data=response.sets,linescores=parse(data,htmid,vtmid);deferred.resolve(linescores)}),deferred.promise}var parse=function(data,htmid,vtmid){var linescores={htm:{},vtm:{}};linescores.vtm.teamid=vtmid,linescores.htm.teamid=htmid;for(var i in linescores){var team=linescores[i];team.datafooter=$filter("filter")(data.sqlTeamsUsage.datatable,{TEAM_ID:team.teamid}),team.datatable=$filter("filter")(data.sqlPlayersUsage.datatable,{TEAM_ID:team.teamid}),team.title=team.datafooter[0].TEAM_CITY+" "+team.datafooter[0].TEAM_NAME}return linescores};return{get:get}}stats.service("boxscoreUsageService",boxscoreUsageService),boxscoreUsageService.$inject=["$q","$filter","StatsRequest"]}(),function(){function FranchiseHistoryService($q,$filter,StatsRequest){function parse(data){for(var i in data.FranchiseHistory.datatable){var row=data.FranchiseHistory.datatable[i],prev=data.FranchiseHistory.datatable[i-1];i?row&&prev&&row.TEAM_ID!=prev.TEAM_ID&&(row.isActive=!0):row.isActive=!0}var datasets=[{title:"Active Franchises",datatable:data.FranchiseHistory.datatable},{title:"Defunct Franchises",datatable:data.DefunctTeams.datatable}];return datasets}function get(params){var deferred=$q.defer();return StatsRequest.get("franchiseHistory","",params).then(function(){var data=StatsRequest.getData(),datasets=parse(data);deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("FranchiseHistoryService",FranchiseHistoryService),FranchiseHistoryService.$inject=["$q","$filter","StatsRequest"]}(),function(){function AssistLeadersService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("assistLeaders","",params).then(function(response){var data=response.sets.AssistLeaders.datatable;deferred.resolve(data)}),deferred.promise}return{get:get}}angular.module("stats").service("AssistLeadersService",AssistLeadersService),AssistLeadersService.$inject=["$q","$filter","StatsRequest"]}(),function(){function AssistTrackerService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("assistTracker","",params).then(function(response){var data=response.sets.AssistTracker.datatable[0];deferred.resolve(data)}),deferred.promise}return{get:get}}angular.module("stats").service("AssistTrackerService",AssistTrackerService),AssistTrackerService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueDefenseService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueDefenseLeaders","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueDefenseService",LeagueDefenseService),LeagueDefenseService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueGameLogsService($filter,$q,StatsRequest){function parse(rows){for(var i in rows){var row=rows[i];row.SEASON=$filter("seasonid")(row.GAME_ID),row.gdate=$filter("date")(row.GAME_DATE,"MM/dd/yyyy"),row.udate=new Date(row.gdate)}}function get(params){var deferred=$q.defer();return StatsRequest.get("leagueGameLog","",params).then(function(){var datasets=StatsRequest.getData();parse(datasets.LeagueGameLog.datatable),deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueGameLogsService",LeagueGameLogsService),LeagueGameLogsService.$inject=["$filter","$q","StatsRequest"]}(),function(){function HomepageLeadersService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("homepageLeaders2","",params).then(function(data){deferred.resolve(data.resultSets)}),deferred.promise}return{get:get}}stats.service("HomepageLeadersService",HomepageLeadersService),HomepageLeadersService.$inject=["$q","StatsRequest"]}(),function(){function LeagueLeadersService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueLeaders","",params).then(function(){var datasets=StatsRequest.getData();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueLeadersService",LeagueLeadersService),LeagueLeadersService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueLineupsService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueLineups","",params).then(function(){var datasets=StatsRequest.getData();deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueLineupsService",LeagueLineupsService),LeagueLineupsService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerBioService($q,$filter,StatsRequest){function parse(stats){stats.datatable.forEach(function(value){"Undrafted"===value.DRAFT_NUMBER?value.DRAFT_NUMBER_PADDED=9999:value.DRAFT_NUMBER_PADDED=parseInt(value.DRAFT_NUMBER,10)})}function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerBioStats","",params).then(function(results){var stats=results.sets.LeagueDashPlayerBioStats;parse(stats),deferred.resolve([stats])}),deferred.promise}return{get:get}}stats.service("LeaguePlayerBioService",LeaguePlayerBioService),LeaguePlayerBioService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerClutchService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerClutch","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeaguePlayerClutchService",LeaguePlayerClutchService),LeaguePlayerClutchService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerGeneralService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerStats","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeaguePlayerGeneralService",LeaguePlayerGeneralService),LeaguePlayerGeneralService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerHustleLeadersService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerHustleStatsLeaders","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeaguePlayerHustleLeadersService",LeaguePlayerHustleLeadersService),LeaguePlayerHustleLeadersService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerHustleService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerHustle","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeaguePlayerHustleService",LeaguePlayerHustleService),LeaguePlayerHustleService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerOnCourtService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerOnCourt","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeaguePlayerOnCourtService",LeaguePlayerOnCourtService),LeaguePlayerOnCourtService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeaguePlayerShootingService($q,$filter,StatsRequest){function parse(data){var tableInfo=data.headers[0],skip=tableInfo.columnsToSkip,shotgroups=tableInfo.columnNames,rows=data.rowSet,arr=[];for(var i in rows){var row=rows[i],obj={PLAYER_ID:row[0],PLAYER_NAME:row[1],TEAM_ID:row[2],TEAM_ABBREVIATION:row[3],AGE:row[4]};for(var g in shotgroups){var group=shotgroups[g],alpha=skip+3*g;obj[group+" FGM"]=row[alpha+0],obj[group+" FGA"]=row[alpha+1],obj[group+" FG PCT"]=row[alpha+2]}arr.push(obj)}return[{name:"shots",datatable:arr}]}function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerShotLocations","",params).then(function(results){var data=results.resultSets,datasets=parse(data);deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeaguePlayerShootingService",LeaguePlayerShootingService),LeaguePlayerShootingService.$inject=["$q","$filter","StatsRequest"]}(),function(){function leaguePlayerTrackingDefenseService($q,$filter,StatsRequest){function parse(sets){return sets[0].datatable.forEach(function(value){value.FREQ_WHOLE_NUM=100*value.FREQ}),sets}function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerTrackingDefense","",params).then(function(results){var datasets=parse(results.resultSets);deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("leaguePlayerTrackingDefenseService",leaguePlayerTrackingDefenseService),leaguePlayerTrackingDefenseService.$inject=["$q","$filter","StatsRequest"]}(),function(){function leaguePlayerTrackingShotsService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leaguePlayerTrackingShots","",params).then(function(results){var datasets=results.resultSets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("leaguePlayerTrackingShotsService",leaguePlayerTrackingShotsService),leaguePlayerTrackingShotsService.$inject=["$q","$filter","StatsRequest"]}(),function(){function PlaytypeStatsService($q,$filter,$http,CMSENV,SEASONS,TEAMS){function parseRow(v){var tid=v.TeamIDSID;tid&&teams[tid]&&(v.TeamName=teams[tid].city+" "+teams[tid].name),v.Percentile=v.WorsePPP/(v.WorsePPP+v.BetterPPP)*100,v.PlayerFullName=[v.PlayerFirstName,v.PlayerLastName].join(" ")}function get(p,type){var deferred=$q.defer(),url=CMSENV.prefix+"wp-json/statscms/v1/synergy/"+p.type+"/",params={limit:500,q:Math.floor(Date.now()/6e5)},options={method:"GET",url:url,cache:!0,params:angular.extend({},params,p)};return"Regular Season"==options.params.SeasonType?options.params.seasonType="Reg":"Playoffs"==options.params.SeasonType&&(options.params.seasonType="Post"),options.params.season=options.params.Season.substr(0,4),options.params.name=options.params.OD,delete options.params.PerMode,delete options.params.Season,delete options.params.SeasonType,delete options.params.OD,delete options.params.type,$http(options).then(function(response){if(response.data.results){var data=response.data.results||[];data.forEach(parseRow),deferred.resolve(data)}else deferred.resolve([])}),deferred.promise}var teams={};return TEAMS.forEach(function(n){teams[n.id]=n}),{get:get}}stats.service("PlaytypeStatsService",PlaytypeStatsService),PlaytypeStatsService.$inject=["$q","$filter","$http","CMSENV","SEASONS","TEAMS"]}(),function(){function LeagueTeamClutchService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamClutch","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueTeamClutchService",LeagueTeamClutchService),LeagueTeamClutchService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueTeamGeneralService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamStats","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueTeamGeneralService",LeagueTeamGeneralService),LeagueTeamGeneralService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueTeamHustleLeadersService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamHustleStatsLeaders","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueTeamHustleLeadersService",LeagueTeamHustleLeadersService),LeagueTeamHustleLeadersService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueTeamHustleService($q,$filter,StatsRequest){
function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamHustle","",params).then(function(results){var datasets=results.sets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueTeamHustleService",LeagueTeamHustleService),LeagueTeamHustleService.$inject=["$q","$filter","StatsRequest"]}(),function(){function LeagueTeamShootingService($q,$filter,StatsRequest){function parse(data){var tableInfo=data.headers[0],skip=tableInfo.columnsToSkip,shotgroups=tableInfo.columnNames,rows=data.rowSet,arr=[];for(var i in rows){var row=rows[i],obj={TEAM_ID:row[0],TEAM_NAME:row[1]};for(var g in shotgroups){var group=shotgroups[g],alpha=skip+3*g;obj[group+" FGM"]=row[alpha+0],obj[group+" FGA"]=row[alpha+1],obj[group+" FG PCT"]=row[alpha+2]}arr.push(obj)}return[{name:"shots",datatable:arr}]}function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamShotLocations","",params).then(function(results){var data=results.resultSets,datasets=parse(data);deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("LeagueTeamShootingService",LeagueTeamShootingService),LeagueTeamShootingService.$inject=["$q","$filter","StatsRequest"]}(),function(){function leagueTeamTrackingDefenseService($q,$filter,StatsRequest){function parse(sets){return sets[0].datatable.forEach(function(value){for(var key in value)value[key+"_WHOLE_NUM"]=parseFloat($filter("percent")(value[key],!1))}),sets}function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamTrackingDefense","",params).then(function(results){var datasets=parse(results.resultSets);deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("leagueTeamTrackingDefenseService",leagueTeamTrackingDefenseService),leagueTeamTrackingDefenseService.$inject=["$q","$filter","StatsRequest"]}(),function(){function leagueTeamTrackingShotsService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTeamTrackingShots","",params).then(function(results){var datasets=results.resultSets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("leagueTeamTrackingShotsService",leagueTeamTrackingShotsService),leagueTeamTrackingShotsService.$inject=["$q","$filter","StatsRequest"]}(),function(){function TrackingDataService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("leagueTrackingStats","",params).then(function(response){var datasets=response.resultSets;deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("TrackingDataService",TrackingDataService),TrackingDataService.$inject=["$q","StatsRequest"]}(),stats.factory("SEOFactory",["$document",function($document){var _SEOFactory={};return _SEOFactory.getTitle=function(){return $document[0].title},_SEOFactory.setTitle=function(newTitle){$document[0].title=newTitle},_SEOFactory.appendTitle=function(addition){var _addition=" - "+addition;$document[0].title+=_addition},_SEOFactory}]),stats.service("browser",["$window",function($window){return function(){var userAgent=$window.navigator.userAgent,browsers={chrome:/chrome/i,safari:/safari/i,firefox:/firefox/i,ie:/trident/i};for(var key in browsers)if(browsers[key].test(userAgent))return key;return"unknown"}}]),stats.factory("DeepLinksFactory",["$location",function($location){"use strict";var _DeepLinksFactory={};return _DeepLinksFactory.getSearchURL=function(filter){return filter?$location.search()[filter]:$location.search()},_DeepLinksFactory.setSearchURL=function(obj){var _obj=obj||{};for(var key in _obj)$location.search(key,_obj[key])},_DeepLinksFactory.resetSearchURL=function(array){for(var _array=array||Object.keys($location.search()),_len=_array.length,i=0;i<_len;i++)$location.search(_array[i],null)},_DeepLinksFactory.hasSearchURL=function(){var _length=Object.keys($location.search()).length;return _length>0},_DeepLinksFactory.getHashURL=function(){return $location.hash()},_DeepLinksFactory.setHashURL=function(string){$location.hash(string)},_DeepLinksFactory.resetHashURL=function(){$location.hash(null)},_DeepLinksFactory.getFullURL=function(){return $location.absUrl()},_DeepLinksFactory.getPath=function(){return $location.path()},_DeepLinksFactory.setPath=function(path){$location.path(path)},_DeepLinksFactory}]),function(){function SocialService($q,$http){function getLinks(url,title){var deferred=$q.defer(),bitly=bitlyUrl+"&longUrl="+url+"&callback=JSON_CALLBACK";return $http.jsonp(bitly).success(function(data){deferred.resolve(data.data)}),deferred.promise}var bitlyUrl="http://api.bitly.com/v3/shorten?format=json&apiKey=R_46b31735252665da66f63ede638288f1&login=nba450";return{getLinks:getLinks}}stats.service("SocialService",SocialService),SocialService.$inject=["$q","$http"]}(),function(){function SplitsService($filter,$location,SPLITS){function findDefault(n){if(this.initial==n.val)return this.selected=n,!0}function findWithout(n){return this.indexOf(n.val)===-1}function createRange(start,end){for(var arr=[],i=end;i>=start;i-=1)arr.push({val:i,text:i});return arr}function createSeasonRange(start,end){for(var arr=[],i=end;i>=start;i-=1)arr.push({val:$filter("seasonyear")(i),text:$filter("seasonyear")(i)});return arr}function getStringSplit(name){var s=angular.copy(SPLITS[name]);return s&&("select"==s.type&&($location.search()[name]?s.initial=$location.search()[name]:s.initial=s.default,s.selected=null,s.options.some(findDefault.bind(s))),"datepicker"==s.type&&$location.search()[name]&&(s.selected.val=$location.search()[name])),s}function getObjectSplit(obj){var s=angular.copy(SPLITS[obj.name]);return s?(obj.default&&(s.default=obj.default),obj.range&&(s.options=createRange(parseInt(obj.range[0],10),parseInt(obj.range[1],10))),obj.seasonRange&&(s.options=createSeasonRange(parseInt(obj.seasonRange[0],10),parseInt(obj.seasonRange[1],10))),obj.without&&(s.options=s.options.filter(findWithout.bind(obj.without))),obj.include&&(s.options=s.options.concat(obj.include)),obj.includeBefore&&(s.options=obj.includeBefore.concat(s.options)),obj.as&&(obj.name=obj.as,s.name=obj.name),void 0!=$location.search()[s.name]?s.initial=$location.search()[s.name]:obj.initial?s.initial=obj.initial:s.initial=s.default,"select"==s.type&&(s.selected=null,s.options.some(findDefault.bind(s))),s):obj}function processSplitRequest(array){splits={},params={};for(var i in array){var split=array[i];if("string"==typeof split)splits[split]=getStringSplit(split),params[split]=splits[split].selected.val;else if("object"==typeof split){var sobj=getObjectSplit(split);splits[sobj.name]=sobj,splits[split.name].selected&&(split.param?params[split.param]=splits[split.name].selected.val:params[split.name]=splits[split.name].selected.val)}}return{splits:splits,params:params}}var splits={},params={};return{get:function(array){return processSplitRequest(array)}}}stats.factory("SplitsService",SplitsService),SplitsService.$inject=["$filter","$location","SPLITS"]}(),function(){function Splits($filter,$location,SPLITS){function findDefault(n){if(this.initial==n.val)return this.selected=n,!0}function findWithout(n){return this.indexOf(n.val)===-1}function createRange(start,end){for(var arr=[],i=end;i>=start;i-=1)arr.push({val:i,text:i});return arr}function createSeasonRange(start,end){for(var arr=[],i=end;i>=start;i-=1)arr.push({val:$filter("seasonyear")(i),text:$filter("seasonyear")(i)});return arr}function getStringSplit(name){var s=SPLITS[name];return s&&("select"==s.type&&($location.search()[name]?s.initial=$location.search()[name]:s.initial=s.default,s.selected=null,s.options.some(findDefault.bind(s))),"datepicker"==s.type&&$location.search()[name]&&(s.selected.val=$location.search()[name])),s}function getObjectSplit(obj){var s=angular.extend({},SPLITS[obj.name]);return s?(obj.default&&(s.default=obj.default),obj.range&&(s.options=createRange(parseInt(obj.range[0],10),parseInt(obj.range[1],10))),obj.seasonRange&&(s.options=createSeasonRange(parseInt(obj.seasonRange[0],10),parseInt(obj.seasonRange[1],10))),obj.without&&(s.options=s.options.filter(findWithout.bind(obj.without))),obj.include&&(s.options=s.options.concat(obj.include)),obj.includeBefore&&(s.options=obj.includeBefore.concat(s.options)),void 0!=$location.search()[obj.name]?s.initial=$location.search()[obj.name]:obj.initial?s.initial=obj.initial:s.initial=s.default,"select"==s.type&&(s.selected=null,s.options.some(findDefault.bind(s))),s):obj}function processSplitRequest(array){for(var i in array){var split=array[i];"string"==typeof split?splits[split]=getStringSplit(split):"object"==typeof split&&(splits[split.name]=getObjectSplit(split))}return splits}var splits={};return{get:function(array){return processSplitRequest(array)}}}stats.factory("Splits",Splits),Splits.$inject=["$filter","$location","SPLITS"]}(),function(){function StatsRequest($q,$http,$rootScope,FEEDS_CONFIG){function get(endpoint,path,parameters,dontCache){var url="/stats/"+FEEDS_CONFIG[endpoint],cache=!(dontCache===!0),deferred=$q.defer();$http({url:url,method:"GET",params:parameters,cache:cache}).success(function(data,status){parseResultSets(data),base.dataCache=data,deferred.resolve(data)}).error(function(data,status){var error={url:url,status:data.status,message:["Remote server error -",url,"- Server response:",status].join(" ")};throw deferred.resolve(data),new Error(error.message)});return"undefined"!=typeof ga&&ga("send","event","stats-request",FEEDS_CONFIG[endpoint],JSON.stringify(parameters)),deferred.promise}function parseResultSets(data){!data.resultSets&&data.resultSet&&($.isArray(data.resultSet)?data.resultSets=data.resultSet:data.resultSets=[data.resultSet]),data.sets={},data.formatStatResponse=!0,data.resultSets.length?$.each(data.resultSets,dataseterize.bind(this,data)):dataseterize.bind(data.resultSets,data),data.datasets=data.sets}function dataseterize(resp,i,set){if(set){var zipTableData=function(row,i){var datarow={id:i};for(var y in set.headers){var c=set.headers[y],v=row[y];datarow[c]=v}return datarow};resp.sets[set.name]=set,set.datatable=$.map(set.rowSet,zipTableData)}}var base=this;return{get:get,getData:function(){return base.dataCache.datasets},getResults:function(){return base.dataCache.resultSets},parse:function(data){return parseResultSets(data)}}}stats.factory("StatsRequest",StatsRequest),StatsRequest.$inject=["$q","$http","$rootScope","FEEDS_CONFIG"]}(),function(){function MovementService($q,$filter,$http){function parseData(data){data.teams={},data.players={};var teamkeys=["home","visitor"];for(var i in teamkeys){var key=teamkeys[i],team=data[key],teamid=team.teamid;data.teams[teamid]=team,data.teams[teamid].type=key;for(var j in team.players){var player=team.players[j];player.name=player.firstname+" "+player.lastname,player.teamid=team.teamid,player.teamname=team.name,player.teamtype=team.type,data.players[player.playerid]=player}}return data.frames=data.moments.map(parseMoment.bind(data)),data}function parseMoment(moment,index){var i,info={period:moment[0],timestamp:moment[1],gameclock:moment[2],shotclock:moment[3],eventid:moment[4]},ps=moment[5].map(function(n,i){var obj={teamid:n[0],playerid:n[1],x:10*n[2],y:10*n[3],z:10*n[4],hide:!1};return obj}),obj={info:info,ball:ps[0],htm:ps.slice(1,6),vtm:ps.slice(6,11)};for(i in obj.vtm)obj.vtm[i].info=this.players[obj.vtm[i].playerid];for(i in obj.htm)obj.htm[i].info=this.players[obj.htm[i].playerid];return obj}function get(params){var deferred=$q.defer(),url="/stats/locations_getmoments/";return $http({method:"GET",url:url,params:params}).success(function(response,status){var data=response,movementData=parseData(data);deferred.resolve(movementData)}).error(function(response,status){console.log("error",response,status),deferred.resolve(!1)}),deferred.promise}return{get:get}}stats.service("MovementService",MovementService),MovementService.$inject=["$q","$filter","$http"]}(),function(){function PlayerAwardsService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerAwards","",params).then(function(response){var data=response.sets.PlayerAwards.datatable;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("PlayerAwardsService",PlayerAwardsService),PlayerAwardsService.$inject=["$q","StatsRequest"]}(),function(){function PlayerBioService($q,$http){function get(playerid){var deferred=$q.defer(),url="http://data.nba.com/data/5s/json/bios/player_"+playerid+".json";return $http.get(url,{cache:!0}).success(function(data){deferred.resolve(data)}),deferred.promise}return{get:get}}angular.module("stats").service("PlayerBioService",PlayerBioService),PlayerBioService.$inject=["$q","$http"]}(),function(){function PlayerCareerService($q,$filter,StatsRequest){function parse(sets){sets.SeasonTotalsRegularSeason.datatable.forEach(function(n){n.isTrade=0===n.TEAM_ID?1:0});var datasets=[{name:"Regular Season",datatable:sets.SeasonTotalsRegularSeason.datatable,datafooter:sets.CareerTotalsRegularSeason.datatable,isSchool:!1,hasData:sets.SeasonTotalsRegularSeason.datatable.length>0},{name:"Playoffs",datatable:sets.SeasonTotalsPostSeason.datatable,datafooter:sets.CareerTotalsPostSeason.datatable,isSchool:!1,hasData:sets.SeasonTotalsPostSeason.datatable.length>0},{name:"All Star",datatable:sets.SeasonTotalsAllStarSeason.datatable,datafooter:sets.CareerTotalsAllStarSeason.datatable,isSchool:!1,hasData:sets.SeasonTotalsAllStarSeason.datatable.length>0},{name:"College",datatable:sets.SeasonTotalsCollegeSeason.datatable,datafooter:sets.CareerTotalsCollegeSeason.datatable,isSchool:!0,hasData:sets.SeasonTotalsCollegeSeason.datatable.length>0},{name:"League Rankings",datatable:sets.SeasonRankingsRegularSeason.datatable}];return datasets}function get(params){var deferred=$q.defer();return StatsRequest.get("playerCareer","",params).then(function(response){var sets=response.sets,datasets=parse(sets);deferred.resolve(datasets)}),deferred.promise}return{get:get}}angular.module("stats").service("PlayerCareerService",PlayerCareerService),PlayerCareerService.$inject=["$q","$filter","StatsRequest"]}(),function(){function PlayerFantasyBarGraphService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerFantasyBarGraph","",params).then(function(response){var data=response.sets;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("PlayerFantasyBarGraphService",PlayerFantasyBarGraphService),PlayerFantasyBarGraphService.$inject=["$q","StatsRequest"]}(),function(){function PlayerFantasySplitsService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerFantasySplits","",params).then(function(){var data=StatsRequest.getResults();deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("PlayerFantasySplitsService",PlayerFantasySplitsService),PlayerFantasySplitsService.$inject=["$q","StatsRequest"]}(),function(){function PlayerGamelogService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerGameLogs","",params).then(function(response){var data=response.sets;deferred.resolve(data)}),deferred.promise}return{get:get}}angular.module("stats").service("PlayerGamelogService",PlayerGamelogService),PlayerGamelogService.$inject=["$q","$filter","StatsRequest"]}(),function(){function PlayerListService($q,$filter,StatsRequest){function parse(n){var name=n.DISPLAY_LAST_COMMA_FIRST.split(",");n.FIRST_NAME=name[1],n.LAST_NAME=name[0]}function get(params){var deferred=$q.defer();return StatsRequest.get("playerList","",params).then(function(response){var data=response.sets.CommonAllPlayers.datatable;data.forEach(parse),deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("PlayerListService",PlayerListService),PlayerListService.$inject=["$q","$filter","StatsRequest"]}(),function(){function PlayerNewsService($q,$http,CMSENV){function get(playerid){var deferred=$q.defer(),url=CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/?playerId="+playerid;return $http.get(url,{cache:!0}).success(function(response){deferred.resolve(response.PlayerRotowires||[])}).catch(function(response){deferred.resolve(null)}),deferred.promise}return{get:get}}stats.service("PlayerNewsService",PlayerNewsService),PlayerNewsService.$inject=["$q","$http","CMSENV"]}(),function(){function PlayerSummaryService($q,$filter,SEASONS,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerSummary","",params).then(function(response){var data=response.sets,player=parse(data);deferred.resolve(player)}),deferred.promise}var parse=function(data){var player={headlineStats:data.PlayerHeadlineStats.datatable[0],playerInfo:data.CommonPlayerInfo.datatable[0]};player.playerInfo.POS=player.playerInfo.POSITION.split("-").map(function(n){return n.charAt(0)}).join("-"),player.playerInfo.TO_YEAR=+player.playerInfo.TO_YEAR,player.playerInfo.FROM_YEAR=+player.playerInfo.FROM_YEAR;var dob=new Date(player.playerInfo.BIRTHDATE),today=new Date,ageDifMs=today.getTime()-dob.getTime(),ageDate=new Date(ageDifMs),lastbirthday=player.playerInfo.BIRTHDATE.replace(/^\d\d\d\d/,(new Date).getFullYear()),bday=new Date(lastbirthday);today<bday&&bday.setFullYear((new Date).getFullYear()-1);var daydiff=Math.floor(Math.abs(+bday-+today)/864e5);return player.playerInfo.AGE=Math.abs(ageDate.getUTCFullYear()-1970),player.playerInfo.AGE_DAYS=("000"+daydiff).substr(-3),player.availableStats={current:player.playerInfo.TO_YEAR>=SEASONS.site.SeasonYear&&"Y"===player.playerInfo.GAMES_PLAYED_FLAG,tracking:player.playerInfo.TO_YEAR>=2013&&player.playerInfo.FROM_YEAR<=SEASONS.playerTracking.SeasonYear&&"Y"===player.playerInfo.GAMES_PLAYED_FLAG,stats:player.playerInfo.TO_YEAR>=1996&&"Y"===player.playerInfo.GAMES_PLAYED_FLAG,video:player.playerInfo.TO_YEAR>=2013&&"Y"===player.playerInfo.GAMES_PLAYED_FLAG,gamelogs:"Y"===player.playerInfo.GAMES_PLAYED_FLAG},player};return{get:get}}stats.service("PlayerSummaryService",PlayerSummaryService),PlayerSummaryService.$inject=["$q","$filter","SEASONS","StatsRequest"]}(),function(){function PlayerTrackingDashPassesService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerTrackingPasses","",params).then(function(response){var data=response.sets,datasets=[{name:"Passes Made",datatable:data.PassesMade.datatable},{name:"Passes Received",datatable:data.PassesReceived.datatable}];deferred.resolve(datasets)}),deferred.promise}return{get:get}}stats.service("PlayerTrackingDashPassesService",PlayerTrackingDashPassesService),PlayerTrackingDashPassesService.$inject=["$q","$filter","StatsRequest"]}(),function(){function PlayerUpcomingGamesService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("playerUpcomingGames","",params).then(function(response){var data=response.sets;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("PlayerUpcomingGamesService",PlayerUpcomingGamesService),PlayerUpcomingGamesService.$inject=["$q","StatsRequest"]}(),function(){function boxscoreSeriesService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("boxscorePlayoffSeries","",params).then(function(response){var data=response.sets;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("boxscoreSeriesService",boxscoreSeriesService),boxscoreSeriesService.$inject=["$q","$filter","StatsRequest"]}(),function(){function PlayoffBracketsService($http,CMSENV){function get(season){var url=["http://data.nba.com/data/10s/v2015/json/mobile_teams/nba/",season,"/scores/00_playoff_bracket.json"].join(""),promise=$http.get(url);return promise}return{get:get}}stats.service("PlayoffBracketsService",PlayoffBracketsService),PlayoffBracketsService.$inject=["$http","CMSENV"]}(),function(){function PlayoffPictureService($q,StatsRequest,TEAMS,$filter){function parseStandings(team){var teaminfo=$filter("filter")(TEAMS,{id:team.TEAM_ID})[0];if(team.ELIMINATED_PLAYOFFS&&(team.status="o"),team.CLINCHED_PLAYOFFS&&(team.status="x"),team.CLINCHED_CONFERENCE&&!team.CLINCHED_PLAYOFFS&&(team.status=teaminfo.conference.charAt(0).toLowerCase()),team.CLINCHED_DIVISION&&!team.CLINCHED_CONFERENCE&&!team.CLINCHED_PLAYOFFS)switch(teaminfo.division){case"Northwest":team.status="nw";break;case"Pacific":team.status="p";break;case"Northeast":team.status="ne";break;case"Southeast":team.status="se";break;case"Atlantic":team.status="a";break;case"Central":team.status="c"}}function parsePlayoffPicture(series){var highteam=$filter("filter")(TEAMS,{id:series.HIGH_SEED_TEAM_ID})[0],lowteam=$filter("filter")(TEAMS,{id:series.LOW_SEED_TEAM_ID})[0];series.HIGH_SEED_TEAM_ABBR=highteam.abbr,series.LOW_SEED_TEAM_ABBR=lowteam.abbr}function get(params){var deferred=$q.defer();return StatsRequest.get("playoffPicture","",params).then(function(){var data=StatsRequest.getData();data.EastConfStandings.datatable.forEach(parseStandings),data.WestConfStandings.datatable.forEach(parseStandings),data.EastConfPlayoffPicture.datatable.forEach(parsePlayoffPicture),data.WestConfPlayoffPicture.datatable.forEach(parsePlayoffPicture),deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("PlayoffPictureService",PlayoffPictureService),PlayoffPictureService.$inject=["$q","StatsRequest","TEAMS","$filter"]}(),function(){function ScoresService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("scoreboard2","",params).then(function(){var data=StatsRequest.getData(),games=parse(data);deferred.resolve(games)}),deferred.promise}var parse=function(data){var gamestates=["","pre","live","post"],games=data.GameHeader.datatable,avail=data.Available.datatable,lastMeeting=data.LastMeeting.datatable,series=data.SeriesStandings.datatable,linescores=data.LineScore.datatable,teamLeaders=data.TeamLeaders.datatable,ticketlinks=data.TicketLinks.datatable,standings=[data.EastConfStandingsByDay,data.WestConfStandingsByDay];for(var i in games){var game=games[i],gameid=game.GAME_ID,htmid=game.HOME_TEAM_ID,vtmid=game.VISITOR_TEAM_ID;game.teamLeaders={},game.available=$filter("filter")(avail,{GAME_ID:gameid})[0],game.lastMeeting=$filter("filter")(lastMeeting,{GAME_ID:gameid})[0],game.series=$filter("filter")(series,{GAME_ID:gameid})[0],game.seasonid=$filter("seasonyear")(game.SEASON),game.ticketlinks=$filter("filter")(ticketlinks,{GAME_ID:gameid})[0],game.linescores={htm:$filter("filter")(linescores,{TEAM_ID:htmid})[0],vtm:$filter("filter")(linescores,{TEAM_ID:vtmid})[0]},game.lineScoresArray=[game.linescores.vtm,game.linescores.htm],game.teamLeaders={htm:$filter("filter")(teamLeaders,{TEAM_ID:htmid})[0],vtm:$filter("filter")(teamLeaders,{TEAM_ID:vtmid})[0]},game.gamestate=gamestates[game.GAME_STATUS_ID],game.linescores.htm.isWinner=game.linescores.htm.PTS>game.linescores.vtm.PTS,game.linescores.vtm.isWinner=!game.linescores.htm.isWinner,game.linescores.htm.TEAM_ABBREVIATION=game.linescores.htm.TEAM_ABBREVIATION.trim(),game.linescores.vtm.TEAM_ABBREVIATION=game.linescores.vtm.TEAM_ABBREVIATION.trim(),game.broadcasterAbbr=(game.NATL_TV_BROADCASTER_ABBREVIATION||"lp").toLowerCase().replace(" ","")}return{games:games,standings:standings}};return{get:get}}stats.service("ScoresService",ScoresService),ScoresService.$inject=["$q","$filter","StatsRequest"]}(),function(){function TodaysScoresService($http,SEASONS){function get(){var url=["http://data.nba.com/data/10s/v2015/json/mobile_teams/nba/",SEASONS.site.SeasonYear,"/scores/00_todays_scores.json"].join(""),promise=$http({method:"GET",url:url,cache:!1});return promise}return{get:get}}stats.service("TodaysScoresService",TodaysScoresService),TodaysScoresService.$inject=["$http","SEASONS"]}(),function(){function ShotchartService($q,$filter,StatsRequest){function parse(data){var shots=data.Shot_Chart_Detail.datatable,league=data.LeagueAverages.datatable,groupedShots=groupShotsByZone(shots),groupedLeague=groupShotsByZone(league);parseShotchartData(groupedShots,groupedLeague,"advanced"),parseShotchartData(groupedShots,groupedLeague,"basic");var shotchart={shots:shots,league:league,groupedShots:groupedShots,groupedLeague:groupedLeague};return shotchart}function parseShotchartData(shots,league,type){for(var i in shots[type]){var s=shots[type][i],l=league[type][i];s.leagueFG_PCT=l.FG_PCT,s.FG_PCT<.9*l.FG_PCT?s.leaguePerformance="below":s.FG_PCT>1.1*l.FG_PCT?s.leaguePerformance="above":s.leaguePerformance="average"}}function groupShotsByZone(shots){var data={basic:{},advanced:{}};for(var i in shots){var shot=shots[i],basic=shot.SHOT_ZONE_BASIC,advanced=shot.SHOT_ZONE_AREA+" | "+shot.SHOT_ZONE_RANGE;data.basic[basic]||(data.basic[basic]={},data.basic[basic].shots=[],data.basic[basic].FGM=0,data.basic[basic].FGA=0),data.advanced[advanced]||(data.advanced[advanced]={},data.advanced[advanced].shots=[],data.advanced[advanced].FGM=0,data.advanced[advanced].FGA=0),data.basic[basic].shots.push(shot),data.advanced[advanced].shots.push(shot),shot.SHOT_ATTEMPTED_FLAG?(data.basic[basic].FGA+=shot.SHOT_ATTEMPTED_FLAG,data.basic[basic].FGM+=shot.SHOT_MADE_FLAG,data.advanced[advanced].FGA+=shot.SHOT_ATTEMPTED_FLAG,data.advanced[advanced].FGM+=shot.SHOT_MADE_FLAG):(data.basic[basic].FGA+=shot.FGA||0,data.basic[basic].FGM+=shot.FGM||0,data.advanced[advanced].FGA+=shot.FGA||0,data.advanced[advanced].FGM+=shot.FGM||0)}for(i in data.basic)data.basic[i].FG_PCT=data.basic[i].FGM/data.basic[i].FGA;for(i in data.advanced)data.advanced[i].FG_PCT=data.advanced[i].FGM/data.advanced[i].FGA;return data}function get(params){var deferred=$q.defer(),isLineup="1"==params.islineup,endpoint=isLineup?"shotchartLineup":"shotchart";return StatsRequest.get(endpoint,"",params).then(function(){var data=StatsRequest.getData();isLineup&&(data.Shot_Chart_Detail=data.ShotChartLineupDetail,data.LeagueAverages=data.ShotChartLineupLeagueAverage);var shotchart=parse(data);deferred.resolve(shotchart)}),deferred.promise}return{get:get}}stats.service("ShotchartService",ShotchartService),ShotchartService.$inject=["$q","$filter","StatsRequest"]}(),function(){function TeamProfileService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("teamProfile","",params).then(function(response){var data=response.datasets;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("TeamProfileService",TeamProfileService),TeamProfileService.$inject=["$q","StatsRequest"]}(),function(){function TeamRecordsService($q,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("teamAllTimeRecords","",params).then(function(response){var data=response.datasets;deferred.resolve(data)}),deferred.promise}return{get:get}}stats.service("TeamRecordsService",TeamRecordsService),TeamRecordsService.$inject=["$q","StatsRequest"]}(),function(){function TeamFactory(){var allstarID=["1610616833","1610616834"],tf={};return tf.isAllstar=function(id){return id===allstarID[0]||id===allstarID[1]},tf.isNotAllstar=function(id){return id!==allstarID[0]&&id!==allstarID[1]},tf}stats.factory("TeamFactory",TeamFactory)}(),function(){function TextAnalysisFQService($q,$http){function get(){var deferred=$q.defer();return $http({method:"GET",url:"/feeds/nl/featuredquestions.json"}).then(function(response){response.data?deferred.resolve(response):deferred.reject(response)},function(response){response.results=[],response.message=response.statusText,deferred.reject(response)}),deferred.promise}return{get:get}}stats.service("TextAnalysisFQService",TextAnalysisFQService),TextAnalysisFQService.$inject=["$q","$http"]}(),function(){function TextAnalysisService($q,$filter,$http){function transform(results,obj){if(results){for(var i in results){var s=results[i];s&&s.name?obj[s.name]=s:Array.isArray(s)&&transform(s,obj)}return obj}}function parse(data){var answer=data.Answer;if(answer){if(answer.headers&&answer.rowSet){var hidden=[],rowSet=[];answer.headers.forEach(function(n,i){/\_fmtHide$/.test(n)&&hidden.push(i)}),answer.headers=answer.headers.filter(function(n,i){return hidden.indexOf(i)===-1}),answer.rowSet.forEach(function(row){row=row.filter(function(n,i){return hidden.indexOf(i)===-1}),rowSet.push(row)}),answer.rowSet=rowSet}var sets=[data.Answer,data.TextAnalysis,data.Query,data.QuestionInfo,data.ProcCall,data.SimilarQuestions];return data.sets=sets,sets}}function get(params){var deferred=$q.defer();return $http({method:"GET",url:"/stats/textanalysis/",params:params}).then(function(response){var namedSets=transform(response.data.resultSets,{});response.results=parse(namedSets),response.results&&"Sorry"!=response.results[0].headers[0]?deferred.resolve(response):(response.message="Sorry, we did not understand your question",deferred.reject(response))},function(response){response.results=[],response.message=response.statusText,deferred.reject(response)}),deferred.promise}return{get:get}}stats.service("TextAnalysisService",TextAnalysisService),TextAnalysisService.$inject=["$q","$filter","$http"]}(),function(){function VideoStatusService($q,$filter,StatsRequest){function get(params){var deferred=$q.defer();return StatsRequest.get("videoStatus","",params).then(function(response){var data=response.sets;deferred.resolve(data)}),deferred.promise}return{get:get}}angular.module("stats").service("VideoStatusService",VideoStatusService),VideoStatusService.$inject=["$q","$filter","StatsRequest"]}(),function(){function allstarAlltimeLeadersCtrl($scope,$http,$sce){$scope.isLoading=!0,$scope.trustAsHtml=$sce.trustAsHtml,$scope.leaderTemplate="/allstarLeaderTemplate.html",$http({method:"GET",url:"/js/data/allstarhistory.js"}).then(function(response){$scope.categories=response.data.categories,$scope.isLoading=!1})}stats.controller("allstarAlltimeLeadersCtrl",allstarAlltimeLeadersCtrl),allstarAlltimeLeadersCtrl.$inject=["$scope","$http","$sce"]}(),function(){function GamePredictorCtrl($scope,$filter,$http,$location,GamePredictorService){function getStats(){$scope.isLoading=!0,GamePredictorService.get(params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.hasError=!1,$scope.playerTemplate="/playerTemplate.html";var params={LeagueID:"00",Season:"2015-16",WestPlayer1:$location.search().WestPlayer1||"0",WestPlayer2:$location.search().WestPlayer2||"0",WestPlayer3:$location.search().WestPlayer3||"0",WestPlayer4:$location.search().WestPlayer4||"0",WestPlayer5:$location.search().WestPlayer5||"0",EastPlayer1:$location.search().EastPlayer1||"0",EastPlayer2:$location.search().EastPlayer2||"0",EastPlayer3:$location.search().EastPlayer3||"0",EastPlayer4:$location.search().EastPlayer4||"0",EastPlayer5:$location.search().EastPlayer5||"0"};getStats()}stats.controller("GamePredictorCtrl",GamePredictorCtrl),GamePredictorCtrl.$inject=["$scope","$filter","$http","$location","GamePredictorService"]}(),function(){function ArticlesCtrl($scope,$http,$location,$routeParams,$route,$sce,CMSENV){function getArticle(post){var feed=CMSENV.prefix+"wp-json/statscms/v1/type/stats-article/?";post.PostSlug?feed=feed+"slug="+encodeURIComponent(post.PostSlug):isNaN(post.ArticleID)||(feed=feed+"id="+post.ArticleID),$http({method:"GET",url:feed}).then(function(response){if(response.data.count>0){var post=response.data.posts[0];$scope.post=post,document.title=post.title+" - Article - NBA.com/Stats",$scope.post.date=new Date(post.date.replace(/-/g,"/")),$scope.isLoading=!1}else console.log("Error: Article not found.")})}$scope.isLoading=!0,$scope.trustAsHtml=$sce.trustAsHtml,$scope.$on("$routeChangeSuccess",function(event,routeData){getArticle(routeData.params)})}stats.controller("ArticlesCtrl",ArticlesCtrl),ArticlesCtrl.$inject=["$scope","$http","$location","$routeParams","$route","$sce","CMSENV"]}(),function(){function DraftCombineAgilityCtrl($scope,SplitsService,SEASONS,DraftCombineAgilityService){function getStats(){$scope.isLoading=!0,DraftCombineAgilityService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,
$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",as:"SeasonYear",initial:SEASONS.DraftCombineAgility.Season,seasonRange:[SEASONS.DraftCombineAgility.SeasonYearFrom,SEASONS.DraftCombineAgility.SeasonYear]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("DraftCombineAgilityCtrl",DraftCombineAgilityCtrl),DraftCombineAgilityCtrl.$inject=["$scope","SplitsService","SEASONS","DraftCombineAgilityService"]}(),function(){function DraftCombineAnthroCtrl($scope,SplitsService,SEASONS,DraftCombineAnthroService){function getStats(){$scope.isLoading=!0,DraftCombineAnthroService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=100;var config=SplitsService.get(["LeagueID",{name:"Season",as:"SeasonYear",initial:SEASONS.DraftCombineAnthro.Season,seasonRange:[SEASONS.DraftCombineAnthro.SeasonYearFrom,SEASONS.DraftCombineAnthro.SeasonYear]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("DraftCombineAnthroCtrl",DraftCombineAnthroCtrl),DraftCombineAnthroCtrl.$inject=["$scope","SplitsService","SEASONS","DraftCombineAnthroService"]}(),function(){function draftCombineNavCtrl($scope,$location,$route){$scope.$on("$routeChangeSuccess",function(event,routeData){$scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0]}),$scope.pages=[{page:"summary",path:"",text:"Summary"},{page:"spotup",path:"spotup",text:"Pop Up Shooting"},{page:"nonstationary",path:"nonstationary",text:"Non Stationary Shooting"},{page:"agility",path:"agility",text:"Strength & Agility"},{page:"anthro",path:"anthro",text:"Anthropometric Stats"},{page:"thursday",path:"scrimmages/thursday",text:"Scrimmages - Thursday"},{page:"friday",path:"scrimmages/friday",text:"Scrimmages - Friday"}],$scope.onNavChange=function(){$location.path($scope.selected.path)}}stats.controller("draftCombineNavCtrl",draftCombineNavCtrl),draftCombineNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function DraftCombineNonStationaryCtrl($scope,SplitsService,SEASONS,DraftCombineNonStationaryService){function getStats(){$scope.isLoading=!0,DraftCombineNonStationaryService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",as:"SeasonYear",initial:SEASONS.DraftCombineNonstationary.Season,seasonRange:[SEASONS.DraftCombineNonstationary.SeasonYearFrom,SEASONS.DraftCombineNonstationary.SeasonYear]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("DraftCombineNonStationaryCtrl",DraftCombineNonStationaryCtrl),DraftCombineNonStationaryCtrl.$inject=["$scope","SplitsService","SEASONS","DraftCombineNonStationaryService"]}(),function(){"use strict";function ScrimmagesFridayCtrl($scope,$http,$anchorScroll,DeepLinksFactory){function getPlayerStats(){var _currentGame=parseInt($scope.state.currentGame,10)+2,url=["/js/data/draftcombine/001160999",_currentGame,"_gamedetail.json"].join("");$http.get(url).success(function(data){setGameVars(data),setPlayerData(data),getPlayByPlays(data.g.p)})}function getPlayByPlays(max,current,obj){var _currentGame=parseInt($scope.state.currentGame,10)+2,count=current||1,pbpObj=obj||{},url=["/js/data/draftcombine/001160999",_currentGame,"_",count,"_pbp.json"].join("");$http.get(url).success(function(data){pbpObj[count]=data.g,++count<=max?getPlayByPlays(max,count,pbpObj):$scope.plays=pbpObj})}function setCurrentGameFn(game){$scope.state.currentGame=game,DeepLinksFactory.setSearchURL({game:game}),getPlayerStats()}function setCurrentTypeFn(type){$scope.state.currentType=type,DeepLinksFactory.setSearchURL({type:type}),getPlayerStats()}function setGameVars(data){$scope.game.details=data.g,$scope.game.attendance=data.g.at,$scope.game.status=data.g.stt,$scope.game.time=data.g.dur,$scope.game.officials=setOfficialsData(data.g.offs.off),$scope.game.score=setScoreData(data.g),$scope.game.team=setTeamData(data.g)}function setPlayerData(data){$scope.datasets=setDatasets(data.g)}function setOfficialsData(array){var nameArray=[];return array.forEach(function(value,index,array){var _name=[value.fn,value.ln].join(" ");nameArray.push(_name)}),nameArray.join(", ")}function setScoreData(game){var _periods="q1 q2 q3 q4 ot1 ot2 ot3 ot4 ot5 ot6 ot7 ot8 ot9 ot10".split(" "),scoreObj={};scoreObj.total={vtm:game.vls.s,htm:game.hls.s};for(var key in game.vls)_periods.indexOf(key)>-1&&(scoreObj[key]={});for(var vlsKey in game.vls)_periods.indexOf(vlsKey)>-1&&(scoreObj[vlsKey].vtm=game.vls[vlsKey]);for(var hlsKey in game.hls)_periods.indexOf(hlsKey)>-1&&(scoreObj[hlsKey].htm=game.hls[hlsKey]);return scoreObj}function setTeamData(game){return{name:{htm:game.hls.tn,vtm:game.vls.tn},abbr:{htm:game.hls.ta,vtm:game.vls.ta}}}function setDatasets(game){var playerArray=[];return game.vls.pstsg.title=game.vls.tn,game.hls.pstsg.title=game.hls.tn,game.vls.pstsg.total=game.vls.tstsg,game.hls.pstsg.total=game.hls.tstsg,playerArray.push({datatable:game.vls.pstsg}),playerArray.push({datatable:game.hls.pstsg}),playerArray}var _locationSearchObj=DeepLinksFactory.getSearchURL();DeepLinksFactory.hasSearchURL();$scope.game=$scope.game||{},$scope.state=$scope.state||{},$scope.state.currentGame=_locationSearchObj.game?_locationSearchObj.game:"1",$scope.state.currentType=_locationSearchObj.type?_locationSearchObj.type:"boxscore",$scope.setCurrentGame=setCurrentGameFn,$scope.setCurrentType=setCurrentTypeFn,$scope.setPeriod=function(p){var _hash="qtr"+p;DeepLinksFactory.setHashURL(_hash),$anchorScroll()},getPlayerStats()}stats.controller("ScrimmagesFridayCtrl",ScrimmagesFridayCtrl),ScrimmagesFridayCtrl.$inject=["$scope","$http","$anchorScroll","DeepLinksFactory"]}(),function(){"use strict";function ScrimmagesThursdayCtrl($scope,$http,$anchorScroll,DeepLinksFactory){function getPlayerStats(){var url=["/js/data/draftcombine/001160999",$scope.state.currentGame,"_gamedetail.json"].join("");$http.get(url).success(function(data){setGameVars(data),setPlayerData(data),getPlayByPlays(data.g.p)})}function getPlayByPlays(max,current,obj){var count=current||1,pbpObj=obj||{},url=["/js/data/draftcombine/001160999",$scope.state.currentGame,"_",count,"_pbp.json"].join("");$http.get(url).success(function(data){pbpObj[count]=data.g,++count<=max?getPlayByPlays(max,count,pbpObj):$scope.plays=pbpObj})}function setCurrentGameFn(game){$scope.state.currentGame=game,DeepLinksFactory.setSearchURL({game:game}),getPlayerStats()}function setCurrentTypeFn(type){$scope.state.currentType=type,DeepLinksFactory.setSearchURL({type:type}),getPlayerStats()}function setGameVars(data){$scope.game.details=data.g,$scope.game.attendance=data.g.at,$scope.game.status=data.g.stt,$scope.game.time=data.g.dur,$scope.game.officials=setOfficialsData(data.g.offs.off),$scope.game.score=setScoreData(data.g),$scope.game.team=setTeamData(data.g)}function setPlayerData(data){$scope.datasets=setDatasets(data.g)}function setOfficialsData(array){var nameArray=[];return array.forEach(function(value,index,array){var _name=[value.fn,value.ln].join(" ");nameArray.push(_name)}),nameArray.join(", ")}function setScoreData(game){var _periods="q1 q2 q3 q4 ot1 ot2 ot3 ot4 ot5 ot6 ot7 ot8 ot9 ot10".split(" "),scoreObj={};scoreObj.total={vtm:game.vls.s,htm:game.hls.s};for(var key in game.vls)_periods.indexOf(key)>-1&&(scoreObj[key]={});for(var vlsKey in game.vls)_periods.indexOf(vlsKey)>-1&&(scoreObj[vlsKey].vtm=game.vls[vlsKey]);for(var hlsKey in game.hls)_periods.indexOf(hlsKey)>-1&&(scoreObj[hlsKey].htm=game.hls[hlsKey]);return scoreObj}function setTeamData(game){return{name:{htm:game.hls.tn,vtm:game.vls.tn},abbr:{htm:game.hls.ta,vtm:game.vls.ta}}}function setDatasets(game){var playerArray=[];return game.vls.pstsg.title=game.vls.tn,game.hls.pstsg.title=game.hls.tn,game.vls.pstsg.total=game.vls.tstsg,game.hls.pstsg.total=game.hls.tstsg,playerArray.push({datatable:game.vls.pstsg}),playerArray.push({datatable:game.hls.pstsg}),playerArray}var _locationSearchObj=DeepLinksFactory.getSearchURL();DeepLinksFactory.hasSearchURL();$scope.game=$scope.game||{},$scope.state=$scope.state||{},$scope.state.currentGame=_locationSearchObj.game?_locationSearchObj.game:"1",$scope.state.currentType=_locationSearchObj.type?_locationSearchObj.type:"boxscore",$scope.setCurrentGame=setCurrentGameFn,$scope.setCurrentType=setCurrentTypeFn,$scope.setPeriod=function(p){var _hash="qtr"+p;DeepLinksFactory.setHashURL(_hash),$anchorScroll()},getPlayerStats()}stats.controller("ScrimmagesThursdayCtrl",ScrimmagesThursdayCtrl),ScrimmagesThursdayCtrl.$inject=["$scope","$http","$anchorScroll","DeepLinksFactory"]}(),function(){function DraftCombineSpotUpCtrl($scope,SplitsService,SEASONS,DraftCombineSpotUpService){function getStats(){$scope.isLoading=!0,DraftCombineSpotUpService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",as:"SeasonYear",initial:SEASONS.DraftCombineSpotUp.Season,seasonRange:[SEASONS.DraftCombineSpotUp.SeasonYearFrom,SEASONS.DraftCombineSpotUp.SeasonYear]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("DraftCombineSpotUpCtrl",DraftCombineSpotUpCtrl),DraftCombineSpotUpCtrl.$inject=["$scope","SplitsService","SEASONS","DraftCombineSpotUpService"]}(),function(){function DraftCombineSummaryCtrl($scope,$location,SplitsService,SEASONS,StatsRequest){function getStats(){$scope.isLoading=!0,StatsRequest.get("draftCombineSummary","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.combine=datasets[0].datatable,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.combine=[];var config=SplitsService.get(["LeagueID",{name:"Season",as:"SeasonYear",initial:SEASONS.DraftCombineSummary.Season,seasonRange:[SEASONS.DraftCombineSummary.SeasonYearFrom,SEASONS.DraftCombineSummary.SeasonYear]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.filterCombineData=function(category,direction){var datatable=$scope.combine.slice(0);if(datatable[0]&&"undefined"!=typeof datatable[0][category])return direction?datatable.sort(function(a,b){return null==a[category]?1:0===a[category]?1:0===b[category]?-1:a[category]<b[category]?-1:a[category]>b[category]?1:0}):datatable.sort(function(a,b){return a[category]>b[category]?-1:a[category]<b[category]?1:0}),datatable.slice(0,10)},$scope.onrunit=function(){var search={};for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&(search[i]=val),$scope.params[i]=$scope.splits[i].selected.val}$location.search(search),getStats()},getStats()}stats.controller("DraftCombineSummaryCtrl",DraftCombineSummaryCtrl),DraftCombineSummaryCtrl.$inject=["$scope","$location","SplitsService","SEASONS","StatsRequest"]}(),function(){function DraftHistoryCtrl($scope,DraftHistoryService,SplitsService,SEASONS,TEAMS){function getStats(){$scope.isLoading=!0,DraftHistoryService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=0===datasets.DraftHistory.datatable.length,$scope.noData&&"2016"==$scope.params.Season&&($scope.params.Season="2015",getStats())})}$scope.isLoading=!1,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.DraftHistory.SeasonYear,range:[SEASONS.DraftHistory.SeasonYearFrom,SEASONS.DraftHistory.SeasonYear],includeBefore:[{val:"",text:"All Time"}]},"College",{name:"TeamID",include:[{val:"1610610035",text:"Toronto Huskies"},{val:"1610610030",text:"Indianapolis Olympians"},{val:"1610610036",text:"Washington Capitols"},{val:"1610610025",text:"Chicago Stags"},{val:"1610610034",text:"St. Louis Bombers"},{val:"1610610031",text:"Pittsburgh Ironmen"},{val:"1610610029",text:"Indianapolis Jets"},{val:"1610610024",text:"Baltimore Bullets"},{val:"1610610032",text:"Providence Steamrollers"}]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.splits.TeamID.options[0].text="All Franchises",$scope.params.OverallPick="",$scope.params.RoundNum="",$scope.params.RoundPick="",$scope.params.TopX="",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),$scope.isDefunctTeam=function(teamid){var isActive=TEAMS.some(function(n){return n.id==teamid.toString()});return!isActive},getStats()}stats.controller("DraftHistoryCtrl",DraftHistoryCtrl),DraftHistoryCtrl.$inject=["$scope","DraftHistoryService","SplitsService","SEASONS","TEAMS"]}(),stats.controller("FantasyComparePlayerAdvancedCtrl",["$scope","$location","Splits","FantasyCompareService","SEASONS",function($scope,$location,Splits,FantasyCompareService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().range},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PlayerIDList","VsPlayerIDList"];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Advanced",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:"",DateTo:"",PlayerIDList:0,VsPlayerIDList:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},OFF_RATING:{visible:!1,index:1,label:"OFF RATING",format:"number",invert:!1},DEF_RATING:{visible:!1,index:2,label:"DEF RATING",format:"number",invert:!0},NET_RATING:{visible:!0,index:3,label:"NET RATING",format:"number",invert:!1},AST_PCT:{visible:!1,index:4,label:"AST %",format:"percent",invert:!1},AST_TO:{visible:!1,index:5,label:"AST TO",format:"number",invert:!1},AST_RATIO:{visible:!0,index:6,label:"AST RATIO",format:"number",invert:!1},OREB_PCT:{visible:!1,index:7,label:"OREB %",format:"percent",invert:!1},DREB_PCT:{visible:!1,index:8,label:"DREB %",format:"percent",invert:!1},REB_PCT:{visible:!0,index:9,label:"REB %",format:"percent",invert:!1},TM_TOV_PCT:{visible:!1,index:10,label:"TO RATIO",format:"percent",invert:!0},EFG_PCT:{visible:!0,index:11,label:"EFG %",format:"percent",invert:!1},TS_PCT:{visible:!1,index:12,label:"TS %",format:"percent",invert:!1},USG_PCT:{visible:!1,index:13,label:"USG %",format:"percent",invert:!1},PACE:{visible:!1,index:14,label:"PACE",format:"number",invert:!1},PIE:{visible:!0,index:15,label:"PIE",format:"percent",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}var playerIDs=$scope.compare.left.lineupIDs;playerIDs=JSON.stringify(playerIDs).replace("[","").replace("]","").replace('"',"").replace('"',"");var vsPlayerIDs=$scope.compare.right.lineupIDs;vsPlayerIDs=JSON.stringify(vsPlayerIDs).replace("[","").replace("]","").replace('"',"").replace('"',""),$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){var playerIDs=$scope.compare.left.lineupIDs;playerIDs=JSON.stringify(playerIDs).replace("[","").replace("]","").replace('"',"").replace('"',"");var vsPlayerIDs=$scope.compare.right.lineupIDs;vsPlayerIDs=JSON.stringify(vsPlayerIDs).replace("[","").replace("]","").replace('"',"").replace('"',""),$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("PlayerVsPlayerFourFactorsCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS",function($scope,$location,Splits,PlayerVersusService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames"];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Four Factors",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:"",DateTo:""},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},EFG_PCT:{visible:!0,index:1,label:"EFG %",format:"percent",invert:!1},FTA_RATE:{visible:!0,index:2,label:"FTA RT",format:"number",invert:!1},TM_TOV_PCT:{visible:!0,index:3,label:"TM TV %",format:"percent",invert:!1},OREB_PCT:{visible:!0,index:4,label:"OREB %",format:"percent",invert:!1},OPP_EFG_PCT:{visible:!0,index:5,label:"OPP EFG %",format:"percent",invert:!0},OPP_FTA_RATE:{visible:!0,index:6,label:"OPP FTA RT",format:"number",invert:!0},OPP_TOV_PCT:{visible:!0,index:7,label:"OPP FTM",format:"percent",invert:!0},OPP_OREB_PCT:{visible:!1,index:8,label:"OPP FTA",format:"percent",invert:!0}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}PlayerVersusService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){if("player"==$scope.compare.left.type)return void $location.path("/");PlayerVersusService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("FantasyCompareOpponentCtrl",["$scope","$location","Splits","FantasyCompareService","SEASONS",function($scope,$location,Splits,FantasyCompareService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames"];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Opponent",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:"",DateTo:"",PlayerIDList:0,VsPlayerIDList:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},OPP_FGM:{visible:!1,index:1,label:"OPP FGM",format:"number",invert:!0},OPP_FGA:{visible:!1,index:2,label:"OPP FGA",format:"number",invert:!0},OPP_FG_PCT:{visible:!0,index:3,label:"OPP FG%",format:"percent",invert:!0},OPP_FG3M:{visible:!1,index:4,label:"OPP 3PM",format:"number",invert:!0},OPP_FG3A:{visible:!1,index:5,label:"OPP 3PA",format:"number",invert:!0},OPP_FG3_PCT:{visible:!0,index:6,label:"OPP 3P%",format:"percent",invert:!0},OPP_FTM:{visible:!1,index:7,label:"OPP FTM",format:"number",invert:!0},OPP_FTA:{visible:!1,index:8,label:"OPP FTA",format:"number",invert:!0},OPP_FT_PCT:{visible:!0,index:9,label:"OPP FT%",format:"percent",invert:!0},OPP_OREB:{visible:!1,index:10,label:"OPP OREB",format:"number",invert:!0},OPP_DREB:{visible:!1,index:11,label:"OPP DREB",format:"number",invert:!0},OPP_REB:{visible:!0,index:12,label:"OPP REB",format:"number",invert:!0},OPP_AST:{visible:!0,index:13,label:"OPP AST",format:"number",invert:!0},OPP_TOV:{visible:!1,index:14,label:"OPP TOV",format:"number",invert:!1},OPP_STL:{visible:!0,index:15,label:"OPP STL",format:"number",invert:!0},OPP_BLK:{visible:!0,index:16,label:"OPP BLK",format:"number",invert:!0},OPP_PF:{visible:!1,index:17,label:"OPP PF",format:"number",invert:!0},OPP_PTS:{visible:!1,index:18,label:"OPP PTS",format:"number",invert:!0}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}FantasyCompareService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){var playerIDs=$scope.compare.left.lineupIDs;playerIDs=JSON.stringify(playerIDs).replace("[","").replace("]","").replace('"',"").replace('"',"");var vsPlayerIDs=$scope.compare.right.lineupIDs;vsPlayerIDs=JSON.stringify(vsPlayerIDs).replace("[","").replace("]","").replace('"',"").replace('"',""),$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("FantasyCompareBaseCtrl",["$scope","$location","Splits","FantasyCompareService","SEASONS",function($scope,$location,Splits,FantasyCompareService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().seasonRange},{name:"SeasonType",without:["Pre Season"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]}];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Base",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:"N",PaceAdjust:"N",Rank:"N",PlayerIDList:0,Outcome:"",Location:"",Month:0,SeasonSegment:"",OpponentTeamID:0,VsConference:"",VsDivision:"",Conference:"",Division:"",GameSegment:"",Period:0,LastNGames:0,DateFrom:"",DateTo:"",ShotClockRange:"",VsPlayerIDList:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},FGM:{visible:!1,index:1,label:"FGM",format:"number",invert:!1},FGA:{visible:!1,index:2,label:"FGA",format:"number",invert:!1},FG_PCT:{visible:!1,index:3,label:"FG%",format:"percent",invert:!1},FG3M:{visible:!1,index:4,label:"3PM",format:"number",invert:!1},FG3A:{visible:!1,index:5,label:"3PA",format:"number",invert:!1},FG3_PCT:{visible:!1,index:6,label:"3P%",format:"percent",invert:!1},FTM:{visible:!1,index:7,label:"FTM",format:"number",invert:!1},FTA:{visible:!1,index:8,label:"FTA",format:"number",invert:!1},FT_PCT:{visible:!1,index:9,label:"FT%",format:"percent",invert:!1},OREB:{visible:!1,index:10,label:"OREB",format:"number",invert:!1},DREB:{visible:!1,index:11,label:"DREB",format:"number",invert:!1},REB:{visible:!0,index:12,label:"REB",format:"number",invert:!1},AST:{visible:!0,index:13,label:"AST",format:"number",invert:!1},TOV:{visible:!1,index:14,label:"TOV",format:"number",invert:!0},STL:{visible:!0,index:15,label:"STL",format:"number",invert:!1},BLK:{visible:!0,index:16,label:"BLK",format:"number",invert:!1},BLKA:{visible:!0,index:17,label:"BLKA",format:"number",invert:!1},PF:{visible:!1,index:18,label:"PF",format:"number",invert:!1},PFD:{visible:!1,index:19,label:"PFD",format:"number",invert:!1},PTS:{visible:!0,index:20,label:"PTS",format:"number",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}for(var playerIDs="",vsPlayerIDs="",playerSeparator="",i=0,len=$scope.compare.left.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",playerIDs=playerIDs+$scope.compare.left.lineupIDs[i]+playerSeparator;for(var i=0,len=$scope.compare.right.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",vsPlayerIDs=vsPlayerIDs+$scope.compare.right.lineupIDs[i]+playerSeparator;FantasyCompareService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){var playerIDs=$scope.compare.left.lineupIDs;playerIDs=JSON.stringify(playerIDs).replace("[","").replace("]","").replace('"',"").replace('"',"");var vsPlayerIDs=$scope.compare.right.lineupIDs;vsPlayerIDs=JSON.stringify(vsPlayerIDs).replace("[","").replace("]","").replace('"',"").replace('"',""),$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,!angular.isUndefined($scope.compare.right.lineupIDs[0]),FantasyCompareService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0),$scope.$on("$locationChangeStart",function(){})}]),stats.controller("FantasyComparePlayerMiscCtrl",["$scope","$location","Splits","FantasyCompareService","SEASONS",function($scope,$location,Splits,FantasyCompareService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().SeasonRange},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","SeasonType","PlayerIDList","VsPlayerIDList"];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Misc",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:"",DateTo:"",PlayerIDList:0,VsPlayerIDList:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},PTS_OFF_TOV:{visible:!0,index:1,label:"PTS OFF TOV",format:"number",invert:!1},PTS_2ND_CHANCE:{visible:!0,index:2,label:"PTS 2ND CHANCE",format:"number",invert:!1},PTS_FB:{visible:!0,index:3,label:"PTS FB",format:"number",invert:!1},PTS_PAINT:{visible:!1,index:4,label:"PTS PAINT",format:"number",invert:!1},OPP_PTS_OFF_TOV:{visible:!1,index:5,label:"OPP PTS OFF TOV",format:"number",invert:!0},OPP_PTS_2ND_CHANCE:{visible:!1,index:6,label:"OPP PTS 2ND CHANCE",format:"number",invert:!0},OPP_PTS_FB:{visible:!1,index:7,label:"OPP PTS FB",format:"number",invert:!0},OPP_PTS_PAINT:{visible:!0,index:8,label:"OPP PTS PAINT",format:"number",invert:!0},BLK:{visible:!1,index:9,label:"BLK",format:"number",invert:!1},BLKA:{visible:!1,index:10,label:"BLKA",format:"number",invert:!0},PF:{visible:!1,index:11,label:"PF",format:"number",invert:!0},PFD:{visible:!1,index:12,label:"PFD",format:"number",invert:!0}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}for(var playerIDs="",vsPlayerIDs="",playerSeparator="",i=0,len=$scope.compare.left.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",playerIDs=playerIDs+$scope.compare.left.lineupIDs[i]+playerSeparator;for(var i=0,len=$scope.compare.right.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",vsPlayerIDs=vsPlayerIDs+$scope.compare.right.lineupIDs[i]+playerSeparator;$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){for(var playerIDs="",vsPlayerIDs="",playerSeparator="",i=0,len=$scope.compare.left.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",playerIDs=playerIDs+$scope.compare.left.lineupIDs[i]+playerSeparator;for(var i=0,len=$scope.compare.right.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",vsPlayerIDs=vsPlayerIDs+$scope.compare.right.lineupIDs[i]+playerSeparator;$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("FantasyComparePlayerScoringCtrl",["$scope","$location","Splits","FantasyCompareService","SEASONS",function($scope,$location,Splits,FantasyCompareService,SEASONS){
"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().range},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PlayerIDList","VsPlayerIDList"];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Scoring",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:"",DateTo:"",PlayerIDList:0,VsPlayerIDList:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},PCT_FGA_2PT:{visible:!1,index:1,label:"% FGA 2PT",format:"percent",invert:!1},PCT_FGA_3PT:{visible:!1,index:2,label:"% FGA 3PT",format:"percent",invert:!1},PCT_PTS_2PT:{visible:!1,index:3,label:"% PTS 2PT",format:"percent",invert:!1},PCT_PTS_2PT_MR:{visible:!0,index:4,label:"% PTS 2PT MR",format:"percent",invert:!1},PCT_PTS_3PT:{visible:!0,index:5,label:"% PTS 3PT",format:"percent",invert:!1},PCT_PTS_FB:{visible:!0,index:6,label:"% PTS FB",format:"percent",invert:!1},PCT_PTS_FT:{visible:!0,index:7,label:"% PTS FT",format:"percent",invert:!1},PCT_PTS_OFF_TOV:{visible:!1,index:8,label:"% PTS OFF TOV",format:"percent",invert:!1},PCT_PTS_PAINT:{visible:!0,index:9,label:"% PTS PAINT",format:"percent",invert:!1},PCT_AST_2PM:{visible:!1,index:10,label:"% AST 2PM",format:"percent",invert:!1},PCT_UAST_2PM:{visible:!1,index:11,label:"% UAST 2PM",format:"percent",invert:!1},PCT_AST_3PM:{visible:!1,index:12,label:"% AST 3PM ",format:"percent",invert:!1},PCT_UAST_3PM:{visible:!1,index:13,label:"% UAST 3PM",format:"percent",invert:!1},PCT_AST_FGM:{visible:!1,index:14,label:"% AST FGM",format:"percent",invert:!1},PCT_UAST_FGM:{visible:!1,index:15,label:"% UAST FGM",format:"percent",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}for(var playerIDs="",vsPlayerIDs="",playerSeparator="",i=0,len=$scope.compare.left.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",playerIDs=playerIDs+$scope.compare.left.lineupIDs[i]+playerSeparator;for(var i=0,len=$scope.compare.right.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",vsPlayerIDs=vsPlayerIDs+$scope.compare.right.lineupIDs[i]+playerSeparator;$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){for(var playerIDs="",vsPlayerIDs="",playerSeparator="",i=0,len=$scope.compare.left.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",playerIDs=playerIDs+$scope.compare.left.lineupIDs[i]+playerSeparator;for(var i=0,len=$scope.compare.right.lineupIDs.length;i<len;i++)playerSeparator=i!=len-1?",":"",vsPlayerIDs=vsPlayerIDs+$scope.compare.right.lineupIDs[i]+playerSeparator;$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("fantasyCompareSummaryCtrl",["$scope","$location","$routeParams","StatsRequest","$filter","TEAMS","SEASONS","Splits","$q",function($scope,$location,$routeParams,StatsRequest,$filter,TEAMS,SEASONS,Splits,$q){"use strict";function filterByTeamId(n){for(var i=0,len=teams.length;i<len;i++)if(n==teams[i].id)return teams[i]}function getAllPlayers(){StatsRequest.get("playerList","",$scope.params).then(function(){var playersAll=StatsRequest.getData().CommonAllPlayers.datatable,playersActive=$filter("filter")(playersAll,{ROSTERSTATUS:1});$scope.players=playersActive,$scope.isLoading=!1})}function getLineupInfo(side){var defer=$q.defer();return StatsRequest.get("playerSummary","",$scope.params).then(function(){$scope.params.PerMode="Totals";var datasets=StatsRequest.getData();side.info=datasets.CommonPlayerInfo.datatable[0],side.lineup=datasets.CommonPlayerInfo.datatable[0],$scope.isLoading=!1,side.team=filterByTeamId(side.info.TEAM_ID),side.type="lineup",$scope.params.PlayerID=side.info.PERSON_ID,angular.isUndefined($location.search().vsLineupIDs)&&(side.lineupShow=!0),defer.resolve(side.lineup),""==side.lineupChosenParams&&$scope.checkChange(side.info,side)}),defer.promise}function getPlayerInfo(side){var defer=$q.defer();return StatsRequest.get("playerSummary","",$scope.params).then(function(){$scope.params.PerMode="Totals";var datasets=StatsRequest.getData();side.info=datasets.CommonPlayerInfo.datatable[0],$scope.isLoading=!1,side.hasPlayer=!0,side.team=filterByTeamId(side.info.TEAM_ID),side.type="player",$scope.params.PlayerID=side.info.PERSON_ID,defer.resolve()}),defer.promise}$scope.isLoading=!0,$scope.limit=5,$scope.params={Season:SEASONS.playerVsPlayerStats.Season,LeagueID:"00",IsOnlyCurrentSeason:"0",SeasonType:"Regular Season",lineupIDs:0,vsLineupIDs:0,PlayerID:0,lineupsPassed:!1},$scope.compare={isReady:!1,left:{type:"",hasPlayer:!1,hasTeam:!1,hasLineup:!1,isLoading:!0,lineup:[],lineupChosen:[],lineupIDs:[],lineupShow:!1,lineupChosenParams:[],info:{},checked:0},right:{type:"",hasPlayer:!1,hasTeam:!1,hasLineup:!1,isLoading:!0,lineup:[],lineupShow:!1,lineupChosen:[],lineupIDs:[],lineupChosenParams:[],info:{},checked:0}},$scope.inputPlaceHolder="Enter a Player's Name...";var teams=TEAMS.slice(0);$scope.switchSides=function(){var tempObj=$scope.compare.left;$scope.compare.left=$scope.compare.right,$scope.compare.right=tempObj},$scope.setStatType=function(stat,side){side.type=stat,side.lineup=[],side.lineupChosen=[],side.lineupChosenParams=[],side.lineupIDs=[],side.checked=0,side.hasTeam=!1,side.hasLineup=!1,side.hasPlayer=!1,$scope.params.lineupsPassed=!1,$scope.compare.isReady=!1},$scope.setLineup=function(side){side.lineupShow=!1,side.hasLineup=!0,side.isReady=!0,side.type="lineup"},$scope.chooseLineup=function(team,side){side.lineup=[],getLineupInfo(team,side),side.lineupShow=!0,side.team=team},$scope.checkChange=function(item,side){side.checked++,side.lineupChosen.length<5&&(side.lineupChosen.push(item),$scope.params.lineupsPassed||side.lineupIDs.push(item.PERSON_ID))},$scope.onSelect=function($item,$model,$label,side){$scope.$item=$item,$scope.$model=$model,$scope.$label=$label,$scope.params.PlayerID=$scope.$model.PERSON_ID,"lineup"==$scope.compare.left.type?getLineupInfo(side):getPlayerInfo(side),side.lineupRoutes=[],side.info=$scope.$model,side.info.paramID=$scope.params.PlayerID,side.isReady=!0,$scope.comparePlayerInfo="",$scope.inputPlaceHolder="Enter a Player's Name..."},$scope.$watch("compare",function(){if($scope.compare.left.hasLineup&&$scope.compare.right.hasLineup){var getLineupIDs=$scope.compare.left.lineupIDs;getLineupIDs=JSON.stringify(getLineupIDs).replace("[","").replace("]","");var getVSLineupIDs=$scope.compare.right.lineupIDs;getVSLineupIDs=JSON.stringify(getVSLineupIDs).replace("[","").replace("]",""),$scope.compare.isReady=!0,$location.search({lineupIDs:getLineupIDs,vsLineupIDs:getVSLineupIDs}),$scope.search="?"+$location.url().split("?")[1]}},!0),$scope.$on("$locationChangeStart",function(){if(!angular.isUndefined($location.search().vsLineupIDs)){$scope.params.lineupsPassed=!0;var lineupIDs=[];lineupIDs=$location.search().lineupIDs,lineupIDs=lineupIDs.split(",");var vsLineupIDs=$location.search().vsLineupIDs;vsLineupIDs=vsLineupIDs.split(","),$scope.compare.left.hasLineup=!0,$scope.compare.left.type="lineup",$scope.compare.left.checked=lineupIDs.length,$scope.compare.left.linupIDs=lineupIDs,$scope.compare.left.lineupShow=!1,$scope.compare.left.lineupChosen=lineupIDs,$scope.compare.left.lineupChosenParams=lineupIDs,$scope.compare.right.type="lineup",$scope.compare.right.checked=vsLineupIDs.length,$scope.compare.right.linupIDs=vsLineupIDs,$scope.compare.right.lineupChosen=vsLineupIDs,$scope.compare.right.lineupChosenParams=vsLineupIDs,$scope.params.PlayerID=lineupIDs[0]}if(!$scope.compare.isReady){if($location.search().lineupIDs&&$location.search().vsLineupIDs)return $scope.params.lineupIDs=$location.search().lineupIDs,$scope.compare.left.lineupIDs=$location.search().lineupIDs,void getLineupInfo($scope.compare.left).then(function(){$scope.compare.right.lineupIDs=$location.search().vsLineupIDs,$scope.params.vsLineupIDs=$location.search().vsLineupIDs,getLineupInfo($scope.compare.right).then(function(){$scope.compare.isReady=!0})});if($location.search().PlayerID&&$location.search().VsPlayerID)return $scope.params.PlayerID=$location.search().PlayerID,void getPlayerInfo($scope.compare.left).then(function(){$scope.params.PlayerID=$location.search().VsPlayerID,getPlayerInfo($scope.compare.right).then(function(){$scope.compare.isReady=!0})})}}),$scope.pages=[{value:"/advanced/",text:"Advanced"},{value:"/misc/",text:"Misc"},{value:"/scoring/",text:"Scoring"},{value:"/usage/",text:"Usage"}],$scope.onNavChange=function(){var selectedLink=$("#section-links option:selected").val();$location.path(selectedLink)},getAllPlayers()}]),stats.controller("FantasyCompareUsageCtrl",["$scope","$location","Splits","FantasyCompareService","SEASONS",function($scope,$location,Splits,FantasyCompareService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().range},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PlayerIDList","VsPlayerIDList"];$scope.splits=Splits.get(splits),$scope.params={MeasureType:"Usage",LeagueID:"00",Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:"",DateTo:"",PlayerIDList:0,VsPlayerIDList:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},USG_PCT:{visible:!0,index:1,label:"USG%",format:"percent",invert:!1},PCT_FGM:{visible:!0,index:2,label:"%FGM",format:"percent",invert:!1},PCT_FGA:{visible:!0,index:3,label:"%FGA",format:"percent",invert:!1},PCT_FG3M:{visible:!0,index:4,label:"%3PM",format:"percent",invert:!1},PCT_FG3A:{visible:!0,index:5,label:"%3PA",format:"percent",invert:!1},PCT_FTM:{visible:!0,index:6,label:"%FTM",format:"percent",invert:!1},PCT_FTA:{visible:!1,index:7,label:"%FTA",format:"percent",invert:!1},PCT_OREB:{visible:!1,index:8,label:"%OREB",format:"percent",invert:!1},PCT_DREB:{visible:!1,index:9,label:"%DREB",format:"percent",invert:!1},PCT_REB:{visible:!1,index:10,label:"%REB",format:"percent",invert:!0},PCT_AST:{visible:!1,index:11,label:"%AST",format:"percent",invert:!1},PCT_TOV:{visible:!1,index:12,label:"%TOV",format:"percent",invert:!1},PCT_STL:{visible:!1,index:13,label:"%STL",format:"percent",invert:!1},PCT_BLK:{visible:!1,index:14,label:"%BLK",format:"percent",invert:!1},PCT_BLKA:{visible:!1,index:15,label:"%BLKA",format:"percent",invert:!1},PCT_PF:{visible:!1,index:15,label:"%PF",format:"percent",invert:!1},PCT_PFD:{visible:!1,index:15,label:"%PFD",format:"percent",invert:!1},PCT_PTS:{visible:!1,index:15,label:"%PTS",format:"percent",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}var playerIDs=$scope.compare.left.lineupIDs;playerIDs=JSON.stringify(playerIDs).replace("[","").replace("]","").replace('"',"").replace('"',"");var vsPlayerIDs=$scope.compare.right.lineupIDs;vsPlayerIDs=JSON.stringify(vsPlayerIDs).replace("[","").replace("]","").replace('"',"").replace('"',""),$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){var playerIDs=$scope.compare.left.lineupIDs;playerIDs=JSON.stringify(playerIDs).replace("[","").replace("]","").replace('"',"").replace('"',"");var vsPlayerIDs=$scope.compare.right.lineupIDs;vsPlayerIDs=JSON.stringify(vsPlayerIDs).replace("[","").replace("]","").replace('"',"").replace('"',""),$scope.params.PlayerIDList=playerIDs,$scope.params.VsPlayerIDList=vsPlayerIDs,FantasyCompareService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),function(){function FantasyDashboardCtrl($scope,$filter,$timeout,FantasyCompareService,FantasyNewsService,FantasyWidgetService,PlayerFantasyBarGraphService,PlayerListService,PlayerSummaryService,PlayerUpcomingGamesService,SEASONS,TEAMS){function getLeaderStats(){$scope.isLoading=!0,FantasyWidgetService.get($scope.fantasyWidgetParams).then(function(data){$scope.isLoading=!1;data.FantasyWidgetResult.datatable;$scope.leaders={all:{rows:data.FantasyWidgetResult.datatable}},$scope.leaders.fdl=getLeaderForCat("FAN_DUEL_PTS","FANTASY POINTS",!0,!1),$scope.leaders.pts=getLeaderForCat("PTS","POINTS PER GAME",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=PTS&dir=1"),$scope.leaders.reb=getLeaderForCat("REB","REBOUNDS PER GAME",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=REB&dir=1"),$scope.leaders.ast=getLeaderForCat("AST","ASSISTS PER GAME",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=AST&dir=1"),$scope.leaders.tpm=getLeaderForCat("FG3M","THREE POINTERS MADE",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=FG3M&dir=1"),$scope.leaders.ftp=getLeaderForCat("FT_PCT","FREE THROW PERCENT",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=FG_PCT&dir=1"),$scope.leaders.stl=getLeaderForCat("STL","STEALS PER GAME",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=STL&dir=1"),$scope.leaders.blk=getLeaderForCat("BLK","BLOCKS PER GAME",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=BLK&dir=1"),$scope.leaders.tov=getLeaderForCat("TOV","TURNOVERS PER GAME",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=TOV&dir=1"),$scope.leaders.fgp=getLeaderForCat("FG_PCT","FIELD GOAL PERCENT",!0,"http://stats.nba.com/league/player/#!/?Season=2016-17&SeasonType=Regular%20Season&LastNGames="+$scope.fantasyWidgetParams.LastNGames+"&sort=FG_PCT&dir=1"),$scope.firstLoad&&($scope.compare.left.id=$scope.leaders.fdl.rows[0].PLAYER_ID,$scope.compare.right.id=$scope.leaders.fdl.rows[1].PLAYER_ID,$scope.firstLoad=!1)})}function getLeaderForCat(cat,name,isDescending,link){var dt=$scope.leaders.all.rows.slice(0),isPct=cat.indexOf("_PCT")>-1;if(isPct){var attempts=cat.substr(0,2)+"A";dt=dt.filter(function(n){return n[attempts]>3})}var arr=dt.sort(sortByField.bind("",cat,isDescending)).slice(0,5),obj={stat:cat,rows:arr,name:name,leader:arr[0],isPct:isPct,link:link};return obj}function setLastNGames(n){$scope.fantasyWidgetParams.LastNGames=n,getLeaderStats()}function setStatBarWidths(){var left=$scope.comparePlayer.left,right=$scope.comparePlayer.right,cats=["PTS","REB","AST","STL"],max=0;if(left.stats&&right.stats){for(var i in cats){var cat=cats[i];max=Math.max(max,left.stats[cat],right.stats[cat])}for(var i in cats){var cat=cats[i],pct=cat+"_pct";left.stats[pct]=left.stats[cat]/max*60,right.stats[pct]=right.stats[cat]/max*60,left.stats[pct]=Math.max(2,left.stats[pct]),right.stats[pct]=Math.max(2,right.stats[pct])}}}function sortByField(field,desc,a,b){return desc?b[field]-a[field]:a[field]-b[field]}function onSearchUpdate(s){if($scope.players){if(s.length<3)return void($scope.showResults=!1);$scope.activeIndex=0;var terms=s.split(" "),players=$scope.players.slice(0);for(var i in terms){var term=terms[i];players=$filter("filter")(players,{DISPLAY_LAST_COMMA_FIRST:term},!1)}$scope.searchPlayers=players,$scope.hasResults=$scope.searchPlayers.length,$scope.showResults=!0}}function onSearchBlur(){$timeout(function(){$scope.showResults=!1,$scope.search=""},250)}function onCompareSearchBlur(player){$timeout(function(){player.search=""},250)}function onPlayerCompareChange(side){if(side&&side.id){var player=$scope.comparePlayer[side.side],params={MeasureType:"Base",LeagueID:"00",PlayerID:side.id,Season:SEASONS.playerFantasy.Season,SeasonType:SEASONS.playerFantasy.SeasonType,PerMode:"PerGame",PlusMinus:"N",PaceAdjust:"N",Rank:"N",Outcome:"",Location:"",Month:0,SeasonSegment:"",OpponentTeamID:0,VsConference:"",VsDivision:"",GameSegment:"",Period:0,LastNGames:0,DateFrom:"",DateTo:"",PORound:0,ShotClockRange:"",NumberOfGames:1};PlayerSummaryService.get(params).then(function(results){player.info=results.playerInfo,$scope.isCompareLoading=!1}),PlayerFantasyBarGraphService.get(params).then(function(results){player.stats=results.SeasonAvg.datatable[0],setStatBarWidths()}),PlayerUpcomingGamesService.get(params).then(function(results){player.nextGame=results.NextNGames.datatable[0]})}}function onSearchKeydown($event,player){switch($event.keyCode){case 13:$scope.compare[player.side].id=player.filtered[player.searchIndex].PERSON_ID,player.searchIndex=0,player.search="",$event.preventDefault();break;case 38:player.searchIndex=Math.max(0,player.searchIndex-1),$event.preventDefault();break;case 40:player.searchIndex=Math.min(player.filtered.length-1,player.searchIndex+1),$event.preventDefault()}}function onPlayerCompareSearchChange(player){if(player.searchIndex=0,!(player.search.length<3)){var terms=player.search.split(" "),players=$scope.players.slice(0);for(var i in terms){var term=terms[i];players=$filter("filter")(players,{DISPLAY_LAST_COMMA_FIRST:term},!1)}player.filtered=players}}$scope.search="",$scope.templates={comparePlayer:"/comparePlayerTemplate.html",leaderTile:"/leaderTileTemplate.html"},$scope.onSearchBlur=onSearchBlur,$scope.onCompareSearchBlur=onCompareSearchBlur,$scope.onSearchKeydown=onSearchKeydown,$scope.onPlayerCompareSearchChange=onPlayerCompareSearchChange,$scope.getLeaderForCat=getLeaderForCat,$scope.setLastNGames=setLastNGames,$scope.firstLoad=!0,$scope.compare={left:{side:"left",id:""},right:{side:"right",id:""}},$scope.compareSearch={left:{side:"left",search:""},right:{side:"right",search:""}},$scope.comparePlayer={left:{side:"left",searchIndex:0},right:{side:"right",searchIndex:0}},$scope.isCompareLoading=!0,$scope.$watch("search",onSearchUpdate,!0),$scope.$watch("compare.left",onPlayerCompareChange,!0),$scope.$watch("compare.right",onPlayerCompareChange,!0),$scope.fantasyWidgetParams={LeagueID:SEASONS.site.LeagueID,Season:SEASONS.site.Season,SeasonType:SEASONS.site.SeasonType,TodaysPlayers:"Y",TodaysOpponent:0,ActivePlayers:"Y",LastNGames:3};var playerListServiceParams={Season:SEASONS.site.Season,LeagueID:"00",IsOnlyCurrentSeason:"1"};PlayerListService.get(playerListServiceParams).then(function(players){$scope.players=players}),FantasyNewsService.get().then(function(news){$scope.news=news.slice(0,7)}),getLeaderStats()}stats.controller("FantasyDashboardCtrl",FantasyDashboardCtrl),FantasyDashboardCtrl.$inject=["$scope","$filter","$timeout","FantasyCompareService","FantasyNewsService","FantasyWidgetService","PlayerFantasyBarGraphService","PlayerListService","PlayerSummaryService","PlayerUpcomingGamesService","SEASONS","TEAMS"]}(),function(){function FantasyNewsCtrl($scope,$filter,$http,$location,CMSENV,TEAMS){function onFantasyNewsResponse(response){var data=response.data,getToday=new Date,yesterday=new Date(getToday.getTime()-864e5),getYesterday=$filter("date")(yesterday,"MM/dd/yyyy h:mm:ss a"),getData=[],dataset=TeamID?data.TeamRotowires:data.ListItems;dataset.forEach(function(item){item.ListItemPubDate<=getYesterday||getData.push({ListItemCaption:item.ListItemCaption,ListItemDescription:item.ListItemDescription,ListItemPubDate:item.ListItemPubDate,PlayerID:item.PlayerID,FirstName:item.FirstName,LastName:item.LastName})}),profileURL&&$http({method:"GET",url:profileURL}).then(function(response){var TeamName=response.data.TeamDetails[0].Details[0];$scope.TeamName=TeamName.City+" "+TeamName.Nickname}),$scope.data=getData,$scope.isLoading=!1}$scope.isLoading=!0;var TeamID=$location.search().TeamID,TeamCode=$location.search().Team,fantasyNewsURL="",profileURL="";TeamID&&TeamCode?(fantasyNewsURL=CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/?team="+TeamCode,profileURL="/feeds/teams/profile/"+TeamID+"_TeamProfile.js"):fantasyNewsURL=CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/",$http({method:"GET",url:fantasyNewsURL}).then(onFantasyNewsResponse)}stats.controller("FantasyNewsCtrl",FantasyNewsCtrl),FantasyNewsCtrl.$inject=["$scope","$filter","$http","$location","CMSENV","TEAMS"]}(),function(){function FeaturedArchiveCtrl($scope,$http,$location,$q,$sce,CMSENV){function updateItems(q){$scope.isLoading=!0,$q.all(q).then(function(response){angular.forEach(response,function(query){var posts=query.data.posts;angular.forEach(posts,function(post){$scope.items.push(post)})}),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.trustAsHtml=$sce.trustAsHtml;var limit=100,feed=CMSENV.prefix+"wp-json/statscms/v1/type/beyondthenumber/?limit="+limit;$http({method:"GET",url:feed}).then(function(response){var beyond=response.data,beyondCount=beyond.count;$scope.totalItems=beyondCount,$scope.items=beyond.posts,$scope.currentPage=0,$scope.itemsPerPage=10,$scope.numberOfPages=Math.ceil($scope.totalItems/$scope.itemsPerPage);for(var updatedFeed=feed+"&offset=",queryList=[],offset=100;offset<beyondCount;){var newPromise=$http.get(updatedFeed+offset);queryList.push(newPromise),offset+=limit}updateItems(queryList)})}stats.controller("FeaturedArchiveCtrl",FeaturedArchiveCtrl),FeaturedArchiveCtrl.$inject=["$scope","$http","$location","$q","$sce","CMSENV"]}(),function(){function controller($scope,$filter,$http,$location,$timeout,CMSENV){function getNav(){var url=CMSENV.prefix+"wp-json/statscms/v1/json?slug=2016-finals-nav";$http.get(url).success(function(data){$scope.isTabLoading=!1,$scope.games=data.posts[0].JSON_content.games;var active=$filter("filter")($scope.games,{isActive:!0}).slice(-1)[0],gn=$location.search().game||active.gn;gn>active.gn&&(gn=active.gn),$scope.activeTab=gn||active.gn,$timeout(function(){scrollToActive($scope.activeTab)})})}function setActiveTab(game){game.isDisabled||($scope.activeTab=game.gn,$location.search("game",game.gn))}function scrollToActive(tab){var scroller=document.getElementsByClassName("finals-ig--scroller")[0],tabs=document.getElementsByClassName("finals-ig__box");if("recap"==tab)var active=tabs[tabs.length-1];else var active=tabs[tab-1];scroller.scrollLeft=active.offsetLeft}$scope.isTabLoading=!0,$scope.setActiveTab=setActiveTab,$scope.encodeURI=encodeURI,getNav()}stats.controller("FinalsInfographicController",controller),controller.$inject=["$scope","$filter","$http","$location","$timeout","CMSENV"]}(),function(){function BoxscoreAdvancedCtrl($scope,$filter,boxscoreCommonFactory,boxscoreAdvancedService,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscoreAdvancedService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1,0!==$scope.datasets[0].datatable.length&&0!==$scope.datasets[1].datatable.length||($scope.noData=!0)})}var _locationSearchObj=DeepLinksFactory.getSearchURL(),_hasDeepLink=Object.keys(_locationSearchObj).length;$scope.isLoading=!0,$scope.showSplits=!!_hasDeepLink,$scope.noData=!1,$scope.hasError=!1,$scope.periods=boxscoreCommonFactory.getPeriods(),$scope.period=_locationSearchObj.ID?$scope.periods[_locationSearchObj.ID]:$scope.periods[0],$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.gametimeFormatter=function(value){return value?$filter("countdownClock")(value):value},$scope.onrunit=function(){$scope.params.RangeType=2,DeepLinksFactory.resetSearchURL(),DeepLinksFactory.setSearchURL({ID:$scope.period.id,StartRange:$scope.params.StartRange,EndRange:$scope.params.EndRange,RangeType:$scope.params.RangeType}),getStats()},$scope.$watch("period",function(period){$scope.params.StartRange=period.StartRange,$scope.params.EndRange=period.EndRange}),$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.sliderStartRange=0,$scope.sliderEndRange=$filter("decimalTime")(boxscore.summary.LIVE_PERIOD),$scope.periods=boxscoreCommonFactory.getPeriods($scope.sliderEndRange),$scope.periods[0].EndRange=$scope.sliderEndRange,$scope.sliderEndRange>28800&&($scope.periods[$scope.periods.length-1].EndRange=$scope.periods[8].EndRange=$scope.periods[0].EndRange),$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:_locationSearchObj.RangeType||0,StartPeriod:_locationSearchObj.StartPeriod||1,EndPeriod:_locationSearchObj.EndPeriod||10,StartRange:_locationSearchObj.StartRange||$scope.sliderStartRange,EndRange:_locationSearchObj.EndRange||$scope.sliderEndRange},getStats()}})}stats.controller("BoxscoreAdvancedCtrl",BoxscoreAdvancedCtrl),BoxscoreAdvancedCtrl.$inject=["$scope","$filter","boxscoreCommonFactory","boxscoreAdvancedService","DeepLinksFactory"]}(),function(){function BoxscoreFourFactorsCtrl($scope,$filter,boxscoreCommonFactory,boxscoreFourFactorsService,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscoreFourFactorsService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1,0!==$scope.datasets[0].datatable.length&&0!==$scope.datasets[1].datatable.length||($scope.noData=!0)})}var _locationSearchObj=DeepLinksFactory.getSearchURL(),_hasDeepLink=Object.keys(_locationSearchObj).length;$scope.isLoading=!0,$scope.showSplits=!!_hasDeepLink,$scope.noData=!1,$scope.hasError=!1,$scope.periods=boxscoreCommonFactory.getPeriods(),$scope.period=_locationSearchObj.ID?$scope.periods[_locationSearchObj.ID]:$scope.periods[0],$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.gametimeFormatter=function(value){return value?$filter("countdownClock")(value):value},$scope.onrunit=function(){$scope.params.RangeType=2,DeepLinksFactory.resetSearchURL(),DeepLinksFactory.setSearchURL({ID:$scope.period.id,StartRange:$scope.params.StartRange,EndRange:$scope.params.EndRange,RangeType:$scope.params.RangeType}),getStats()},$scope.$watch("period",function(period){$scope.params.StartRange=period.StartRange,$scope.params.EndRange=period.EndRange}),$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.sliderStartRange=0,$scope.sliderEndRange=$filter("decimalTime")(boxscore.summary.LIVE_PERIOD),$scope.periods=boxscoreCommonFactory.getPeriods($scope.sliderEndRange),$scope.periods[0].EndRange=$scope.sliderEndRange,$scope.sliderEndRange>28800&&($scope.periods[$scope.periods.length-1].EndRange=$scope.periods[8].EndRange=$scope.periods[0].EndRange),$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:_locationSearchObj.RangeType||0,StartPeriod:_locationSearchObj.StartPeriod||1,EndPeriod:_locationSearchObj.EndPeriod||10,StartRange:_locationSearchObj.StartRange||$scope.sliderStartRange,EndRange:_locationSearchObj.EndRange||$scope.sliderEndRange},getStats()}})}stats.controller("BoxscoreFourFactorsCtrl",BoxscoreFourFactorsCtrl),BoxscoreFourFactorsCtrl.$inject=["$scope","$filter","boxscoreCommonFactory","boxscoreFourFactorsService","DeepLinksFactory"]}(),function(){function BoxscoreGameChartsCtrl($scope,$filter,boxscoreAdvancedService,boxscoreTraditionalService,BoxscoreWinProbabilityService,BoxscoreFanduelStatsService){function getGameFlowData(){$scope.hasGameflow=!1;var params={GameID:$scope.GameID,RunType:"each second"};BoxscoreWinProbabilityService.get(params).then(function(summary){$scope.hasGameflow=!0,$scope.summary=summary,$scope.summary.otherStats=$scope.boxscore.otherStats})}function getStats(){$scope.isLoading=!0,$scope.hasLinescore=!1,boxscoreTraditionalService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.hasLinescore=!0,$scope.linescores=linescores,$scope.vtm.players=linescores.vtm.datatable,$scope.vtm.starters=$filter("filter")(linescores.vtm.datatable,filterStarter),$scope.vtm.bench=$filter("filter")(linescores.vtm.datatable,filterBench),$scope.vtm.linescore=linescores.vtm.datafooter[0],$scope.htm.players=linescores.htm.datatable,$scope.htm.starters=$filter("filter")(linescores.htm.datatable,filterStarter),$scope.htm.bench=$filter("filter")(linescores.htm.datatable,filterBench),$scope.htm.linescore=linescores.htm.datafooter[0],$scope.starterStats=parseLinescoreForTeams($scope.vtm.starters,$scope.htm.starters),$scope.benchStats=parseLinescoreForTeams($scope.vtm.bench,$scope.htm.bench),$scope.teamStats=parseLinescoreForTeams($scope.vtm.players,$scope.htm.players),$scope.playerStatsBasic={vtm:angular.extend({},$scope.boxscore.teamInfo.vtm,{players:linescores.vtm.datatable}),htm:angular.extend({},$scope.boxscore.teamInfo.htm,{players:linescores.htm.datatable})}})}function getFanduelStats(){var params={GameID:$scope.GameID};$scope.hasFanduel=!1,BoxscoreFanduelStatsService.get(params).then(function(data){var p=data.FanDuelPlayer.datatable;$scope.hasFanduel=p.length>0,$scope.vtm.fanduelPlayers=$filter("filter")(p,{TEAM_ID:$scope.vtm.id}),$scope.htm.fanduelPlayers=$filter("filter")(p,{TEAM_ID:$scope.htm.id}),$scope.vtm.fanduelLeader=$scope.vtm.fanduelPlayers.sort(sortByFanduelPoints)[0],$scope.htm.fanduelLeader=$scope.htm.fanduelPlayers.sort(sortByFanduelPoints)[0],
$scope.fanduelStats={vtm:{player:$scope.vtm.fanduelLeader,team:$scope.vtm},htm:{player:$scope.htm.fanduelLeader,team:$scope.htm}}})}function filterStarter(player){return""!==player.START_POSITION}function filterBench(player){return""===player.START_POSITION}function sortByFanduelPoints(a,b){return b.FAN_DUEL_PTS-a.FAN_DUEL_PTS}function parseLinescoreForTeams(vtm,htm){var t,team,cats="PTS REB AST STL BLK TO FGA FGM FG3A FG3M FTA FTM".split(" "),disp="PTS REB AST STL BLK TOV FG% 3P% FT%".split(" "),teams=["vtm","htm"],data={vtm:vtm,htm:htm},stats=[],obj={};for(t in teams){team=teams[t],obj[team]={};for(var i in cats){var cat=cats[i];obj[team][cat]=0;for(var j in data[team]){var row=data[team][j];obj[team][cat]+=row[cat]||0}}}for(t in teams)team=teams[t],obj[team].TOV=obj[team].TO,obj[team]["FG%"]=obj[team].FGM/obj[team].FGA*100,obj[team]["3P%"]=obj[team].FG3M/obj[team].FG3A*100,obj[team]["FT%"]=obj[team].FTM/obj[team].FTA*100;for(var d in disp){var dc=disp[d],o={label:dc};for(t in teams)team=teams[t],o[team]=obj[team][dc];stats.push(o)}return stats}$scope.noData=!1,$scope.hasFanduel=!1,$scope.hasBoxscore=!1,$scope.hasLinescore=!1,$scope.hasGameflow=!1,$scope.$watch("boxscore",function(boxscore){boxscore&&($scope.hasBoxscore=!0,$scope.GameID=boxscore.summary.GAME_ID,$scope.vtm=angular.extend({},$scope.boxscore.teamInfo.vtm),$scope.htm=angular.extend({},$scope.boxscore.teamInfo.htm),$scope.pitpStats={label:"PTS IN THE PAINT",vtm:angular.extend({},$scope.boxscore.teamInfo.vtm,{value:$scope.boxscore.otherStats.vtm.PTS_PAINT}),htm:angular.extend({},$scope.boxscore.teamInfo.htm,{value:$scope.boxscore.otherStats.htm.PTS_PAINT})},$scope.scStats={label:"SECOND CHANCE PTS",vtm:angular.extend({},$scope.boxscore.teamInfo.vtm,{value:$scope.boxscore.otherStats.vtm.PTS_2ND_CHANCE}),htm:angular.extend({},$scope.boxscore.teamInfo.htm,{value:$scope.boxscore.otherStats.htm.PTS_2ND_CHANCE})},$scope.fbStats={label:"FASTBREAK PTS",vtm:angular.extend({},$scope.boxscore.teamInfo.vtm,{value:$scope.boxscore.otherStats.vtm.PTS_FB}),htm:angular.extend({},$scope.boxscore.teamInfo.htm,{value:$scope.boxscore.otherStats.htm.PTS_FB})},$scope.params={GameID:$scope.GameID,SeasonType:$filter("seasontype")($scope.GameID),Season:$filter("seasonid")($scope.GameID),RangeType:0,StartPeriod:1,EndPeriod:10,StartRange:0,EndRange:1e4},getStats(),getGameFlowData(),getFanduelStats())})}stats.controller("BoxscoreGameChartsCtrl",BoxscoreGameChartsCtrl),BoxscoreGameChartsCtrl.$inject=["$scope","$filter","boxscoreAdvancedService","boxscoreTraditionalService","BoxscoreWinProbabilityService","BoxscoreFanduelStatsService"]}(),function(){function BoxscoreHustleStatsCtrl($scope,$filter,boxscoreHustleService){function getStats(){$scope.isLoading=!0,boxscoreHustleService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.hasError=!1,$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.params={GameID:GameID},getStats()}})}stats.controller("BoxscoreHustleStatsCtrl",BoxscoreHustleStatsCtrl),BoxscoreHustleStatsCtrl.$inject=["$scope","$filter","boxscoreHustleService"]}(),function(){function BoxscoreMiscCtrl($scope,$filter,boxscoreCommonFactory,boxscoreMiscService,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscoreMiscService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1,0!==$scope.datasets[0].datatable.length&&0!==$scope.datasets[1].datatable.length||($scope.noData=!0)})}var _locationSearchObj=DeepLinksFactory.getSearchURL(),_hasDeepLink=Object.keys(_locationSearchObj).length;$scope.isLoading=!0,$scope.showSplits=!!_hasDeepLink,$scope.noData=!1,$scope.hasError=!1,$scope.periods=boxscoreCommonFactory.getPeriods(),$scope.period=_locationSearchObj.ID?$scope.periods[_locationSearchObj.ID]:$scope.periods[0],$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.gametimeFormatter=function(value){return value?$filter("countdownClock")(value):value},$scope.onrunit=function(){$scope.params.RangeType=2,DeepLinksFactory.resetSearchURL(),DeepLinksFactory.setSearchURL({ID:$scope.period.id,StartRange:$scope.params.StartRange,EndRange:$scope.params.EndRange,RangeType:$scope.params.RangeType}),getStats()},$scope.$watch("period",function(period){$scope.params.StartRange=period.StartRange,$scope.params.EndRange=period.EndRange}),$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.sliderStartRange=0,$scope.sliderEndRange=$filter("decimalTime")(boxscore.summary.LIVE_PERIOD),$scope.periods=boxscoreCommonFactory.getPeriods($scope.sliderEndRange),$scope.periods[0].EndRange=$scope.sliderEndRange,$scope.sliderEndRange>28800&&($scope.periods[$scope.periods.length-1].EndRange=$scope.periods[8].EndRange=$scope.periods[0].EndRange),$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:_locationSearchObj.RangeType||0,StartPeriod:_locationSearchObj.StartPeriod||1,EndPeriod:_locationSearchObj.EndPeriod||10,StartRange:_locationSearchObj.StartRange||$scope.sliderStartRange,EndRange:_locationSearchObj.EndRange||$scope.sliderEndRange},getStats()}})}stats.controller("BoxscoreMiscCtrl",BoxscoreMiscCtrl),BoxscoreMiscCtrl.$inject=["$scope","$filter","boxscoreCommonFactory","boxscoreMiscService","DeepLinksFactory"]}(),function(){function BoxscoreNavCtrl($scope,$filter,$location,$route){function setSelectedPage(){$scope.pages&&($scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0])}$scope.$on("$routeChangeSuccess",function(event,routeData){setSelectedPage()}),$scope.showStats=!1,$scope.tabCount=5,$scope.pages=[{page:"boxscore",path:"",text:"Traditional Boxscore",type:"stat"},{page:"advanced",path:"advanced",text:"Advanced Stats",type:"advanced"},{page:"misc",path:"misc",text:"Misc Stats",type:"advanced"},{page:"scoring",path:"scoring",text:"Scoring Stats",type:"advanced"},{page:"usage",path:"usage",text:"Usage Stats",type:"advanced"},{page:"fourfactors",path:"fourfactors",text:"Four Factors",type:"advanced"},{page:"playbyplay",path:"playbyplay",text:"Play By Play",type:"playbyplay"},{page:"playertracking",path:"playertracking",text:"Player Tracking",type:"tracking"},{page:"gamecharts",path:"gamecharts",text:"Game Charts",type:"gamecharts"},{page:"hustle",path:"hustle",text:"Hustle Stats",type:"hustle"}],$scope.onNavChange=function(){$location.path($scope.GameID+"/"+$scope.selected.path)},$scope.$watch("availableStats",function(availableStats){availableStats&&($scope.tabCount=5,$scope.tabCount-=availableStats.playByPlay?0:1,$scope.tabCount-=availableStats.playerTracking?0:1,$scope.tabCount-=availableStats.gameCharts?0:1,$scope.tabCount-=availableStats.hustle?0:1,$scope.pages=$scope.pages.slice(0),availableStats.advancedStats||($scope.pages=$filter("filter")($scope.pages,{type:"!advanced"})),availableStats.playByPlay||($scope.pages=$filter("filter")($scope.pages,{type:"!playbyplay"})),availableStats.playerTracking||($scope.pages=$filter("filter")($scope.pages,{type:"!tracking"})),availableStats.gameCharts||($scope.pages=$filter("filter")($scope.pages,{type:"!gamecharts"})),availableStats.hustleStats||($scope.pages=$filter("filter")($scope.pages,{type:"!hustle"})),setSelectedPage())})}stats.controller("BoxscoreNavCtrl",BoxscoreNavCtrl),BoxscoreNavCtrl.$inject=["$scope","$filter","$location","$route"]}(),function(){function BoxscorePlayByPlayCtrl($scope,$filter,$anchorScroll,boxscorePlayByPlayService,$timeout,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscorePlayByPlayService.get($scope.params).then(function(plays){if($scope.plays=plays,$scope.noData=0===plays.length,$scope.noData)return void($scope.isLoading=!1);var numPeriods=plays.slice(-1)[0].PERIOD;$scope.periods=periods.slice(0,numPeriods),addToDom()})}var _hasHashURL=!!DeepLinksFactory.getHashURL(),_oldHash=_hasHashURL?DeepLinksFactory.getHashURL():null,_hasTilde=_hasHashURL?_oldHash.indexOf("~")>-1:null;if(_hasHashURL&&_hasTilde){var _newHash=_oldHash.substr(0,_oldHash.length-1);DeepLinksFactory.setHashURL(_newHash)}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.wait=20,$scope.setDeepLink=function($index){var _hash="play"+$index+"~";DeepLinksFactory.setHashURL(_hash)};var periods=[{text:"Q1",period:1},{text:"Q2",period:2},{text:"Q3",period:3},{text:"Q4",period:4},{text:"OT1",period:5},{text:"OT2",period:6},{text:"OT3",period:7},{text:"OT4",period:8},{text:"OT5",period:9},{text:"OT6",period:10},{text:"OT7",period:11},{text:"OT8",period:12},{text:"OT9",period:13},{text:"OT10",period:14}],addToDom=function(){var stopped;$scope.isLoading=!0,stopped=$timeout(function(){$scope.isLoading=!1,$scope.wait+=50,addToDom()},500),$scope.$watch("wait",function(){$scope.wait>$scope.plays.length/10&&($scope.lazyLoading=!0,$scope.isLoading=!1),$scope.wait>$scope.plays.length&&($timeout.cancel(stopped),$scope.lazyLoading=!1,_hasHashURL&&$timeout(function(){$anchorScroll()},0))})};$scope.setPeriod=function(p){var _hash="qtr"+p;DeepLinksFactory.setHashURL(_hash),$anchorScroll()},$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:2,StartPeriod:1,EndPeriod:10,StartRange:0,EndRange:55800},$scope.ai={gamedate:boxscore.gameInfo.GAME_DATE,gamename:boxscore.teams.vtm.TEAM_CITY_NAME+" "+boxscore.teams.vtm.TEAM_NICKNAME+" @ "+boxscore.teams.htm.TEAM_CITY_NAME+" "+boxscore.teams.htm.TEAM_NICKNAME},getStats()}})}stats.controller("BoxscorePlayByPlayCtrl",BoxscorePlayByPlayCtrl),BoxscorePlayByPlayCtrl.$inject=["$scope","$filter","$anchorScroll","boxscorePlayByPlayService","$timeout","DeepLinksFactory"]}(),function(){function BoxscorePlayerTrackingCtrl($scope,$filter,boxscorePlayerTrackingService){function getStats(){$scope.isLoading=!0,boxscorePlayerTrackingService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.hasError=!1,$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:2,StartPeriod:1,EndPeriod:10,StartRange:0,EndRange:55800},getStats()}})}stats.controller("BoxscorePlayerTrackingCtrl",BoxscorePlayerTrackingCtrl),BoxscorePlayerTrackingCtrl.$inject=["$scope","$filter","boxscorePlayerTrackingService"]}(),function(){function BoxscoreScoringCtrl($scope,$filter,boxscoreCommonFactory,boxscoreScoringService,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscoreScoringService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1,0!==$scope.datasets[0].datatable.length&&0!==$scope.datasets[1].datatable.length||($scope.noData=!0)})}var _locationSearchObj=DeepLinksFactory.getSearchURL(),_hasDeepLink=Object.keys(_locationSearchObj).length;$scope.isLoading=!0,$scope.showSplits=!!_hasDeepLink,$scope.noData=!1,$scope.hasError=!1,$scope.periods=boxscoreCommonFactory.getPeriods(),$scope.period=_locationSearchObj.ID?$scope.periods[_locationSearchObj.ID]:$scope.periods[0],$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.gametimeFormatter=function(value){return value?$filter("countdownClock")(value):value},$scope.onrunit=function(){$scope.params.RangeType=2,DeepLinksFactory.resetSearchURL(),DeepLinksFactory.setSearchURL({ID:$scope.period.id,StartRange:$scope.params.StartRange,EndRange:$scope.params.EndRange,RangeType:$scope.params.RangeType}),getStats()},$scope.$watch("period",function(period){$scope.params.StartRange=period.StartRange,$scope.params.EndRange=period.EndRange}),$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.sliderStartRange=0,$scope.sliderEndRange=$filter("decimalTime")(boxscore.summary.LIVE_PERIOD),$scope.periods=boxscoreCommonFactory.getPeriods($scope.sliderEndRange),$scope.periods[0].EndRange=$scope.sliderEndRange,$scope.sliderEndRange>28800&&($scope.periods[$scope.periods.length-1].EndRange=$scope.periods[8].EndRange=$scope.periods[0].EndRange),$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:_locationSearchObj.RangeType||0,StartPeriod:_locationSearchObj.StartPeriod||1,EndPeriod:_locationSearchObj.EndPeriod||10,StartRange:_locationSearchObj.StartRange||$scope.sliderStartRange,EndRange:_locationSearchObj.EndRange||$scope.sliderEndRange},getStats()}})}stats.controller("BoxscoreScoringCtrl",BoxscoreScoringCtrl),BoxscoreScoringCtrl.$inject=["$scope","$filter","boxscoreCommonFactory","boxscoreScoringService","DeepLinksFactory"]}(),function(){function GameSummaryCtrl($scope,$routeParams,boxscoreSummaryService,SEASONS,SEOFactory,StatsRequest,ScoresService){function getStats(){$scope.isLoading=!0,boxscoreSummaryService.get($scope.params).then(function(boxscore){$scope.isLoading=!1,$scope.boxscore=boxscore,$scope.summary=boxscore.summary,$scope.officials=boxscore.officials,$scope.gameInfo=boxscore.gameInfo,$scope.av=boxscore.av,$scope.teams=boxscore.teams,$scope.linescores=boxscore.teams,$scope.otherStats=boxscore.otherStats,$scope.teamInfo=boxscore.teamInfo,$scope.thisSeason=boxscore.season,$scope.seasonYear=parseInt(boxscore.season.substr(0,4),10),$scope.seasonType=boxscore.seasontype,$scope.availableStats={advancedStats:boxscore.av.hasAdvancedStats||!1,playerTracking:boxscore.av.hasTracking||!1,playByPlay:$scope.seasonYear>=SEASONS.boxscorePlayByPlay.SeasonYearFrom,gameCharts:$scope.seasonYear>=SEASONS.boxscoreCharts.SeasonYearFrom,hustle:boxscore.av.hasHustle||!1};var pageTitle=[boxscore.otherStats.vtm.TEAM_CITY," ",boxscore.otherStats.vtm.TEAM_NAME," vs ",boxscore.otherStats.htm.TEAM_CITY," ",boxscore.otherStats.htm.TEAM_NAME," - ",boxscore.gameInfo.GAME_DATE].join("");SEOFactory.appendTitle(pageTitle),getPlayoffSeriesData($scope.params),getScoreboardForDate($scope.summary.GAMECODE)})}function formatGameID(number){return("00000"+number).slice(-10)}function getPlayoffSeriesData(params){var _season=$scope.thisSeason,_series=params.GameID.substr(0,9),_isNumber="number"==typeof params.GameID,_GameID=_isNumber?params.GameID:parseInt($scope.params.GameID,10);StatsRequest.get("boxscorePlayoffSeries","",{LeagueID:"00",Season:_season,SeriesID:_series}).then(function(response){var results=response.resultSets;$scope.playoffGames={},$scope.playoffGames.current=parseInt(params.GameID.substr(-1,1)),$scope.playoffGames.total=parseInt(results[0].rowSet.length),$scope.playoffGames.nextGame=formatGameID(_GameID+1),$scope.playoffGames.prevGame=formatGameID(_GameID-1),$scope.playoffGames.isPlayoffGame=!!results[0].rowSet.length,$scope.playoffGames.isFirstGame=1===$scope.playoffGames.current,$scope.playoffGames.isLastGame=$scope.playoffGames.current===$scope.playoffGames.total})}function getScoreboardForDate(gamecode){var gc=gamecode,gdate=gc.substr(4,2)+"/"+gc.substr(6,2)+"/"+gc.substr(0,4),params={LeagueID:"00",DayOffset:"0",gameDate:gdate};ScoresService.get(params).then(function(data){data.games&&($scope.dailyScoreboard=data.games.filter(function(n){return n.GAMECODE!=gamecode}),$scope.scoreboardMax=120*($scope.dailyScoreboard.length+1),$scope.scoreboardInnerStyle={width:$scope.scoreboardMax+"px"})})}function getGameHref(game){return 3===game.GAME_STATUS_ID?"/game/#!/"+game.GAME_ID:""}function navPrev(e){e.preventDefault();var $sb=$(".stats-game-scoreboard__holder"),left=$sb.scrollLeft();$scope.scrollLeft=Math.max(0,left-130)}function navNext(e){e.preventDefault();var $sb=$(".stats-game-scoreboard__holder"),left=$sb.scrollLeft();$scope.scrollLeft=Math.min($scope.scoreboardMax,left+120),console.log($scope.scoreboardMax,$scope.scrollLeft)}$scope.isLoading=!0,$scope.getGameHref=getGameHref,$scope.navPrev=navPrev,$scope.navNext=navNext,$scope.scrollLeft=0,$scope.$on("$routeChangeSuccess",function(event,routeData){$routeParams.GameID&&$routeParams.GameID!=$scope.GameID&&($scope.GameID=$routeParams.GameID,$scope.params={GameID:$scope.GameID},getStats())})}stats.controller("GameSummaryCtrl",GameSummaryCtrl),GameSummaryCtrl.$inject=["$scope","$routeParams","boxscoreSummaryService","SEASONS","SEOFactory","StatsRequest","ScoresService"]}(),function(){function BoxscoreTraditionalCtrl($scope,$filter,boxscoreCommonFactory,boxscoreTraditionalService,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscoreTraditionalService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1,0!==$scope.datasets[0].datatable.length&&0!==$scope.datasets[1].datatable.length||($scope.noData=!0)})}var _locationSearchObj=DeepLinksFactory.getSearchURL(),_hasDeepLink=Object.keys(_locationSearchObj).length;$scope.isLoading=!0,$scope.showSplits=!!_hasDeepLink,$scope.noData=!1,$scope.hasError=!1,$scope.ai={},$scope.periods=boxscoreCommonFactory.getPeriods(),$scope.period=_locationSearchObj.ID?$scope.periods[_locationSearchObj.ID]:$scope.periods[0],$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.gametimeFormatter=function(value){return value?$filter("countdownClock")(value):value},$scope.onrunit=function(){$scope.params.RangeType=2,DeepLinksFactory.resetSearchURL(),DeepLinksFactory.setSearchURL({ID:$scope.period.id,StartRange:$scope.params.StartRange,EndRange:$scope.params.EndRange,RangeType:$scope.params.RangeType}),getStats()},$scope.$watch("period",function(period){$scope.params.StartRange=period.StartRange,$scope.params.EndRange=period.EndRange}),$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.sliderStartRange=0,$scope.sliderEndRange=$filter("decimalTime")(boxscore.summary.LIVE_PERIOD),$scope.periods=boxscoreCommonFactory.getPeriods($scope.sliderEndRange),$scope.periods[0].EndRange=$scope.sliderEndRange,$scope.sliderEndRange>28800&&($scope.periods[$scope.periods.length-1].EndRange=$scope.periods[8].EndRange=$scope.periods[0].EndRange),$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:_locationSearchObj.RangeType||0,StartPeriod:_locationSearchObj.StartPeriod||1,EndPeriod:_locationSearchObj.EndPeriod||10,StartRange:_locationSearchObj.StartRange||$scope.sliderStartRange,EndRange:_locationSearchObj.EndRange||$scope.sliderEndRange},$scope.ai={gamedate:boxscore.gameInfo.GAME_DATE,gamename:boxscore.teams.vtm.TEAM_CITY_NAME+" "+boxscore.teams.vtm.TEAM_NICKNAME+" @ "+boxscore.teams.htm.TEAM_CITY_NAME+" "+boxscore.teams.htm.TEAM_NICKNAME},getStats()}})}stats.controller("BoxscoreTraditionalCtrl",BoxscoreTraditionalCtrl),BoxscoreTraditionalCtrl.$inject=["$scope","$filter","boxscoreCommonFactory","boxscoreTraditionalService","DeepLinksFactory"]}(),function(){function BoxscoreUsageCtrl($scope,$filter,boxscoreCommonFactory,boxscoreUsageService,DeepLinksFactory){function getStats(){$scope.isLoading=!0,boxscoreUsageService.get($scope.params,$scope.boxscore.summary.HOME_TEAM_ID,$scope.boxscore.summary.VISITOR_TEAM_ID).then(function(linescores){$scope.datasets=[linescores.vtm,linescores.htm],$scope.isLoading=!1,0!==$scope.datasets[0].datatable.length&&0!==$scope.datasets[1].datatable.length||($scope.noData=!0)})}var _locationSearchObj=DeepLinksFactory.getSearchURL(),_hasDeepLink=Object.keys(_locationSearchObj).length;$scope.isLoading=!0,$scope.showSplits=!!_hasDeepLink,$scope.noData=!1,$scope.hasError=!1,$scope.periods=boxscoreCommonFactory.getPeriods(),$scope.period=_locationSearchObj.ID?$scope.periods[_locationSearchObj.ID]:$scope.periods[0],$scope.didPlay=function(row){return""===row.COMMENT},$scope.didNotPlay=function(row){return""!==row.COMMENT},$scope.gametimeFormatter=function(value){return value?$filter("countdownClock")(value):value},$scope.onrunit=function(){$scope.params.RangeType=2,DeepLinksFactory.resetSearchURL(),DeepLinksFactory.setSearchURL({ID:$scope.period.id,StartRange:$scope.params.StartRange,EndRange:$scope.params.EndRange,RangeType:$scope.params.RangeType}),getStats()},$scope.$watch("period",function(period){$scope.params.StartRange=period.StartRange,$scope.params.EndRange=period.EndRange}),$scope.$watch("boxscore",function(boxscore){if(boxscore){var GameID=boxscore.summary.GAME_ID;$scope.sliderStartRange=0,$scope.sliderEndRange=$filter("decimalTime")(boxscore.summary.LIVE_PERIOD),$scope.periods=boxscoreCommonFactory.getPeriods($scope.sliderEndRange),$scope.periods[0].EndRange=$scope.sliderEndRange,$scope.sliderEndRange>28800&&($scope.periods[$scope.periods.length-1].EndRange=$scope.periods[8].EndRange=$scope.periods[0].EndRange),$scope.params={GameID:GameID,SeasonType:$filter("seasontype")(GameID),Season:$filter("seasonid")(GameID),RangeType:_locationSearchObj.RangeType||0,StartPeriod:_locationSearchObj.StartPeriod||1,EndPeriod:_locationSearchObj.EndPeriod||10,StartRange:_locationSearchObj.StartRange||$scope.sliderStartRange,EndRange:_locationSearchObj.EndRange||$scope.sliderEndRange},getStats()}})}stats.controller("BoxscoreUsageCtrl",BoxscoreUsageCtrl),BoxscoreUsageCtrl.$inject=["$scope","$filter","boxscoreCommonFactory","boxscoreUsageService","DeepLinksFactory"]}(),function(){function GlossaryCtrl($scope,$http,CMSENV){$scope.isLoading=!0;var groupCategories=function(data){var obj={};for(var i in data){var glossaryObject=data[i],cat=glossaryObject.meta["glossary-category"];obj[cat]||(obj[cat]=[]),obj[cat].unshift(glossaryObject)}return obj};$http({method:"GET",url:CMSENV.prefix+"wp-json/statscms/v1/type/glossary?limit=100"}).then(function(response){$scope.isLoading=!1;var data=response.data.posts;$scope.categories=groupCategories(data)})}stats.controller("GlossaryCtrl",GlossaryCtrl),GlossaryCtrl.$inject=["$scope","$http","CMSENV"]}(),function(){function VideoStatusCtrl($scope,$location,VideoStatusService){function getStats(){$scope.isLoading=!0,VideoStatusService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.hasGames=!!$scope.datasets.VideoStatus.datatable.length})}$scope.isLoading=!0,$scope.hasGames=!1,$scope.params={LeagueID:"00",gameDate:""},$scope.$watch(function(){return $location.path()},function(){$location.path().slice(1)&&($scope.params.gameDate=$location.path().slice(1),getStats())})}stats.controller("VideoStatusCtrl",VideoStatusCtrl),VideoStatusCtrl.$inject=["$scope","$location","VideoStatusService"]}(),function(){function HelpWhatsNewCtrl($scope,$http,$sce,CMSENV){$scope.isLoading=!0,$scope.renderHtml=function(data){return $sce.trustAsHtml(data)},$http({method:"GET",url:CMSENV.prefix+"wp-json/statscms/v1/type/whatsnew?limit=20"}).then(function(response){$scope.isLoading=!1,$scope.data=response.data.posts})}stats.controller("HelpWhatsNewCtrl",HelpWhatsNewCtrl),HelpWhatsNewCtrl.$inject=["$scope","$http","$sce","CMSENV"]}(),function(){function FranchiseHistoryCtrl($scope,FranchiseHistoryService){function getStats(){$scope.isLoading=!0,FranchiseHistoryService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets})}$scope.isLoading=!0,$scope.rowsPerPage=1e3,$scope.params={LeagueID:"00"},$scope.datasets={},getStats()}stats.controller("FranchiseHistoryCtrl",FranchiseHistoryCtrl),FranchiseHistoryCtrl.$inject=["$scope","FranchiseHistoryService"]}(),function(){function HomepageBeyondTheNumbersCtrl($scope,$http,$sce){$scope.isLoading=!0,$http({method:"GET",url:"/feeds/StatsBeyondTheNumbersV2-594371/json.js"}).then(function(response){var slides=response.data.ListItems;$scope.trustAsHtml=$sce.trustAsHtml,$scope.slides=slides.slice(0,5),$scope.isLoading=!1})}stats.controller("HomepageBeyondTheNumbersCtrl",HomepageBeyondTheNumbersCtrl),HomepageBeyondTheNumbersCtrl.$inject=["$scope","$http","$sce"]}(),function(){function HomepageBoxScoresCtrl($scope,$filter,$http){var today=new Date;$scope.month=$filter("date")(today,"M"),$scope.day=$filter("date")(today,"d"),$scope.year=$filter("date")(today,"yyyy"),$scope.submit=function(){var url="/scores/#!/"+$scope.month+"/"+$scope.day+"/"+$scope.year;location.href=url}}stats.controller("HomepageBoxScoresCtrl",HomepageBoxScoresCtrl),HomepageBoxScoresCtrl.$inject=["$scope","$filter","$http"]}(),function(){function HomepageAssistTrackerCtrl($scope,$http,SEASONS,AssistTrackerService){var trackerParams={LeagueID:"00",PerMode:"Totals",Season:SEASONS.site.Season,SeasonType:SEASONS.site.SeasonType};AssistTrackerService.get(trackerParams).then(function(data){$scope.totalAssists=data.ASSISTS})}angular.module("stats").controller("HomepageAssistTrackerCtrl",HomepageAssistTrackerCtrl),HomepageAssistTrackerCtrl.$inject=["$scope","$http","SEASONS","AssistTrackerService"]}(),function(){function HomepageLeadersCtrl($scope,$location,SEASONS,HomepageLeadersService){function getStats(){$scope.isLoading=!0,$scope.noData=!1,$scope.showMoreStats=!1,HomepageLeadersService.get($scope.params).then(function(datasets){$scope.isLoading=!1,datasets[0]&&datasets[0].datatable&&0!==datasets[0].datatable.length||($scope.noData=!0),$scope.datasets=datasets})}function setPlayerOrTeam(pt){$scope.params.PlayerOrTeam=pt,$location.search("PlayerOrTeam",pt),getStats()}function setStatType(stattype){$scope.params.StatType=stattype,$location.search("StatType",stattype),getStats()}function setSeasonType(seasontype){$scope.params.SeasonType=seasontype,$location.search("SeasonType",seasontype),getStats()}function setGameScope(gamescope){$scope.params.GameScope=gamescope,$location.search("GameScope",gamescope),getStats()}function statsHomepagePanelDidChangeFn(event,num){var index=$scope.currentIndex,TOTAL=8;$scope.currentIndex=((index+num)%TOTAL+TOTAL)%TOTAL}$scope.currentIndex=0,$scope.showMoreStats=!1,$scope.noData=!1,$scope.setPlayerOrTeam=setPlayerOrTeam,$scope.setStatType=setStatType,$scope.setSeasonType=setSeasonType,$scope.setGameScope=setGameScope,$scope.params={LeagueID:"00",PlayerScope:"All Players",Season:$location.search().Season||SEASONS.homepageLeaders.Season,SeasonType:$location.search().SeasonType||SEASONS.homepageLeaders.SeasonType,GameScope:$location.search().GameScope||SEASONS.homepageLeaders.GameScope,PlayerOrTeam:$location.search().PlayerOrTeam||"Player",StatType:$location.search().StatType||"Traditional"},getStats(),$scope.$on("statsHomepagePanelDidChange",statsHomepagePanelDidChangeFn)}stats.controller("HomepageLeadersCtrl",HomepageLeadersCtrl),HomepageLeadersCtrl.$inject=["$scope","$location","SEASONS","HomepageLeadersService"]}(),function(){function HomepageCtrl($scope,$http,$sce,CMSENV){$scope.isLoading=!0,$http({method:"GET",url:CMSENV.prefix+"wp-json/statscms/v1/homepage"}).then(function(response){$scope.isLoading=!1;var feed=response.data;$scope.trustAsHtml=$sce.trustAsHtml,$scope.assistleader=feed.assistleader[0]||null,$scope.slides=feed.beyondthenumber,$scope.boxscores=feed.boxscore,$scope.headlines=feed.headline,$scope.shotcharts=feed.shotchart.slice(0,3),$scope.thisdayinhistory=feed.thisdayinhistory,$scope.breakingnews=feed.breakingnews,$scope.fantasynews=feed.fantasynews})}stats.controller("HomepageCtrl",HomepageCtrl),HomepageCtrl.$inject=["$scope","$http","$sce","CMSENV"]}(),function(){function HomepagePlayerListCtrl($scope,$timeout,SEASONS,StatsRequest,$window){$scope.isLoading=!0,$scope.currentFilter="a",$scope.currentFilterString="",$scope.rosterStatus="Active",$scope.players=[];var params={Season:"2015-16",LeagueID:"00",IsOnlyCurrentSeason:"0"},players=[],rosterPlayers=[],mobilePlayers={},filterByLastName=function(n){return!0},filterByString=function(n){return n.DISPLAY_LAST_COMMA_FIRST.charAt(0).toLowerCase()==$scope.currentFilterString},isVisible=function(e){var h=$(window).height()+10,top=$(window).scrollTop()-10,y=$(e).offset().top;return y>top&&y<top+h&&y+$(e).height()<top+h};$scope.buildMobilePlayers=function(){rosterPlayers.forEach(function(j){var char=j.DISPLAY_LAST_COMMA_FIRST.charAt(0).toLowerCase();mobilePlayers[char]||(mobilePlayers[char]=[]),mobilePlayers[char].push(j)})};var filterByFirstLetterLastName=function(l){var char=$scope.currentFilter,pattern="^"+char.toUpperCase(),regex=new RegExp(pattern);if(l.DISPLAY_LAST_COMMA_FIRST.match(regex))return l.DISPLAY_LAST_COMMA_FIRST};$scope.filterPlayersByLastNameOnClick=function(v){$scope.currentFilter=v,$scope.players=rosterPlayers.filter(filterByFirstLetterLastName)},$scope.filterPlayersByLastName=function(v){$scope.currentFilter=v,$scope.players=rosterPlayers.filter(filterByLastName)},$scope.filterPlayersByString=function(){$scope.currentFilterString="",$scope.players=rosterPlayers.filter(filterByString)},$scope.filterRosterStatus=function(status){$scope.rosterStatus=status,rosterPlayers="Active"==status?players:players,$scope.filterPlayersByLastName($scope.currentFilter),$scope.buildMobilePlayers()};var handleScroll=function(){angular.element(".player-alpha").toArray().reverse().forEach(function(elem){isVisible(elem)&&($scope.current=elem.id)}),angular.element(".letter").removeClass("letter-bold"),angular.element("#letter-"+$scope.current).addClass("letter-bold"),handleResize(),$scope.$apply()},handleResize=function(){angular.element(".letter-nav").css("height",Math.max(document.documentElement.clientHeight,window.innerHeight||0)+"px"),angular.element(".letter-nav").css("top",Math.max($($(".list.row")[0]).offset().top-window.scrollY,0)+"px")};$scope.current="a",$scope.mobilePlayers=mobilePlayers,$scope.IS_MOBILE=!1,$scope.$watch(function(){return $window.IS_MOBILE},function(n,o){$scope.IS_MOBILE=!!n&&n,console.log($scope.IS_MOBILE)}),angular.element(window).bind("scroll",handleScroll),angular.element(window).bind("resize",handleResize),angular.element(window).bind("load",function(){handleScroll(),handleResize()}),$scope.listPlayers=function(){return $scope.searched},$scope.playersSearched=function(){return $scope.searched=!0,$scope.searched},StatsRequest.get("playerList","",params).then(function(){players=StatsRequest.getData().CommonAllPlayers.datatable,$scope.filterRosterStatus($scope.rosterStatus),$scope.isLoading=!1})}stats.controller("HomepagePlayerListCtrl",HomepagePlayerListCtrl),HomepagePlayerListCtrl.$inject=["$scope","$timeout","SEASONS","StatsRequest","$window"]}(),function(){function LeagueAllstarClutchAdvancedCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"GameSegment","Period","Rank","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){
value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.SeasonType="All Star",$scope.params.Permode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarClutchAdvancedCtrl",LeagueAllstarClutchAdvancedCtrl),LeagueAllstarClutchAdvancedCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueAllstarClutchBaseCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarClutchBaseCtrl",LeagueAllstarClutchBaseCtrl),LeagueAllstarClutchBaseCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueAllstarClutchFourFactorsCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Four Factors",$scope.params.SeasonType="All Star",$scope.params.Permode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarClutchFourFactorsCtrl",LeagueAllstarClutchFourFactorsCtrl),LeagueAllstarClutchFourFactorsCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueAllstarClutchMiscCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarClutchMiscCtrl",LeagueAllstarClutchMiscCtrl),LeagueAllstarClutchMiscCtrl.$LeagueAllstarClutchMiscCtrl=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueAllstarClutchOpponentCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarClutchOpponentCtrl",LeagueAllstarClutchOpponentCtrl),LeagueAllstarClutchOpponentCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueAllstarClutchScoringCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.params.SeasonType="All Star",$scope.params.Permode="PerGame",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarClutchScoringCtrl",LeagueAllstarClutchScoringCtrl),LeagueAllstarClutchScoringCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueAllstarGeneralAdvancedCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"GameSegment","Period","Rank","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.SeasonType="All Star",$scope.params.Permode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarGeneralAdvancedCtrl",LeagueAllstarGeneralAdvancedCtrl),LeagueAllstarGeneralAdvancedCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueAllstarGeneralBaseCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarGeneralBaseCtrl",LeagueAllstarGeneralBaseCtrl),LeagueAllstarGeneralBaseCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueAllstarGeneralFourFactorsCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Four Factors",$scope.params.SeasonType="All Star",$scope.params.Permode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarGeneralFourFactorsCtrl",LeagueAllstarGeneralFourFactorsCtrl),LeagueAllstarGeneralFourFactorsCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueAllstarGeneralMiscCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarGeneralMiscCtrl",LeagueAllstarGeneralMiscCtrl),LeagueAllstarGeneralMiscCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueAllstarGeneralOpponentCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarGeneralOpponentCtrl",LeagueAllstarGeneralOpponentCtrl),LeagueAllstarGeneralOpponentCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueAllstarGeneralScoringCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.params.SeasonType="All Star",$scope.params.Permode="PerGame",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarGeneralScoringCtrl",LeagueAllstarGeneralScoringCtrl),LeagueAllstarGeneralScoringCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueAllstarNavCtrl($scope,$location,$route){$scope.$on("$routeChangeSuccess",function(event,routeData){$scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0]}),$scope.pages=[{page:"generalTraditional",path:"",text:"General Traditional"},{page:"generalAdvanced",path:"advanced",text:"General Advanced"},{page:"generalMisc",path:"misc",text:"General Misc"},{page:"generalFourFactors",path:"misc",text:"General Four Factors"},{page:"generalScoring",path:"scoring",text:"General Scoring"},{page:"generalOpponent",path:"opponent",text:"General Opponent"},{page:"clutchTraditional",path:"clutch/",text:"Clutch Traditional"},{page:"clutchAdvanced",path:"clutch/advanced",text:"Clutch Advanced"},{page:"clutchFourFactors",path:"clutch/fourfactors",text:"Clutch Four Factors"},{page:"clutchMisc",path:"clutch/misc",text:"Clutch Misc"},{page:"clutchScoring",path:"clutch/scoring",text:"Clutch Scoring"},{page:"clutchOpponent",path:"clutch/opponent",text:"Clutch Opponent"},{page:"shooting",path:"shooting",text:"Shooting"},{page:"oppshooting",path:"oppshooting",text:"Opponent Shooting"}],$scope.onNavChange=function(){$location.path($scope.selected.path)}}stats.controller("LeagueAllstarNavCtrl",LeagueAllstarNavCtrl),LeagueAllstarNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function LeagueAllstarOppShootingCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamShootingService){function getStats(){$scope.isLoading=!0,LeagueTeamShootingService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"PerMode","DistanceRange","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarOppShootingCtrl",LeagueAllstarOppShootingCtrl),LeagueAllstarOppShootingCtrl.$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamShootingService"]}(),function(){function LeagueAllstarShootingCtrl($scope,$filter,$location,SplitsService,SEASONS,LeagueTeamShootingService){function getStats(){$scope.isLoading=!0,LeagueTeamShootingService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueAllstar.Season,seasonRange:[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]},"PerMode","DistanceRange","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo"]);config.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.params.SeasonType="All Star",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllstarShootingCtrl",LeagueAllstarShootingCtrl),LeagueAllstarShootingCtrl$inject=["$scope","$filter","$location","SplitsService","SEASONS","LeagueTeamShootingService"]}(),function(){function DefensiveHubLeadersCtrl($scope,$http,$location,$routeParams,$sce,CMSENV,SEASONS,LeagueDefenseService){function getStats(){$scope.isPlayerLoading=!0,$scope.isTeamLoading=!0;var playerParams=angular.extend({},$scope.params,{PlayerOrTeam:"Player"}),teamParams=angular.extend({},$scope.params,{PlayerOrTeam:"Team"});LeagueDefenseService.get(playerParams).then(function(data){$scope.isPlayerLoading=!1,$scope.playerData=data,$scope.noPlayerData=0===data.DefenseHubStat1.datatable.length}),LeagueDefenseService.get(teamParams).then(function(data){$scope.isTeamLoading=!1,$scope.teamData=data,$scope.noTeamData=0===data.DefenseHubStat1.datatable.length})}$scope.playerCategoryTemplate="/playerCategoryTemplate.html",$scope.teamCategoryTemplate="/teamCategoryTemplate.html",$scope.isArticleLoading=!0,$scope.trustAsHtml=$sce.trustAsHtml;var defHubFeed=CMSENV.prefix+"wp-json/statscms/v1/type/stats-article/?category=defensivehub&limit=5";$http({method:"GET",url:defHubFeed}).then(function(response){$scope.defHubArticles=response.data.posts,$scope.isArticleLoading=!1}),$scope.params={LeagueID:SEASONS.leagueDefensiveLeaders.LeagueID,Season:SEASONS.leagueDefensiveLeaders.Season,SeasonType:SEASONS.leagueDefensiveLeaders.SeasonType,PlayerScope:"All Players",GameScope:"Season"},$scope.$on("$routeChangeSuccess",function(event,routeData){getStats()})}stats.controller("DefensiveHubLeadersCtrl",DefensiveHubLeadersCtrl),DefensiveHubLeadersCtrl.$inject=["$scope","$http","$location","$routeParams","$sce","CMSENV","SEASONS","LeagueDefenseService"]}(),function(){function DefensiveHubPlaytypeCtrl($scope,$location,$routeParams,SEASONS,SplitsService,PlaytypeStatsService){function getStats(){$scope.isLoading=!0,PlaytypeStatsService.get($scope.params).then(function(data){$scope.isLoading=!1,$scope.datasets={PlayTypeData:{datatable:data,initalSortField:"Points",shouldReverse:!0}},$scope.noData=0===data.length})}var config=SplitsService.get([{name:"Season",initial:SEASONS.playtypeStats.Season,seasonRange:[SEASONS.playtypeStats.SeasonYearFrom,SEASONS.playtypeStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.playtypeStats.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",initial:"Totals"}]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.OD="defensive",$scope.$on("$routeChangeSuccess",function(event,routeData){getStats()}),$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf})}stats.controller("DefensiveHubPlaytypeCtrl",DefensiveHubPlaytypeCtrl),DefensiveHubPlaytypeCtrl.$inject=["$scope","$location","$routeParams","SEASONS","SplitsService","PlaytypeStatsService"]}(),function(){function LeagueDefensiveHubNavCtrl($scope,$location,$route){$scope.state=$scope.state||{},$scope.state.selected=$location.path(),$scope.onNavChange=function(){$location.url($scope.state.selected)}}stats.controller("LeagueDefensiveHubNavCtrl",LeagueDefensiveHubNavCtrl),LeagueDefensiveHubNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function HustleLeadersCtrl($scope,SEASONS,LeaguePlayerHustleLeadersService,LeagueTeamHustleLeadersService){function getStats(){$scope.isTeamLoading=!0,$scope.isPlayerLoading=!0;var playerParams=angular.extend({},$scope.params,{PlayerOrTeam:"Player"}),teamParams=angular.extend({},$scope.params,{PlayerOrTeam:"Team"});LeaguePlayerHustleLeadersService.get(playerParams).then(function(data){$scope.isPlayerLoading=!1,$scope.playerData=data,$scope.noPlayerData=0===data.PlayerContestedShotsLeaders.datatable.length}),LeagueTeamHustleLeadersService.get(teamParams).then(function(data){$scope.isTeamLoading=!1,$scope.teamData=data,$scope.noTeamData=0===data.TeamContestedShotsLeaders.datatable.length})}$scope.isTeamLoading=!0,$scope.isPlayerLoading=!0,$scope.params={LeagueID:SEASONS.leagueHustleLeaders.LeagueID,Season:SEASONS.leagueHustleLeaders.Season,SeasonType:SEASONS.leagueHustleLeaders.SeasonType,PlayerScope:"All Players",GameScope:"Season",PerMode:"PerGame"},getStats()}stats.controller("HustleLeadersCtrl",HustleLeadersCtrl),HustleLeadersCtrl.$inject=["$scope","SEASONS","LeaguePlayerHustleLeadersService","LeagueTeamHustleLeadersService"]}(),function(){function LeagueAllTimeLeadersCtrl($scope,SplitsService,SEASONS,LeagueLeadersService){function getStats(){$scope.isLoading=!0,LeagueLeadersService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets})}$scope.isLoading=!0;var config=SplitsService.get(["LeagueID",{name:"SeasonType",without:"Preseason",initial:SEASONS.leadersAllTime.SeasonType},"PerMode",{name:"StatCategory",without:["AST_TOV","STL_TOV","PF","EFF"]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.Season="All Time",$scope.params.Scope="S",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueAllTimeLeadersCtrl",LeagueAllTimeLeadersCtrl),LeagueAllTimeLeadersCtrl.$inject=["$scope","SplitsService","SEASONS","LeagueLeadersService"]}(),function(){function LeagueLeadersCtrl($scope,SplitsService,SEASONS,LeagueLeadersService){function getStats(){$scope.isLoading=!0,LeagueLeadersService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=!$scope.datasets.LeagueLeaders.datatable.length})}$scope.isLoading=!0;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leadersCurrent.Season,seasonRange:[SEASONS.leadersCurrent.SeasonYearFrom,SEASONS.leadersCurrent.SeasonYear]},{name:"SeasonType",initial:SEASONS.leadersCurrent.SeasonType},{name:"PerMode",include:[{val:"Per48",text:"Per 48 Minutes"}]},"Scope"]),categories={Per48:SplitsService.get([{name:"StatCategory",without:["MIN","FG_PCT","FG3_PCT","FT_PCT","AST_TOV","STL_TOV"]}]).splits.StatCategory,PerGame:SplitsService.get([{name:"StatCategory",without:["FGA","FGM","FG_PCT","FG3M","FG3A","FG3_PCT","FTA","FTM","FT_PCT","PF","AST_TOV","STL_TOV"]}]).splits.StatCategory,Totals:SplitsService.get([{name:"StatCategory"}]).splits.StatCategory};$scope.splits=config.splits,$scope.params=config.params,$scope.splits.StatCategory=categories[$scope.splits.PerMode.selected.val],$scope.params.StatCategory=$scope.splits.StatCategory.selected.val,$scope.$watch("splits.PerMode.selected",function(selected){$scope.splits.StatCategory=categories[selected.val]}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLeadersCtrl",LeagueLeadersCtrl),LeagueLeadersCtrl.$inject=["$scope","SplitsService","SEASONS","LeagueLeadersService"]}(),function(){function LeagueLineupsAdvancedCtrl($scope,$location,SplitsService,SEASONS,LeagueLineupsService){function getStats(){$scope.isLoading=!0,LeagueLineupsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.Lineups.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueLineups.Season,seasonRange:[SEASONS.leagueLineups.SeasonYearFrom,SEASONS.leagueLineups.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueLineups.SeasonType,without:["Pre Season"]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.PerMode="Totals",$scope.params.GameID="",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLineupsAdvancedCtrl",LeagueLineupsAdvancedCtrl),LeagueLineupsAdvancedCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueLineupsService"]}(),function(){function LeagueLineupsBaseCtrl($scope,$location,SplitsService,SEASONS,LeagueLineupsService){function getStats(){$scope.isLoading=!0,LeagueLineupsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.Lineups.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueLineups.Season,seasonRange:[SEASONS.leagueLineups.SeasonYearFrom,SEASONS.leagueLineups.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueLineups.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.params.GameID="",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLineupsBaseCtrl",LeagueLineupsBaseCtrl),LeagueLineupsBaseCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueLineupsService"]}(),function(){function LeagueLineupsFourFactorsCtrl($scope,$location,SplitsService,SEASONS,LeagueLineupsService){function getStats(){$scope.isLoading=!0,LeagueLineupsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.Lineups.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueLineups.Season,seasonRange:[SEASONS.leagueLineups.SeasonYearFrom,SEASONS.leagueLineups.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueLineups.SeasonType,
without:["Pre Season"]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Four Factors",$scope.params.PerMode="Totals",$scope.params.GameID="",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLineupsFourFactorsCtrl",LeagueLineupsFourFactorsCtrl),LeagueLineupsFourFactorsCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueLineupsService"]}(),function(){function LeagueLineupsMiscCtrl($scope,$location,SplitsService,SEASONS,LeagueLineupsService){function getStats(){$scope.isLoading=!0,LeagueLineupsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.Lineups.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueLineups.Season,seasonRange:[SEASONS.leagueLineups.SeasonYearFrom,SEASONS.leagueLineups.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueLineups.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.params.GameID="",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLineupsMiscCtrl",LeagueLineupsMiscCtrl),LeagueLineupsMiscCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueLineupsService"]}(),function(){function LeagueLineupsNavCtrl($scope,$location,$route){$scope.$on("$routeChangeSuccess",function(event,routeData){$scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0]}),$scope.pages=[{page:"traditional",path:"",text:"Traditional"},{page:"advanced",path:"advanced",text:"Advanced"},{page:"fourfactors",path:"fourfactors",text:"Four Factors"},{page:"misc",path:"misc",text:"Misc"},{page:"scoring",path:"scoring",text:"Scoring"},{page:"opponent",path:"opponent",text:"Opponent"}],$scope.onNavChange=function(){$location.path($scope.selected.path)}}stats.controller("LeagueLineupsNavCtrl",LeagueLineupsNavCtrl),LeagueLineupsNavCtrl.$inect=["$scope","$location","$route"]}(),function(){function LeagueLineupsOpponentCtrl($scope,$location,SplitsService,SEASONS,LeagueLineupsService){function getStats(){$scope.isLoading=!0,LeagueLineupsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.Lineups.rowSet.length})}function setGroupQuantity(q){var v=q===+$scope.splits.GroupQuantity.default?null:q;$location.search("GroupQuantity",v),$scope.params.GroupQuantity=q,getStats()}$scope.isLoading=!0,$scope.showSplits=!1,$scope.setGroupQuantity=setGroupQuantity;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueLineups.Season,seasonRange:[SEASONS.leagueLineups.SeasonYearFrom,SEASONS.leagueLineups.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueLineups.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLineupsOpponentCtrl",LeagueLineupsOpponentCtrl),LeagueLineupsOpponentCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueLineupsService"]}(),function(){function LeagueLineupsScoringCtrl($scope,$location,SplitsService,SEASONS,LeagueLineupsService){function getStats(){$scope.isLoading=!0,LeagueLineupsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.Lineups.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueLineups.Season,seasonRange:[SEASONS.leagueLineups.SeasonYearFrom,SEASONS.leagueLineups.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueLineups.SeasonType,without:["Pre Season"]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.params.PerMode="Totals",$scope.params.GameID="",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueLineupsScoringCtrl",LeagueLineupsScoringCtrl),LeagueLineupsScoringCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueLineupsService"]}(),function(){function LeaguePlayerBioCtrl($scope,SEASONS,SplitsService,LeaguePlayerBioService){function getStats(){$scope.isLoading=!0,LeaguePlayerBioService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].rowSet.length})}$scope.isLoading=!0;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"PerMode","College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","GameSegment","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","Period","PlayerExperience","PlayerPosition","PORound","SeasonSegment","ShotClockRange","StarterBench","TeamID","VsDivision","VsConference","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),getStats()}stats.controller("LeaguePlayerBioCtrl",LeaguePlayerBioCtrl),LeaguePlayerBioCtrl.$inject=["$scope","SEASONS","SplitsService","LeaguePlayerBioService"]}(),function(){function LeaguePlayerClutchAdvancedCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerClutchService){function getStats(){$scope.isLoading=!0,LeaguePlayerClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"GameSegment","Period","Rank","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerClutchAdvancedCtrl",LeaguePlayerClutchAdvancedCtrl),LeaguePlayerClutchAdvancedCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerClutchService"]}(),function(){function LeaguePlayerClutchBaseCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerClutchService){function getStats(){$scope.isLoading=!0,LeaguePlayerClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerClutchBaseCtrl",LeaguePlayerClutchBaseCtrl),LeaguePlayerClutchBaseCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerClutchService"]}(),function(){function LeaguePlayerClutchMiscCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerClutchService){function getStats(){$scope.isLoading=!0,LeaguePlayerClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerClutchMiscCtrl",LeaguePlayerClutchMiscCtrl),LeaguePlayerClutchMiscCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerClutchService"]}(),function(){function LeaguePlayerClutchScoringCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerClutchService){function getStats(){$scope.isLoading=!0,LeaguePlayerClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.params.PerMode="PerGame",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerClutchScoringCtrl",LeaguePlayerClutchScoringCtrl),LeaguePlayerClutchScoringCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerClutchService"]}(),function(){function LeaguePlayerClutchUsageCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerClutchService){function getStats(){$scope.isLoading=!0,LeaguePlayerClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Usage",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerClutchUsageCtrl",LeaguePlayerClutchUsageCtrl),LeaguePlayerClutchUsageCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerClutchService"]}(),function(){function LeaguePlayerDefenseCtrl($scope,$element,$location,SEASONS,SplitsService,leaguePlayerTrackingDefenseService){function getStats(){$scope.isLoading=!0,leaguePlayerTrackingDefenseService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].rowSet.length})}var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTrackingStats.Season,seasonRange:[SEASONS.leagueTrackingStats.SeasonYearFrom,SEASONS.leagueTrackingStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTrackingStats.SeasonType,without:["Pre Season"]},"PerMode","College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameSegment","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PORound","Period","PlayerExperience","PlayerPosition","SeasonSegment","StarterBench","TeamID","VsConference","VsDivision","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.DefenseCategory=$element.data("defense-category"),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerDefenseCtrl",LeaguePlayerDefenseCtrl),LeaguePlayerDefenseCtrl.$inject=["$scope","$element","$location","SEASONS","SplitsService","leaguePlayerTrackingDefenseService"]}(),function(){function LeaguePlayerDefenseNavCtrl($scope,$location,$route){$scope.state=$scope.state||{},$scope.state.selected=$location.path(),$scope.onNavChange=function(){$location.url($scope.state.selected)}}stats.controller("LeaguePlayerDefenseNavCtrl",LeaguePlayerDefenseNavCtrl),LeaguePlayerDefenseNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function leaguePlayerGameLogsCtrl($location,$scope,Seasons,SplitsService,LeagueGameLogsService){function getStats(){$scope.isLoading=!0,LeagueGameLogsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets.LeagueGameLog.datatable.length,$scope.isLoading=!1})}function doSort(field){$scope.params.Sorter==field?$scope.params.Direction="DESC"===$scope.params.Direction?"ASC":"DESC":($scope.params.Sorter=field,$scope.params.Direction="DESC"),$location.search("Sorter",$scope.params.Sorter),$location.search("Direction",$scope.params.Direction),getStats()}$scope.isLoading=!0,$scope.showSplits=!1,$scope.isAllTime=!1,$scope.doSort=doSort;var config=SplitsService.get(["LeagueID",{name:"Season",initial:Seasons.leagueGameLogs.Season,seasonRange:[Seasons.leagueGameLogs.SeasonFrom,Seasons.leagueGameLogs.Season],includeBefore:[{val:"ALLTIME",text:"All Seasons"}]},{name:"SeasonType",initial:Seasons.leagueGameLogs.SeasonType}]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.Sorter=$location.search().Sorter||"PTS",$scope.params.Direction=$location.search().Direction||"DESC",$scope.params.PlayerOrTeam="P",$scope.params.Counter="1000",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){"ALLTIME"===$scope.params.Season?($scope.isAllTime||($location.search("sort",null),$location.search("dir",null)),$scope.isAllTime=!0):($scope.isAllTime&&($location.search("Sorter",null),$location.search("Direction",null)),$scope.isAllTime=!1),getStats()}),getStats()}stats.controller("leaguePlayerGameLogsCtrl",leaguePlayerGameLogsCtrl),leaguePlayerGameLogsCtrl.$inject=["$location","$scope","SEASONS","SplitsService","LeagueGameLogsService"]}(),function(){function LeaguePlayerGeneralAdvancedCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerGeneralService){function getStats(){$scope.isLoading=!0,LeaguePlayerGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"GameSegment","Period","Rank","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralAdvancedCtrl",LeaguePlayerGeneralAdvancedCtrl),LeaguePlayerGeneralAdvancedCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerGeneralService"]}(),function(){function LeaguePlayerGeneralBaseCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerGeneralService){function getStats(){$scope.isLoading=!0,LeaguePlayerGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralBaseCtrl",LeaguePlayerGeneralBaseCtrl),LeaguePlayerGeneralBaseCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerGeneralService"]}(),function(){function LeaguePlayerGeneralDefenseCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerGeneralService){function getStats(){$scope.isLoading=!0,LeaguePlayerGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Defense",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralDefenseCtrl",LeaguePlayerGeneralDefenseCtrl),LeaguePlayerGeneralDefenseCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerGeneralService"]}(),function(){function LeaguePlayerGeneralMiscCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerGeneralService){function getStats(){$scope.isLoading=!0,LeaguePlayerGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralMiscCtrl",LeaguePlayerGeneralMiscCtrl),LeaguePlayerGeneralMiscCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerGeneralService"]}(),function(){function LeaguePlayerGeneralOppCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerOnCourtService){function getStats(){$scope.isLoading=!0,LeaguePlayerOnCourtService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.PlayersOnCourtLeaguePlayerDetails.datatable.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},{name:"PerMode",initial:"Per100Possessions",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralOppCtrl",LeaguePlayerGeneralOppCtrl),LeaguePlayerGeneralOppCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerOnCourtService"]}(),function(){function LeaguePlayerGeneralScoringCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerGeneralService){function getStats(){$scope.isLoading=!0,LeaguePlayerGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.params.PerMode="PerGame",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralScoringCtrl",LeaguePlayerGeneralScoringCtrl),LeaguePlayerGeneralScoringCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerGeneralService"]}(),function(){function LeaguePlayerGeneralUsageCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerGeneralService){function getStats(){$scope.isLoading=!0,LeaguePlayerGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashPlayerStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Usage",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerGeneralUsageCtrl",LeaguePlayerGeneralUsageCtrl),LeaguePlayerGeneralUsageCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerGeneralService"]}(),function(){function LeaguePlayerHustleCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerHustleService){function getStats(){$scope.isLoading=!0,LeaguePlayerHustleService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.HustleStatsPlayer.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerHustle.Season,seasonRange:[SEASONS.leaguePlayerHustle.SeasonYearFrom,SEASONS.leaguePlayerHustle.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerHustle.SeasonType},"PerMode","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerHustleCtrl",LeaguePlayerHustleCtrl),LeaguePlayerHustleCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerHustleService"];
}(),function(){function LeaguePlayerNavCtrl($scope,$location,$route){$scope.state=$scope.state||{},$scope.state.selected=$location.path(),$scope.onNavChange=function(){$location.url($scope.state.selected)}}stats.controller("LeaguePlayerNavCtrl",LeaguePlayerNavCtrl),LeaguePlayerNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function LeaguePlayerPlaytypeCtrl($scope,$location,$routeParams,SEASONS,SplitsService,PlaytypeStatsService){function getStats(){$scope.isLoading=!0,PlaytypeStatsService.get($scope.params).then(function(data){$scope.isLoading=!1,$scope.datasets={PlayTypeData:{datatable:data,initalSortField:"Points",shouldReverse:!0}},$scope.noData=0===data.length})}var config=SplitsService.get([{name:"Season",initial:SEASONS.playtypeStats.Season,seasonRange:[SEASONS.playtypeStats.SeasonYearFrom,SEASONS.playtypeStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.playtypeStats.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",initial:"Totals"},"OD"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.type="player",$scope.$on("$routeChangeSuccess",function(event,routeData){getStats()}),$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf})}stats.controller("LeaguePlayerPlaytypeCtrl",LeaguePlayerPlaytypeCtrl),LeaguePlayerPlaytypeCtrl.$inject=["$scope","$location","$routeParams","SEASONS","SplitsService","PlaytypeStatsService"]}(),function(){function LeaguePlayerOppShootingCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerShootingService){function getStats(){$scope.isLoading=!0,LeaguePlayerShootingService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets[0].datatable.length})}function setDistanceRange(q){var v=q===+$scope.splits.DistanceRange.default?null:q;$location.search("DistanceRange",v),$scope.params.DistanceRange=q,getStats()}$scope.isLoading=!0,$scope.showSplits=!1,$scope.setDistanceRange=setDistanceRange;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"PerMode","DistanceRange","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerOppShootingCtrl",LeaguePlayerOppShootingCtrl),LeaguePlayerOppShootingCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerShootingService"]}(),function(){function LeaguePlayerShootingCtrl($scope,$location,SplitsService,SEASONS,LeaguePlayerShootingService){function getStats(){$scope.isLoading=!0,LeaguePlayerShootingService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets[0].datatable.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leaguePlayerStats.Season,seasonRange:[SEASONS.leaguePlayerStats.SeasonYearFrom,SEASONS.leaguePlayerStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leaguePlayerStats.SeasonType},"PerMode","DistanceRange","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeaguePlayerShootingCtrl",LeaguePlayerShootingCtrl),LeaguePlayerShootingCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeaguePlayerShootingService"]}(),function(){function LeaguePlayerShotsCtrl($scope,$element,$location,SEASONS,SplitsService,leaguePlayerTrackingShotsService){function getStats(){$scope.isLoading=!0,leaguePlayerTrackingShotsService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].rowSet.length})}var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTrackingStats.Season,seasonRange:[SEASONS.leagueTrackingStats.SeasonYearFrom,SEASONS.leagueTrackingStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTrackingStats.SeasonType,without:["Pre Season"]},"PerMode","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.sections=["closestDef10","CloseDefDistRange","DribbleRange","GeneralRange","ShotClockRange","ShotDistRange","TouchTimeRange"],$scope.splits=config.splits,$scope.params=config.params,$scope.sections.forEach(function(s){$scope.params[s]=$location.search()[s]||"",$location.search()[s]&&($scope.currentSection=s,$scope.currentRange=$scope.params[s],$scope.params[s]=$location.search()[s])}),$scope.currentSection||($scope.currentSection="GeneralRange",$scope.currentRange="Overall",$scope.params.GeneralRange="Overall"),$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("LeaguePlayerShotsSectionChange",function(event,section,range,shotdist){$scope.sections.forEach(function(s){$scope.params[s]="",$location.search(s,null)}),$scope.params.ShotDistRange=shotdist?">=10.0":"",$location.search("ShotDistRange",$scope.params.ShotDistRange),$scope.params[section]=range,$scope.currentSection=section,$scope.currentRange=range,$location.search(section,range),getStats()}),getStats()}stats.controller("LeaguePlayerShotsCtrl",LeaguePlayerShotsCtrl),LeaguePlayerShotsCtrl.$inject=["$scope","$element","$location","SEASONS","SplitsService","leaguePlayerTrackingShotsService"]}(),function(){function LeaguePlayerShotsNavCtrl($scope,$rootScope,$route){function navigateTo(section,range,shotdist){$rootScope.$broadcast("LeaguePlayerShotsSectionChange",section,range,shotdist)}function onNavChangeFn(){var val=$scope.selected.split("|");val.length<2||navigateTo(val[0],val[1],val[2])}$scope.navigateTo=navigateTo,$scope.onNavChange=onNavChangeFn}stats.controller("LeaguePlayerShotsNavCtrl",LeaguePlayerShotsNavCtrl),LeaguePlayerShotsNavCtrl.$inject=["$scope","$rootScope","$route"]}(),function(){function LeagueTeamClutchAdvancedCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"GameSegment","Period","Rank","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamClutchAdvancedCtrl",LeagueTeamClutchAdvancedCtrl),LeagueTeamClutchAdvancedCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueTeamClutchBaseCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamClutchBaseCtrl",LeagueTeamClutchBaseCtrl),LeagueTeamClutchBaseCtrl.$inect=["$scope","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueTeamClutchFourFactorsCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Four Factors",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamClutchFourFactorsCtrl",LeagueTeamClutchFourFactorsCtrl),LeagueTeamClutchFourFactorsCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueTeamClutchMiscCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get([{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamClutchMiscCtrl",LeagueTeamClutchMiscCtrl),LeagueTeamClutchMiscCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueTeamClutchOpponentCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamClutchOpponentCtrl",LeagueTeamClutchOpponentCtrl),LeagueTeamClutchOpponentCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueTeamClutchScoringCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamClutchService){function getStats(){$scope.isLoading=!0,LeagueTeamClutchService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamClutch.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","ClutchTime","AheadBehind","PointDiff","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.params.PerMode="PerGame",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamClutchScoringCtrl",LeagueTeamClutchScoringCtrl),LeagueTeamClutchScoringCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamClutchService"]}(),function(){function LeagueTeamDefenseCtrl($scope,$element,$location,SEASONS,SplitsService,leagueTeamTrackingDefenseService){function getStats(){$scope.isLoading=!0,leagueTeamTrackingDefenseService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].rowSet.length})}var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTrackingStats.Season,seasonRange:[SEASONS.leagueTrackingStats.SeasonYearFrom,SEASONS.leagueTrackingStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTrackingStats.SeasonType,without:["Pre Season"]},"Conference","DateFrom","DateTo","Division","GameSegment","LastNGames","Location","Month","OpponentTeamID","Outcome","Period","PerMode","PORound","SeasonSegment","TeamID","VsConference","VsDivision"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.DefenseCategory=$element.data("defense-category"),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamDefenseCtrl",LeagueTeamDefenseCtrl),LeagueTeamDefenseCtrl.$inject=["$scope","$element","$location","SEASONS","SplitsService","leagueTeamTrackingDefenseService"]}(),function(){function LeagueTeamDefenseNavCtrl($scope,$location,$route){$scope.state=$scope.state||{},$scope.state.selected=$location.path(),$scope.onNavChange=function(){$location.url($scope.state.selected)}}stats.controller("LeagueTeamDefenseNavCtrl",LeagueTeamDefenseNavCtrl),LeagueTeamDefenseNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function leagueTeamGameLogsCtrl($location,$scope,Seasons,SplitsService,LeagueGameLogsService){function getStats(){$scope.isLoading=!0,LeagueGameLogsService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets.LeagueGameLog.datatable.length,$scope.isLoading=!1})}function doSort(field){$scope.params.Sorter==field?$scope.params.Direction="DESC"===$scope.params.Direction?"ASC":"DESC":($scope.params.Sorter=field,$scope.params.Direction="DESC"),$location.search("Sorter",$scope.params.Sorter),$location.search("Direction",$scope.params.Direction),getStats()}$scope.isLoading=!0,$scope.showSplits=!1,$scope.isAllTime=!1,$scope.doSort=doSort;var config=SplitsService.get(["LeagueID",{name:"Season",initial:Seasons.leagueGameLogs.Season,seasonRange:[Seasons.leagueGameLogs.SeasonFrom,Seasons.leagueGameLogs.Season],includeBefore:[{val:"ALLTIME",text:"All Seasons"}]},{name:"SeasonType",initial:Seasons.leagueGameLogs.SeasonType},"DateFrom","DateTo"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.Sorter=$location.search().Sorter||"PTS",$scope.params.Direction=$location.search().Direction||"DESC",$scope.params.PlayerOrTeam="T",$scope.params.Counter="1000",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){"ALLTIME"===$scope.params.Season?($scope.isAllTime||($location.search("sort",null),$location.search("dir",null)),$scope.isAllTime=!0):($scope.isAllTime&&($location.search("Sorter",null),$location.search("Direction",null)),$scope.isAllTime=!1),getStats()}),getStats()}stats.controller("leagueTeamGameLogsCtrl",leagueTeamGameLogsCtrl),leagueTeamGameLogsCtrl.$inject=["$location","$scope","SEASONS","SplitsService","LeagueGameLogsService"]}(),function(){function LeagueTeamGeneralAdvancedCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"GameSegment","Period","Rank","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Advanced",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralAdvancedCtrl",LeagueTeamGeneralAdvancedCtrl),LeagueTeamGeneralAdvancedCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueTeamGeneralBaseCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralBaseCtrl",LeagueTeamGeneralBaseCtrl),LeagueTeamGeneralBaseCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueTeamGeneralDefenseCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Defense",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralDefenseCtrl",LeagueTeamGeneralDefenseCtrl),LeagueTeamGeneralDefenseCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueTeamGeneralFourFactorsCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Four Factors",$scope.params.PerMode="Totals",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralFourFactorsCtrl",LeagueTeamGeneralFourFactorsCtrl),LeagueTeamGeneralFourFactorsCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueTeamGeneralMiscCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Misc",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralMiscCtrl",LeagueTeamGeneralMiscCtrl),LeagueTeamGeneralMiscCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueTeamGeneralOpponentCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralOpponentCtrl",LeagueTeamGeneralOpponentCtrl),LeagueTeamGeneralOpponentCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}(),function(){function LeagueTeamGeneralScoringCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamGeneralService){function getStats(){$scope.isLoading=!0,LeagueTeamGeneralService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.LeagueDashTeamStats.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"PerMode","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Scoring",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamGeneralScoringCtrl",LeagueTeamGeneralScoringCtrl),LeagueTeamGeneralScoringCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamGeneralService"]}();!function(){function LeagueTeamHustleCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamHustleService){function getStats(){$scope.isLoading=!0,LeagueTeamHustleService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets.HustleStatsTeam.rowSet.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamHustle.Season,seasonRange:[SEASONS.leagueTeamHustle.SeasonYearFrom,SEASONS.leagueTeamHustle.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamHustle.SeasonType},"PerMode","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.splits=config.splits,$scope.params=config.params,
$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamHustleCtrl",LeagueTeamHustleCtrl),LeagueTeamHustleCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamHustleService"]}();!function(){function LeagueTeamNavCtrl($scope,$location,$route){$scope.state=$scope.state||{},$scope.state.selected=$location.path(),$scope.onNavChange=function(){$location.url($scope.state.selected)}}stats.controller("LeagueTeamNavCtrl",LeagueTeamNavCtrl),LeagueTeamNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function LeagueTeamPlaytypeCtrl($scope,$location,$routeParams,SEASONS,SplitsService,PlaytypeStatsService){function getStats(){$scope.isLoading=!0,PlaytypeStatsService.get($scope.params).then(function(data){$scope.isLoading=!1,$scope.datasets={PlayTypeData:{datatable:data,initalSortField:"Points",shouldReverse:!0}},$scope.noData=0===data.length})}var config=SplitsService.get([{name:"Season",initial:SEASONS.playtypeStats.Season,seasonRange:[SEASONS.playtypeStats.SeasonYearFrom,SEASONS.playtypeStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.playtypeStats.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",initial:"Totals"},"OD"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.type="team",$scope.$on("$routeChangeSuccess",function(event,routeData){getStats()}),$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf})}stats.controller("LeagueTeamPlaytypeCtrl",LeagueTeamPlaytypeCtrl),LeagueTeamPlaytypeCtrl.$inject=["$scope","$location","$routeParams","SEASONS","SplitsService","PlaytypeStatsService"]}(),function(){function LeagueTeamOppShootingCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamShootingService){function getStats(){$scope.isLoading=!0,LeagueTeamShootingService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets[0].datatable.length})}function setDistanceRange(q){var v=q===+$scope.splits.DistanceRange.default?null:q;$location.search("DistanceRange",v),$scope.params.DistanceRange=q,getStats()}$scope.isLoading=!0,$scope.showSplits=!1,$scope.setDistanceRange=setDistanceRange;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"PerMode","DistanceRange","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Opponent",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamOppShootingCtrl",LeagueTeamOppShootingCtrl),LeagueTeamOppShootingCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamShootingService"]}(),function(){function LeagueTeamShootingCtrl($scope,$location,SplitsService,SEASONS,LeagueTeamShootingService){function getStats(){$scope.isLoading=!0,LeagueTeamShootingService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.isLoading=!1,$scope.noData=0===datasets[0].datatable.length})}$scope.isLoading=!0,$scope.showSplits=!1;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTeamStats.Season,seasonRange:[SEASONS.leagueTeamStats.SeasonYearFrom,SEASONS.leagueTeamStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTeamStats.SeasonType},"PerMode","DistanceRange","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.MeasureType="Base",$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),getStats()}stats.controller("LeagueTeamShootingCtrl",LeagueTeamShootingCtrl),LeagueTeamShootingCtrl.$inject=["$scope","$location","SplitsService","SEASONS","LeagueTeamShootingService"]}(),function(){function LeagueTeamShotsCtrl($scope,$element,$location,SEASONS,SplitsService,leagueTeamTrackingShotsService){function getStats(){$scope.isLoading=!0,leagueTeamTrackingShotsService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].rowSet.length})}var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.leagueTrackingStats.Season,seasonRange:[SEASONS.leagueTrackingStats.SeasonYearFrom,SEASONS.leagueTrackingStats.SeasonYear]},{name:"SeasonType",initial:SEASONS.leagueTrackingStats.SeasonType,without:["Pre Season"]},"PerMode","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","TeamID","Conference","Division","PORound"]);$scope.sections=["closestDef10","CloseDefDistRange","DribbleRange","GeneralRange","ShotClockRange","ShotDistRange","TouchTimeRange"],$scope.splits=config.splits,$scope.params=config.params,$scope.sections.forEach(function(s){$scope.params[s]=$location.search()[s]||"",$location.search()[s]&&($scope.currentSection=s,$scope.currentRange=$scope.params[s],$scope.params[s]=$location.search()[s])}),$scope.currentSection||($scope.currentSection="GeneralRange",$scope.currentRange="Overall",$scope.params.GeneralRange="Overall"),$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("LeagueTeamShotsSectionChange",function(event,section,range,shotdist){$scope.sections.forEach(function(s){$scope.params[s]="",$location.search(s,null)}),$scope.params.ShotDistRange=shotdist?">=10.0":"",$location.search("ShotDistRange",$scope.params.ShotDistRange),$scope.params[section]=range,$scope.currentSection=section,$scope.currentRange=range,$location.search(section,range),getStats()}),getStats()}stats.controller("LeagueTeamShotsCtrl",LeagueTeamShotsCtrl),LeagueTeamShotsCtrl.$inject=["$scope","$element","$location","SEASONS","SplitsService","leagueTeamTrackingShotsService"]}(),function(){function LeagueTeamShotsNavCtrl($scope,$rootScope,$route){function navigateTo(section,range,shotdist){$rootScope.$broadcast("LeagueTeamShotsSectionChange",section,range,shotdist)}function onNavChangeFn(){var val=$scope.selected.split("|");val.length<2||navigateTo(val[0],val[1],val[2])}$scope.navigateTo=navigateTo,$scope.onNavChange=onNavChangeFn}stats.controller("LeagueTeamShotsNavCtrl",LeagueTeamShotsNavCtrl),LeagueTeamShotsNavCtrl.$inject=["$scope","$rootScope","$route"]}(),stats.controller("GamedateCalendarCtrl",["$scope","$location","$filter",function($scope,$location,$filter){"use strict";function setDate(adj){var date=new Date($scope.gameDate);date.setDate(date.getDate()+adj);var urlDate=$filter("date")(date,"MM/dd/yyyy");$location.path(urlDate)}$scope.showCal=!1,$scope.dt=$location.path().slice(1),$scope.format="dd/MM/yyyy",$scope.changeDate=function(direction){switch(direction){case"next":setDate(1);break;case"prev":setDate(-1);break;default:setDate(1)}},$scope.$watch("dt",function(newval,oldval){var urlDate=$filter("date")($scope.dt,"MM/dd/yyyy");$scope.gameDate=urlDate,$location.path(urlDate)}),$scope.$watch(function(){return $location.path()},function(){if($location.path().slice(1))$scope.gameDate=$location.path().slice(1);else{var date=new Date,urlDate=$filter("date")(date,"MM/dd/yyyy");$location.path(urlDate)}})}]),function(){function ModalInstanceCtrl($scope,$sce,$window,$location,SocialService,$modalInstance,url,title,type){$scope.trustAsResourceUrl=$sce.trustAsResourceUrl,$scope.trustAsHtml=$sce.trustAsHtml,$scope.url=url,$scope.title=title,$scope.type=type,$scope.showEmbedLink=!1,$scope.close=function(){$modalInstance.close("closed")},$scope.openWindow=function($e){$e.stopPropagation(),$e.preventDefault();var href=$e.currentTarget.href;$window.open(href,"Stats","resizable=yes,scrollbars=yes,height=300,width=600")},$scope.toggleEmbedLinkVisibility=function(){$scope.showEmbedLink=!$scope.showEmbedLink},$scope.highlightAllText=function($event){$event.target.select()};var regex=/(#[\d\w]+~?)/,hash="",location=$location.absUrl();regex.test(location)&&(hash="#"+$location.hash(),location=location.replace(regex,""));var params=url.split("?")[1],appender=location.indexOf("?")>-1?"&":"?",modaltype="&mtype="+type,modaltitle="&mtitle="+title;location=location.replace(/\?.*$/,"?"),location+=appender+params+modaltype+modaltitle+hash;var longUrl=encodeURIComponent(location);SocialService.getLinks(longUrl,title).then(function(shortUrl){$scope.shortUrl=shortUrl})}stats.controller("ModalInstanceCtrl",ModalInstanceCtrl),ModalInstanceCtrl.$inject=["$scope","$sce","$window","$location","SocialService","$modalInstance","url","title","type"]}(),function(){function NavSearchController($scope,$filter,$timeout,PlayerListService,SEASONS,TEAMS){function onSearchUpdate(s){return s.length<3?void($scope.showResults=!1):($scope.activeIndex=0,$scope.searchTeams=$filter("filter")(TEAMS,s,!1),$scope.searchPlayers=$filter("filter")($scope.playerList,{DISPLAY_LAST_COMMA_FIRST:s},!1),1===$scope.searchTeams.length?$scope.searchRoster=$filter("filter")($scope.playerList,{TEAM_ABBREVIATION:$scope.searchTeams[0].abbr},!0):$scope.searchRoster=[],$scope.hasResults=$scope.searchTeams.length||$scope.searchPlayers.length||$scope.seachRoster.length,void($scope.showResults=!0))}function toggleSearch(val){val?($scope.showSearch=!0,$scope.timeoutPromise&&$timeout.cancel($scope.timeoutPromise)):$scope.timeoutPromise=$timeout(function(){$scope.showSearch=!1,$scope.timeoutPromise=null},$scope.timeoutDelay)}var params={Season:SEASONS.playerList.Season,LeagueID:"00",IsOnlyCurrentSeason:"0"};$scope.searchPlayers=[],$scope.searchTeams=[],$scope.searchRoster=[],$scope.search="",$scope.maxPlayerResults=10,$scope.showResults=!1,$scope.hasResults=!1,$scope.activeIndex=0,$scope.toggleSearch=toggleSearch,$scope.timeoutPromise=null,$scope.timeoutDelay=500,$scope.$watch("search",onSearchUpdate),PlayerListService.get(params).then(function(players){$scope.playerList=players})}angular.module("stats").controller("NavSearchController",NavSearchController),NavSearchController.$inject=["$scope","$filter","$timeout","PlayerListService","SEASONS","TEAMS"]}(),stats.controller("StatTableCtrl",["$scope","$element","$filter","$location","$timeout",function($scope,$element,$filter,$location,$timeout){"use strict";function applyFilters(rows,filters){if(!filters)return rows;for(var i in filters)rows=$filter("customStatFilter")(rows,filters[i].value);return rows}var unfiltered=$scope.dataset.datatable.slice(0);$scope.rows=applyFilters(unfiltered,$scope.filters),$scope.dataset.datafooter&&($scope.footer=$scope.dataset.datafooter),$scope.totalRows=$scope.rows.length,$scope.rowsPerPage=$scope.rowsPerPage||50,$scope.currentPage=1,$scope.totalPages=Math.ceil($scope.totalRows/$scope.rowsPerPage),$scope.navHeader=!1,$scope.descending=!0,$scope.column="";var updateDataset=function(e){$scope.currentPage=1;var unfiltered=$scope.dataset.datatable.slice(0);$scope.rows=applyFilters(unfiltered,$scope.filters),$scope.totalRows=$scope.rows.length,$scope.rowsPerPage=$scope.rowsPerPage||50,$scope.totalPages=Math.ceil($scope.totalRows/$scope.rowsPerPage),$scope.column="",$element.find("th.sortable").removeClass("sorted");var dsInitialSortField=$scope.datasets?$scope.datasets.initialSortField:null,dsShouldReverse=$scope.datasets?$scope.datasets.shouldReverse:null,initialSortField=$location.search().sort||dsInitialSortField,shouldReverse=$location.search().dir?"-1"==$location.search().dir:dsShouldReverse;initialSortField&&sortColumn(initialSortField,!1,shouldReverse),pageChange()},sortColumn=function(column,apply,reverse){reverse?($scope.column=column,$scope.descending=!1):$scope.column==column?$scope.descending=!$scope.descending:($scope.column=column,$scope.descending=!0),$location.search("sort",column),$location.search("dir",$scope.descending?1:-1),$scope.rows.sort(sortfunc);var selector='th[field="'+column+'"]',$elm=$element.find(selector);$elm.siblings().removeClass("sorted").end().addClass("sorted"),$scope.currentPage=1,pageChange(),apply&&$scope.$apply()},sortfunc=function(a,b){return $scope.descending?a[$scope.column]>b[$scope.column]?-1:a[$scope.column]<b[$scope.column]?1:0:b[$scope.column]>a[$scope.column]?-1:b[$scope.column]<a[$scope.column]?1:0},prevPage=function(e){1!=$scope.currentPage&&($scope.currentPage-=1,$scope.$apply())},nextPage=function(e){$scope.currentPage!=$scope.totalPages&&($scope.currentPage+=1,$scope.$apply())},pageChange=function(e){var alpha=($scope.currentPage-1)*$scope.rowsPerPage,omega=alpha+$scope.rowsPerPage;$scope.page=$scope.rows.slice(alpha,omega)},setFilters=function(e){updateDataset()};$scope.$watch("dataset",updateDataset),$scope.$watch("currentPage",pageChange),$scope.$watch("filters",setFilters),$scope.$on("changeSortColumn",function(event,column){sortColumn(column,!1)}),$element.on("click",".page-nav.left",prevPage),$element.on("click",".page-nav.right",nextPage),$element.on("click","th.sortable",function(e){var column=$(this).attr("field");sortColumn(column,!0)}),$timeout(function(){var cfs=[];$element.find(".cf").each(function(i,n){var $n=angular.element(n),name=$n.attr("field"),text=$n.hasClass("grouped")?$n.attr("field"):$n.text();cfs.push({name:name,text:text})}),$scope.$emit("customFields",cfs)},0)}]),stats.controller("MovementCtrl",["$scope","$rootScope","$location","$element","$http","$filter",function($scope,$rootScope,$location,$element,$http,$filter){function parseData(data){for(var i in teamkeys){var key=teamkeys[i],team=data[key],teamid=team.teamid;teams[teamid]=team,teams[teamid].type=key;for(var j in team.players){var player=team.players[j],playerid=player.playerid;players[playerid]=player,player.name=player.firstname+" "+player.lastname,player.teamid=team.teamid,player.teamname=team.name,player.teamtype=team.type}}$scope.htm.team=data.home,$scope.vtm.team=data.visitor}function parseMoment(moment){var i,info={period:moment[0],timestamp:moment[1],gameclock:moment[2],shotclock:moment[3],eventid:moment[4]},ps=moment[5].map(function(n,i){var obj={teamid:n[0],playerid:n[1],x:10*n[2],y:10*n[3],z:10*n[4],hide:!1};return obj}),obj={info:info,ball:ps[0],htm:ps.slice(1,6),vtm:ps.slice(6,11)};for(i in obj.vtm)obj.vtm[i].info=players[obj.vtm[i].playerid];for(i in obj.htm)obj.htm[i].info=players[obj.htm[i].playerid];return obj}function getTeamHull(d){return d3.geom.hull(d.map(function(i){return[i.x,i.y]}))}function getBallRadius(z){var r=.2*z;return r=Math.min(Math.max(r,10),18)}function setTeamPlayerData(team,loc){if($scope[loc].players.length!=team.length)return void($scope[loc].players=team);for(var i in team){var p=$scope[loc].players[i],m=team[i];p&&p.playerid==m.playerid?(p.x=m.x,p.y=m.y):$scope[loc].players[i]=m}var visible=$filter("filter")($scope[loc].players,{hide:!1});$scope[loc].hull=getTeamHull(visible),$scope[loc].path="M"+$scope[loc].hull.join("L")+"Z",$scope[loc].area=d3.geom.polygon($scope[loc].hull).area(),$scope[loc].coverage=$scope[loc].area/2350}function onFrame(dontApply){var moment=parseMoment(data.moments[momentIndex]);$scope.court.period=moment.info.period,$scope.court.gameclock=moment.info.gameclock,$scope.court.shotclock=moment.info.shotclock,setTeamPlayerData(moment.htm,"htm"),setTeamPlayerData(moment.vtm,"vtm"),$scope.ball.x=moment.ball.x,$scope.ball.y=moment.ball.y,$scope.ball.r=getBallRadius(moment.ball.z),dontApply||$scope.$apply(),momentIndex+=1,momentIndex>=data.moments.length&&($scope.pause(),broadcastFinished(!0))}function broadcastFinished(shouldDigest){$scope.stop(),$scope.$emit("finishedPlaying",shouldDigest)}var animationFrame,data,momentIndex=0,players={},teams={},teamkeys=["home","visitor"];if($scope.isPlaying=!1,$scope.isLoading=!0,$scope.noData=!1,$scope.court={margin:{top:15,right:30,bottom:15,left:30},width:940,height:500,rotation:40},$scope.playbackSpeeds=[{ms:160,text:".25x"},{ms:80,text:".5x"},{ms:40,text:"1x"},{ms:20,text:"2x"},{ms:10,text:"4x"}],$scope.playbackSpeed=$scope.playbackSpeeds[2],$scope.svg={elm:$element.find("svg"),width:$scope.court.width+$scope.court.margin.left+$scope.court.margin.right,height:$scope.court.height+$scope.court.margin.top+$scope.court.margin.bottom},$scope.svg.aspect=$scope.svg.height/$scope.svg.width,$scope.vtm={players:[],hideCoverage:!1},$scope.htm={players:[],hideCoverage:!1},$scope.ball={},$scope.rewind=function(){momentIndex=0,clearInterval(animationFrame),onFrame(!0)},$scope.forward=function(){momentIndex=data.moments.length-1,clearInterval(animationFrame),onFrame(!0)},$scope.pause=function(){return $scope.isPlaying=!1,clearInterval(animationFrame),!1},$scope.stop=function(){return $scope.isPlaying=!1,momentIndex=0,clearInterval(animationFrame),!1},$scope.play=function(){return $scope.isPlaying=!0,momentIndex==data.moments.length&&(momentIndex=0),clearInterval(animationFrame),animationFrame=setInterval(onFrame,$scope.playbackSpeed.ms),!1},$scope.stepbackward=function(){momentIndex=momentIndex>0?momentIndex-2:momentIndex,momentIndex<0&&(momentIndex=0),clearInterval(animationFrame),onFrame(!0)},$scope.stepforward=function(){momentIndex=momentIndex<data.moments.length-1?momentIndex+1:data.moments.length-1,clearInterval(animationFrame),onFrame(!0)},$scope.getFeed=function(params){var url="/stats/locations_getmoments/";$scope.isLoading=!0,momentIndex=0,$http({method:"GET",url:url,params:params}).success(function(response,status){return data=response,0===data.moments.length?(console.log("no data in momments array",params),$scope.noData=!0,$scope.isLoading=!1,void broadcastFinished()):(parseData(data),$scope.isLoading=!1,momentIndex=0,$scope.play(),void setTimeout(onResize,100))}).error(function(response,status){console.log("error",response,status),$scope.noData=!0,$scope.isLoading=!1,broadcastFinished()})},$scope.$watch("selectedItem",function(item){if(item&&item.ei&&item.gi){$scope.description=item.dsc;var params={gameid:item.gi,eventid:item.ei};$scope.getFeed(params)}}),$location.search().GameEventID){var params={gameid:$location.search().GameID,eventid:$location.search().GameEventID};$scope.getFeed(params)}var onResize=function(){var width=$scope.svg.elm.width();$scope.svg.elm.attr("width",width),$scope.svg.elm.attr("height",width*$scope.svg.aspect)};setTimeout(onResize,100),$(window).resize(onResize)}]),function(){function PlayerCareerCtrl($scope,$location,SplitsService,PlayerCareerService){function getStats(){$scope.isLoading=!0,PlayerCareerService.get($scope.params).then(function(datasets){$scope.isLoading=!1,$scope.datasets=datasets,$scope.regularRankings.datatable=$scope.datasets[4].datatable})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.datasets={},$scope.regularRankings={datatable:{}},$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){$scope.Player=playerInfo;var config=SplitsService.get(["LeagueID",{name:"PerMode",include:[{val:"Per36",text:"Per 36 Minutes"}],without:["Per48"]}]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerID=playerInfo.PERSON_ID,getStats()}}),$scope.switchPerMode=function(mode){$scope.params.PerMode=mode,$scope.regularRankings.datatable.limit=null,$location.search("PerMode",mode),getStats()}}stats.controller("PlayerCareerCtrl",PlayerCareerCtrl),PlayerCareerCtrl.$inject=["$scope","$location","SplitsService","PlayerCareerService"]}(),function(){function PlayerGameLogsCtrl($scope,$filter,SplitsService,SEASONS,PlayerGamelogService){function getStats(){$scope.isLoading=!0,$scope.noData=!1,PlayerGamelogService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets.PlayerGameLog.datatable.length,$scope.isLoading=!1})}$scope.noData=!1,$scope.isLoading=!0,$scope.showSplits=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){playerInfo.TO_YEAR=+playerInfo.TO_YEAR,playerInfo.FROM_YEAR=+playerInfo.FROM_YEAR;var config=SplitsService.get(["LeagueID",{name:"Season",initial:$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerGamelogs.SeasonYear)),seasonRange:[playerInfo.FROM_YEAR,playerInfo.TO_YEAR],includeBefore:[{val:"ALL",text:"All"}]},{name:"SeasonType",initial:SEASONS.playerGamelogs.SeasonType},"DateFrom","DateTo"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerID=playerInfo.PERSON_ID,getStats()}})}stats.controller("PlayerGameLogsCtrl",PlayerGameLogsCtrl),PlayerGameLogsCtrl.$inject=["$scope","$filter","SplitsService","SEASONS","PlayerGamelogService"]}(),stats.controller("PlayerHighsCtrl",["$scope","$location","Splits","StatsRequest","$routeParams","FEEDS_CONFIG","$http",function($scope,$location,Splits,StatsRequest,$routeParams,FEEDS_CONFIG,$http){"use strict";function getSeasonNCareerHighs(){$scope.isLoading=!0,StatsRequest.get(feedurl,"",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.isLoading=!1;for(var careerHighs=datasets.CareerHighs.datatable,seasonHighs=datasets.SeasonHighs.datatable,i=0,len=categories.Traditional.length;i<len;i++){categories.Traditional[i].datasetCareer=[],categories.Traditional[i].datasetSeason=[];for(var j=0,len2=careerHighs.length;j<len2;j++)categories.Traditional[i].stat===careerHighs[j].STAT&&categories.Traditional[i].datasetCareer.push(careerHighs[j]);for(var k=0,len3=seasonHighs.length;k<len3;k++)categories.Traditional[i].stat===seasonHighs[k].STAT&&categories.Traditional[i].datasetSeason.push(seasonHighs[k])}$scope.cats=categories.Traditional,$scope.limit=$scope.cats.length/2})}var feedurl="playerProfile2";$scope.params={MeasureType:"Base",LeagueID:"00",PlayerID:$routeParams.PlayerID,SeasonType:["Regular Season","Playoffs"],GraphStartSeason:"2013-14",GraphEndSeason:"2013-14",GraphStat:"PTS",PerMode:"PerGame"},$scope.moreStats=!1,$scope.showMoreStats=function(){$scope.moreStats=!0},$scope.showLessStats=function(){$scope.moreStats=!1};var categories={Traditional:[{display:"Points ",stat:"PTS",isShown:!0,format:"number",param:1},{display:"Rebounds ",stat:"REB",isShown:!0,format:"number",param:1},{display:"Assists ",stat:"AST",isShown:!0,format:"number",param:1},{display:"Steals ",stat:"STL",isShown:!0,format:"number",param:2},{display:"Field Goals Made",stat:"FGM",isShown:!1,format:"percent"},{display:"Free Throws Made",stat:"FTM",isShown:!1,format:"percent"},{display:"Three Pointers Made",stat:"FG3M",isShown:!1,format:"percent"},{display:"Blocks ",stat:"BLK",isShown:!1,format:"number",param:2}]};getSeasonNCareerHighs()}]),function(){function PlayerNavCtrl($scope,$location,$route,$filter){function setSelectedPage(){$scope.pages&&($scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0])}$scope.$on("$routeChangeSuccess",function(event,routeData){setSelectedPage()}),$scope.showStats=!1,$scope.showGamelogs=!1,$scope.showTracking=!1,$scope.tabCount=7;var pages=[{page:"profile",path:"",text:"Stats Profile",type:"profile"},{page:"fantasy",path:"fantasy",text:"Fantasy Profile",type:"profile"},{page:"statsTraditional",path:"stats/",text:"Stats Traditional",type:"stat"},{page:"statsAdvanced",path:"stats/advanced/",text:"Stats Advanced",type:"stat"},{page:"statsMisc",path:"stats/misc/",text:"Stats Misc",type:"stat"},{page:"statsScoring",path:"stats/scoring/",text:"Stats Scoring",type:"stat"},{page:"statsUsage",path:"stats/usage/",text:"Stats Usage",type:"stat"},{page:"career",path:"career/",text:"Career"},{page:"vs",path:"vs/",text:"Comparison"},{page:"gamelogs",path:"gamelogs/",text:"GameLogs",type:"gamelogs"},{page:"trackingShots",path:"tracking/shots/",text:"Tracking Shots",type:"tracking"},{page:"trackingRebounds",path:"tracking/rebounds/",text:"Tracking Rebounds",type:"tracking"},{page:"trackingPasses",path:"tracking/passes/",text:"Tracking Passes",type:"tracking"},{page:"trackingDefense",path:"tracking/defense/",text:"Tracking Defense",type:"tracking"}];$scope.onNavChange=function(){$location.path($scope.PlayerID+"/"+$scope.selected.path)},$scope.$watch("availableStats",function(availableStats){availableStats&&($scope.tabCount=7,$scope.tabCount-=availableStats.current?0:2,$scope.tabCount-=availableStats.stats?0:1,$scope.tabCount-=availableStats.tracking?0:1,$scope.tabCount-=availableStats.gamelogs?0:1,$scope.pages=pages.slice(0),availableStats.stats||($scope.pages=$filter("filter")($scope.pages,{type:"!stat"})),availableStats.tracking||($scope.pages=$filter("filter")($scope.pages,{type:"!tracking"})),availableStats.gamelogs||($scope.pages=$filter("filter")($scope.pages,{type:"!gamelogs"})),setSelectedPage())})}angular.module("stats").controller("PlayerNavCtrl",PlayerNavCtrl),PlayerNavCtrl.$inject=["$scope","$location","$route","$filter"]}(),function(){function PlayerFantasyController($scope,$anchorScroll,$filter,$location,$routeParams,$sce,PlayerNewsService,SEASONS,PlayerFantasySplitsService,PlayerFantasyBarGraphService,PlayerUpcomingGamesService){function getPlayerNews(){$scope.isLoading=!0,$scope.hasNews=!0,PlayerNewsService.get($scope.PlayerID).then(function(data){return $scope.isLoading=!1,data?($scope.news=data,$scope.topNews=$scope.news.slice(0,3),void($scope.bottomNews=$scope.news.slice(3,9))):void($scope.hasNews=!1)})}function getStats(){$scope.isLoading=!0,$scope.hasStatData=!0,PlayerFantasySplitsService.get($scope.params).then(function(datasets){$scope.isLoading=!1,datasets&&datasets[0]&&datasets[0].datatable.length||($scope.hasStatData=!1),$scope.datasets=datasets})}function getBarGraphStats(){$scope.hasChartData=!0,PlayerFantasyBarGraphService.get($scope.params).then(function(data){return data&&data.SeasonAvg.datatable.length?($scope.charts=parseChartData(data),void($scope.inViewportOptions={delay:500,callback:function($elm){var $season=$elm.find(".player-charts__category__bar--season"),$lastfive=$elm.find(".player-charts__category__bar--last-five");$season.css("height",$season.data("bar-height")),$lastfive.css("height",$lastfive.data("bar-height"))}})):void($scope.hasChartData=!1)})}function getUpcomingGames(){var params={LeagueID:"00",PlayerID:$scope.PlayerID,Season:SEASONS.playerUpcomingGames.Season,SeasonType:SEASONS.playerUpcomingGames.SeasonType,NumberOfGames:4};$scope.hasUpcomingGames=!0,PlayerUpcomingGamesService.get(params).then(function(data){$scope.upcomingGames=data.NextNGames.datatable.map(parseUpcomingGameData)})}function setPerMode(mode){$scope.params.PerMode=mode,$location.search("PerMode",mode),getStats()}function getChartHeight(a,b){return a/(a+b)*$scope.maxBarHeight+"px"}function parseUpcomingGameData(game){return game.isHome=game.HOME_TEAM_ID==$scope.playerInfo.TEAM_ID,game}function parseChartData(results){var season=results.SeasonAvg.datatable[0],last5=results.LastFiveGamesAvg.datatable[0],charts=[[{label:"fanduel",val:[season.FAN_DUEL_PTS,last5.FAN_DUEL_PTS]},{label:"ppg",val:[season.PTS,last5.PTS]},{label:"rpg",val:[season.REB,last5.REB]},{label:"apg",val:[season.AST,last5.AST]},{label:"3pm",val:[season.FG3M,last5.FG3M]}],[{label:"ft%",val:[100*season.FT_PCT,100*last5.FT_PCT]},{label:"stl",val:[season.STL,last5.STL]},{label:"blk",val:[season.BLK,last5.BLK]},{label:"tov",val:[season.TOV,last5.TOV]},{label:"fg%",val:[100*season.FG_PCT,100*last5.FG_PCT]}]];return charts}function scrollToMoreNews(){$location.hash("more-news"),$anchorScroll()}$scope.PlayerID=$routeParams.PlayerID,$scope.isLoading=!0,$scope.hasStatData=!1,$scope.hasNews=!1,$scope.hasChartData=!1,$scope.hasUpcomingGames=!1,$scope.setPerMode=setPerMode,$scope.maxBarHeight=160,$scope.getChartHeight=getChartHeight,$scope.scrollToMoreNews=scrollToMoreNews,$scope.params={MeasureType:"Base",LeagueID:"00",PlayerID:$scope.PlayerID,Season:SEASONS.playerFantasy.Season,SeasonType:SEASONS.playerFantasy.SeasonType,PerMode:$location.search().PerMode||"PerGame",PlusMinus:"N",PaceAdjust:"N",Rank:"N",Outcome:"",Location:"",Month:0,SeasonSegment:"",OpponentTeamID:0,VsConference:"",VsDivision:"",GameSegment:"",Period:0,LastNGames:0,DateFrom:"",DateTo:"",PORound:0,ShotClockRange:""},$scope.$watch("playerInfo",function(playerInfo){playerInfo&&($scope.playerInfo=playerInfo,getPlayerNews(),getStats(),getBarGraphStats(),getUpcomingGames())})}stats.controller("PlayerFantasyController",PlayerFantasyController),PlayerFantasyController.$inject=["$scope","$anchorScroll","$filter","$location","$routeParams","$sce","PlayerNewsService","SEASONS","PlayerFantasySplitsService","PlayerFantasyBarGraphService","PlayerUpcomingGamesService"]}(),function(){function PlayerNewsCtrl($scope,$http,$location,CMSENV){function getPlayerNews(){$http({method:"GET",url:CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/?playerId="+$location.search().PlayerID}).then(function(response){$scope.isLoading=!1;var stories=response.data.PlayerRotowires;$scope.params.FirstName=stories[0].FirstName,$scope.params.LastName=stories[0].LastName,$scope.stories=stories})}$scope.isLoading=!0,$scope.params={FirstName:"",LastName:""},getPlayerNews()}stats.controller("PlayerNewsCtrl",PlayerNewsCtrl),PlayerNewsCtrl.$inject=["$scope","$http","$location","CMSENV"]}(),function(){function PlayerProfileCtrl($scope,$http,$location,$routeParams,$sce,CMSENV,Splits,StatsRequest,FEEDS_CONFIG){function getSummaryInfo(){StatsRequest.get("playerSummary","",$scope.params).then(function(){var testTwo=StatsRequest.getData();$scope.playerInfo=testTwo.CommonPlayerInfo.datatable[0];var dob=new Date($scope.playerInfo.BIRTHDATE),today=new Date,ageDifMs=today.getTime()-dob.getTime(),ageDate=new Date(ageDifMs),lastbirthday=$scope.playerInfo.BIRTHDATE.replace(/^\d\d\d\d/,(new Date).getFullYear()),bday=new Date(lastbirthday);today<bday&&bday.setFullYear((new Date).getFullYear()-1);var daydiff=Math.floor(Math.abs(+bday-+today)/864e5);$scope.playerInfo.AGE=Math.abs(ageDate.getUTCFullYear()-1970),$scope.playerInfo.AGE_DAYS=("000"+daydiff).substr(-3)})}function getPlayerNews(){$http({method:"GET",url:CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/?playerId="+$routeParams.PlayerID+"&limit=2"}).then(function(response){$scope.stories=response.data.PlayerRotowires,$scope.isLoading=!1})}$scope.showMoreStats=function(array){array.limit=1},$scope.rankingLimit=1,$scope.params={MeasureType:"Base",LeagueID:"00",PlayerID:$routeParams.PlayerID,SeasonType:["Regular Season","Playoffs"],GraphStartSeason:"2013-14",GraphEndSeason:"2013-14",GraphStat:"PTS",PerMode:"PerGame"},getSummaryInfo(),getPlayerNews()}stats.controller("PlayerProfileCtrl",PlayerProfileCtrl),PlayerProfileCtrl.$inject=["$scope","$http","$location","$routeParams","$sce","CMSENV","Splits","StatsRequest","FEEDS_CONFIG"]}(),function(){function ProfileAwardsCtrl($scope,$location,$routeParams,PlayerAwardsService){function getAwards(params){PlayerAwardsService.get(params).then(function(awards){$scope.awards=awards,$scope.cleanList=[],$scope.playerAwards=[];for(var i=0;i<$scope.awards.length;i++)if(!($scope.cleanList.indexOf($scope.awards[i].DESCRIPTION)>-1))if("All-NBA"==$scope.awards[i].DESCRIPTION){if($scope.cleanList.indexOf($scope.awards[i].DESCRIPTION+" 1st Team")>-1)continue;if(1==$scope.awards[i].ALL_NBA_TEAM_NUMBER)$scope.cleanList.push($scope.awards[i].DESCRIPTION+" 1st Team");else{if($scope.cleanList.indexOf($scope.awards[i].DESCRIPTION+" 2nd Team")>-1)continue;
if(2==$scope.awards[i].ALL_NBA_TEAM_NUMBER)$scope.cleanList.push($scope.awards[i].DESCRIPTION+" 2nd Team");else{if($scope.cleanList.indexOf($scope.awards[i].DESCRIPTION+" 3rd Team")>-1)continue;3==$scope.awards[i].ALL_NBA_TEAM_NUMBER&&$scope.cleanList.push($scope.awards[i].DESCRIPTION+" 3rd Team")}}}else"All-Rookie Team"==$scope.awards[i].DESCRIPTION?1==$scope.awards[i].ALL_NBA_TEAM_NUMBER&&$scope.cleanList.push($scope.awards[i].DESCRIPTION+" 1st Team"):$scope.cleanList.push($scope.awards[i].DESCRIPTION);for(var i=0;i<$scope.cleanList.length;i++){for(var count=0,j=0;j<$scope.awards.length;j++)"All-NBA 1st Team"==$scope.cleanList[i]&&"All-NBA"==$scope.awards[j].DESCRIPTION?1==$scope.awards[j].ALL_NBA_TEAM_NUMBER&&count++:"All-NBA 2nd Team"==$scope.cleanList[i]&&"All-NBA"==$scope.awards[j].DESCRIPTION?2==$scope.awards[j].ALL_NBA_TEAM_NUMBER&&count++:"All-NBA 3rd Team"==$scope.cleanList[i]&&"All-NBA"==$scope.awards[j].DESCRIPTION?3==$scope.awards[j].ALL_NBA_TEAM_NUMBER&&count++:"All-Rookie Team 1st Team"==$scope.cleanList[i]&&"All-Rookie Team"==$scope.awards[j].DESCRIPTION?1==$scope.awards[j].ALL_NBA_TEAM_NUMBER&&count++:$scope.cleanList[i]==$scope.awards[j].DESCRIPTION&&count++;var myObj={award:$scope.cleanList[i],count:count};$scope.playerAwards.push(myObj)}$scope.totalRows=$scope.playerAwards.length,$scope.rowsPerPage=10,$scope.currentPage=1,$scope.totalPages=Math.ceil($scope.totalRows/$scope.rowsPerPage),$scope.rows=$scope.playerAwards.slice(0)})}function pageChange(e){if($scope.rows){var alpha=($scope.currentPage-1)*$scope.rowsPerPage,omega=alpha+$scope.rowsPerPage;$scope.page=$scope.rows.slice(alpha,omega)}}function prevPage(e){1!=$scope.currentPage&&($scope.currentPage-=1)}function nextPage(e){$scope.currentPage!=$scope.totalPages&&($scope.currentPage+=1)}$scope.prevPage=prevPage,$scope.nextPage=nextPage,$scope.currentPage=0,$scope.$watch("currentPage",pageChange),$scope.$on("$routeChangeSuccess",function(event,route){var params={PlayerID:$routeParams.PlayerID};getAwards(params)})}stats.controller("ProfileAwardsCtrl",ProfileAwardsCtrl),ProfileAwardsCtrl.$inject=["$scope","$location","$routeParams","PlayerAwardsService"]}(),stats.controller("PlayerStatsAdvancedCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest",function($scope,$location,$filter,Splits,SEASONS,StatsRequest){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length&&"Playoffs"==$scope.splits.SeasonType.selected.val,$scope.noData=!$scope.datasets[0].datatable.length,$scope.isLoading=!1})}if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"playerGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"playerOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"playerLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"playerInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"playerClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"playerTeamPerformance"},{name:"Year Over Year Splits",val:"yoy",url:"playerYearOverYear"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerStats.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerStats.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerStats.SeasonType},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PORound","ShotClockRange"]),$scope.params={MeasureType:"Advanced",LeagueID:"00",PlayerID:playerInfo.PERSON_ID,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val},getStats()}})}]),stats.controller("PlayerStatsBaseCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest",function($scope,$location,$filter,Splits,SEASONS,StatsRequest){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length&&"Playoffs"==$scope.splits.SeasonType.selected.val,$scope.noData=!$scope.datasets[0].datatable.length,$scope.isLoading=!1})}if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"playerGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"playerOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"playerLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"playerInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"playerClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"playerTeamPerformance"},{name:"Year Over Year Splits",val:"yoy",url:"playerYearOverYear"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){$scope.availableStats.stats||$location.path($scope.PlayerID+"/career/");var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerStats.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerStats.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PORound","ShotClockRange"]),$scope.params={MeasureType:"Base",LeagueID:"00",PlayerID:playerInfo.PERSON_ID,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val},getStats()}})}]),stats.controller("PlayerStatsMiscCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest",function($scope,$location,$filter,Splits,SEASONS,StatsRequest){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length&&"Playoffs"==$scope.splits.SeasonType.selected.val,$scope.noData=!$scope.datasets[0].datatable.length,$scope.isLoading=!1})}if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"playerGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"playerOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"playerLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"playerInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"playerClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"playerTeamPerformance"},{name:"Year Over Year Splits",val:"yoy",url:"playerYearOverYear"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerStats.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerStats.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerStats.SeasonType},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PORound","ShotClockRange"]),$scope.params={MeasureType:"Misc",LeagueID:"00",PlayerID:playerInfo.PERSON_ID,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val},getStats()}})}]),stats.controller("PlayerStatsScoringCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest",function($scope,$location,$filter,Splits,SEASONS,StatsRequest){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length&&"Playoffs"==$scope.splits.SeasonType.selected.val,$scope.noData=!$scope.datasets[0].datatable.length,$scope.isLoading=!1})}if($scope.isLoading=!0,$scope.showSplits=!1,$scope.hasData=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"playerGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"playerOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"playerLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"playerInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"playerClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"playerTeamPerformance"},{name:"Year Over Year Splits",val:"yoy",url:"playerYearOverYear"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerStats.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerStats.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerStats.SeasonType},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PORound","ShotClockRange"]),$scope.params={MeasureType:"Scoring",LeagueID:"00",PlayerID:playerInfo.PERSON_ID,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val},getStats()}})}]),stats.controller("PlayerStatsShootingCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest",function($scope,$location,$filter,Splits,SEASONS,StatsRequest){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("playerShooting","",$scope.params).then(function(){var ds=StatsRequest.getResults();$scope.datasets=ds.slice(0,ds.length-1),$scope.assists=ds.slice(-1),$scope.noData=0===$scope.datasets[0].rowSet.length&&"Playoffs"==$scope.splits.SeasonType.selected.val,$scope.noData=!$scope.datasets[0].datatable.length,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerStats.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerStats.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerStats.SeasonType},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PORound","ShotClockRange"]),$scope.params={MeasureType:"Base",LeagueID:"00",PlayerID:playerInfo.PERSON_ID,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val},getStats()}})}]),stats.controller("PlayerStatsUsageCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest",function($scope,$location,$filter,Splits,SEASONS,StatsRequest){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length&&"Playoffs"==$scope.splits.SeasonType.selected.val,$scope.noData=!$scope.datasets[0].datatable.length,$scope.isLoading=!1})}if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"playerGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"playerOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"playerLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"playerInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"playerClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"playerTeamPerformance"},{name:"Year Over Year Splits",val:"yoy",url:"playerYearOverYear"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerStats.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerStats.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerStats.SeasonType},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo","PORound","ShotClockRange"]),$scope.params={MeasureType:"Usage",LeagueID:"00",PlayerID:playerInfo.PERSON_ID,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val},getStats()}})}]),stats.controller("PlayerSummaryCtrl",["$scope","$location","$routeParams","PlayerSummaryService","SEASONS",function($scope,$location,$routeParams,PlayerSummaryService,SEASONS){"use strict";function getStats(){$scope.isLoading=!0,PlayerSummaryService.get($scope.params).then(function(player){$scope.playerInfo=player.playerInfo,$scope.playerIsActive=player.playerInfo.TO_YEAR>=SEASONS.site.SeasonYear,$scope.playerHeadlineStats=player.headlineStats,$scope.PlayerCode=player.playerInfo.PLAYERCODE,$scope.availableStats=player.availableStats,$scope.ai=$scope.playerInfo,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.isVersus=$location.path().indexOf("vs")>0,$scope.$on("$routeChangeSuccess",function(event,routeData){$routeParams.PlayerID&&$routeParams.PlayerID!=$scope.PlayerID&&($scope.PlayerID=$routeParams.PlayerID,$scope.params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:$scope.PlayerID},getStats())})}]),stats.controller("PlayerTrackingDefenseCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("playerTrackingDefense","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.DefendingShots.datatable.length?($scope.noData=!0,$scope.datasets=[]):($scope.noData=!1,$scope.datasets=[{name:"DefendingShots",datatable:data.DefendingShots.datatable}]),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.errors={emptyData:!1},$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var _playerName=playerInfo.DISPLAY_FIRST_LAST,_section="(Defense)",_newPageTitle=["Player Tracking for",_playerName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle);var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerTracking.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerTracking.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerTracking.SeasonType,without:["Pre Season"]},"PerMode","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateTo","DateFrom"]),$scope.params={LeagueID:"00",PlayerID:playerInfo.PERSON_ID,TeamID:0,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val},getStats()}})}]),stats.controller("PlayerTrackingLogsReboundsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("playerTrackingLogRebounds","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.PtRebLog.datatable.length?($scope.noData=!0,$scope.datasets=[]):($scope.noData=!1,$scope.datasets=[{name:"PtRebLog",datatable:data.PtRebLog.datatable}]),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.errors={emptyData:!1},$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var _playerName=playerInfo.DISPLAY_FIRST_LAST,_section="(Rebound Logs)",_newPageTitle=["Player Tracking for",_playerName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle);var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerTracking.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerTracking.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerTracking.SeasonType,without:["Pre Season"]},"Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateTo","DateFrom"]),$scope.params={LeagueID:"00",PlayerID:playerInfo.PERSON_ID,TeamID:0,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val},getStats()}})}]),stats.controller("PlayerTrackingLogsShotsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("playerTrackingLogShots","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.PtShotLog.datatable.length?($scope.noData=!0,$scope.datasets=[]):($scope.noData=!1,$scope.datasets=[{name:"PtShotLog",datatable:data.PtShotLog.datatable}]),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.errors={emptyData:!1},$scope.$on("runit",function(event){getStats()}),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var _playerName=playerInfo.DISPLAY_FIRST_LAST,_section="(Shot Logs)",_newPageTitle=["Player Tracking for",_playerName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle);var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerTracking.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerTracking.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerTracking.SeasonType,without:["Pre Season"]},"Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateTo","DateFrom"]),$scope.params={LeagueID:"00",PlayerID:playerInfo.PERSON_ID,TeamID:0,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val},getStats()}})}]),stats.controller("PlayerTrackingPassesCtrl",["$scope","$filter","Splits","SEASONS","PlayerTrackingDashPassesService","SEOFactory",function($scope,$filter,Splits,SEASONS,PlayerTrackingDashPassesService,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,PlayerTrackingDashPassesService.get($scope.params).then(function(datasets){$scope.noData=!1,$scope.datasets=datasets,0!==datasets[0].datatable.length&&0!==datasets[0].datatable.length||($scope.noData=!0,$scope.datasets=[]),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.errors={emptyData:!1},$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var _playerName=playerInfo.DISPLAY_FIRST_LAST,_section="(Passes)",_newPageTitle=["Player Tracking for",_playerName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle);var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerTracking.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerTracking.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerTracking.SeasonType,without:["Pre Season"]},"PerMode","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","LastNGames","GameSegment","Period","DateFrom","DateTo"]),$scope.params={LeagueID:"00",PlayerID:playerInfo.PERSON_ID,TeamID:0,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val},getStats()}})}]),stats.controller("PlayerTrackingReboundsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("playerTrackingRebounds","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.OverallRebounding.datatable.length?($scope.noData=!0,$scope.datasets=[]):($scope.noData=!1,$scope.datasets=[{name:"OverallRebounding",datatable:data.OverallRebounding.datatable},{name:"NumContestedRebounding",datatable:data.NumContestedRebounding.datatable},{name:"RebDistanceRebounding",datatable:data.RebDistanceRebounding.datatable},{name:"ShotDistanceRebounding",datatable:data.ShotDistanceRebounding.datatable},{name:"ShotTypeRebounding",datatable:data.ShotTypeRebounding.datatable}]),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.errors={emptyData:!1},$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var _playerName=playerInfo.DISPLAY_FIRST_LAST,_section="(Rebounds)",_newPageTitle=["Player Tracking for",_playerName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle);var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerTracking.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerTracking.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,
void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerTracking.SeasonType,without:["Pre Season"]},"PerMode","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateTo","DateFrom"]),$scope.params={LeagueID:"00",PlayerID:playerInfo.PERSON_ID,TeamID:0,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val},getStats()}})}]),stats.controller("PlayerTrackingShotsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,$scope.noData=!1,StatsRequest.get("playerTrackingShots","",$scope.params).then(function(){$scope.isLoading=!1;var data=StatsRequest.getData();return 0===data.Overall.datatable.length?($scope.noData=!0,void($scope.datasets=[])):void($scope.datasets=[{name:"Overall",datatable:data.Overall.datatable},{name:"GeneralShooting",datatable:data.GeneralShooting.datatable},{name:"ShotClockShooting",datatable:data.ShotClockShooting.datatable},{name:"DribbleShooting",datatable:data.DribbleShooting.datatable},{name:"ClosestDefenderShooting",datatable:data.ClosestDefenderShooting.datatable},{name:"ClosestDefender10ftPlusShooting",datatable:data.ClosestDefender10ftPlusShooting.datatable},{name:"TouchTimeShooting",datatable:data.TouchTimeShooting.datatable}])})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.errors={emptyData:!1},$scope.$on("runit",function(event){getStats()}),$scope.$watch("playerInfo",function(playerInfo){if(playerInfo){var _playerName=playerInfo.DISPLAY_FIRST_LAST,_section="(Shots)",_newPageTitle=["Player Tracking for",_playerName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle);var initial=$filter("seasonyear")(Math.min(playerInfo.TO_YEAR,SEASONS.playerTracking.SeasonYear)),range=[Math.max(playerInfo.FROM_YEAR,SEASONS.playerTracking.SeasonYearFrom),playerInfo.TO_YEAR];if(range[0]>range[1])return $scope.noData=!0,void($scope.isLoading=!1);$scope.splits=Splits.get([{name:"Season",initial:initial,seasonRange:range},{name:"SeasonType",initial:SEASONS.playerTracking.SeasonType,without:["Pre Season"]},"PerMode","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateTo","DateFrom"]),$scope.params={LeagueID:"00",PlayerID:playerInfo.PERSON_ID,TeamID:0,Season:$scope.splits.Season.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val},getStats()}})}]),function(){function PlayerListCtrl($scope,$filter,$location,$timeout,SEASONS,PlayerListService){function onlyInitialFn(letter){0===$scope.search.player.length&&0===$scope.search.team.length&&($scope.selectedLetter=$scope.selectedLetter==letter?"":letter),$scope.letters=$scope.onlyActive?playersActiveGrouped.slice(0):playersAllGrouped.slice(0),$scope.search.player="",$scope.search.team="",$scope.listShown=""!==$scope.selectedLetter}function shouldHideLetterFn(letter){return 0===letter.items.length||""!==$scope.selectedLetter&&$scope.selectedLetter!=letter.initial}function closeListFn(){$scope.letters=$scope.onlyActive?playersActiveGrouped.slice(0):playersAllGrouped.slice(0),$scope.search.player="",$scope.search.team="",$scope.selectedLetter="",$scope.listShown=!1}function onlyActiveFn(onlyActive){0===$scope.search.player.length&&0===$scope.search.team.length&&($scope.listShown=0===$scope.search.length),$scope.search.player="",$scope.search.team="",$scope.letters=onlyActive?playersActiveGrouped:playersAllGrouped}function searchPlayerFn(search,prevSearch,scope){if(playersAllGrouped&&void 0!==search){if($scope.letters=$scope.onlyActive?playersActiveGrouped.slice(0):playersAllGrouped.slice(0),$scope.search.team="",$scope.selectedLetter="",search.length>=3){for(var i in $scope.letters){var items=[];items=$filter("filter")($scope.letters[i].items,{DISPLAY_LAST_COMMA_FIRST:search},!1),$scope.letters[i]={initial:$scope.letters[i].initial,items:items}}$scope.listShown=!0}search.length<3&&($scope.listShown=!1)}}function searchTeamFn(search,prevSearch,scope){if(playersAllGrouped&&void 0!==search){if($scope.letters=$scope.onlyActive?playersActiveGrouped.slice(0):playersAllGrouped.slice(0),$scope.search.player="",$scope.selectedLetter="",search.length>=3){for(var i in $scope.letters)for(var i in $scope.letters){var items=[],_teamAbbr=$filter("filter")($scope.letters[i].items,{TEAM_ABBREVIATION:search},!1),_teamName=$filter("filter")($scope.letters[i].items,{TEAM_NAME:search},!1),_teamCity=$filter("filter")($scope.letters[i].items,{TEAM_CITY:search},!1);_teamAbbr.length&&(items=_teamAbbr),_teamName.length&&(items=_teamName),_teamCity.length&&(items=_teamCity),$scope.letters[i]={initial:$scope.letters[i].initial,items:items}}$scope.listShown=!0}search.length<3&&($scope.listShown=!1)}}function SortByInitial(a,b){return a.initial>b.initial?1:-1}var playersActive,playersActiveGrouped,playersAll,playersAllGrouped;$scope.alphabet="A B C D E F G H I J K L M N O P Q R S T U V W X Y Z".split(" "),$scope.isLoading=!0,$scope.onlyActive=!$location.search().historic,$scope.selectedLetter="",$scope.listShown=!1,$scope.onlyInitial=onlyInitialFn,$scope.shouldHideLetter=shouldHideLetterFn,$scope.closeList=closeListFn,$scope.search={player:"",team:""},$scope.$watch("onlyActive",onlyActiveFn),$scope.$watch("search.team",searchTeamFn),$scope.$watch("search.player",searchPlayerFn);var params={Season:SEASONS.playerList.Season,LeagueID:"00",IsOnlyCurrentSeason:"0"};PlayerListService.get(params).then(function(leaguePlayers){$scope.isLoading=!1,$scope.search.player=$location.search().player||"",playersAll=leaguePlayers,playersActive=$filter("filter")(playersAll,{ROSTERSTATUS:1}),playersAllGrouped=$filter("byLetter")(playersAll,"DISPLAY_LAST_COMMA_FIRST").sort(SortByInitial),playersActiveGrouped=$filter("byLetter")(playersActive,"DISPLAY_LAST_COMMA_FIRST").sort(SortByInitial),$scope.letters=playersActiveGrouped})}stats.controller("PlayerListCtrl",PlayerListCtrl),PlayerListCtrl.$inject=["$scope","$filter","$location","$timeout","SEASONS","PlayerListService"]}(),stats.controller("PlaylistCtrl",["$scope","$element","$http","$location","$filter",function($scope,$element,$http,$location,$filter){"use strict";function parseItem(item){item.teams=item.gc.split("/")[1],item.vtm=item.teams.substr(0,3),item.htm=item.teams.substr(3,3)}$scope.isLoading=!0,$scope.playAll=!0,$scope.currentIndex=0,$scope.selectedItem={};var params={LeagueID:"00",Season:"2013-14",SeasonType:"Regular Season",TeamID:"0",PlayerID:"0",GameID:"",Outcome:"",Location:"",Month:"0",SeasonSegment:"",DateFrom:"",DateTo:"",OpponentTeamID:"0",VsConference:"",VsDivision:"",Position:"",RookieYear:"",GameSegment:"",Period:"0",LastNGames:"0",ClutchTime:"",AheadBehind:"",PointDiff:"",RangeType:"1",StartPeriod:1,EndPeriod:10,StartRange:0,EndRange:0,ContextFilter:"",ContextMeasure:"FG_PCT"},feeds={details:"/stats/videodetails",events:"/stats/videoevents",shotzone:"/stats/videoshotzone",shotzoneContext:"/stats/videoshotzonecontext"},feed="";angular.extend(params,$location.search()),feed=params.ZoneMode?feeds.shotzoneContext:params.GameEventID?feeds.events:params.EventList?feeds.shotzone:feeds.details,$http({method:"GET",url:feed,params:params}).success(function(data){var items=data.resultSets.playlist;items.forEach(parseItem),$scope.items=$filter("filter")(items,{pta:"1"}),$scope.isLoading=!1,$scope.playItem(0)}),$scope.changeItem=function(dir){var i=$scope.currentIndex+dir;i>=0&&i<$scope.items.length&&$scope.playItem(i)},$scope.playItem=function(i){$scope.currentIndex=i,$scope.selectedItem=$scope.items[i]},$scope.$on("finishedPlaying",function(shouldDigest){$scope.changeItem(1),shouldDigest&&$scope.$digest()})}]),function(){function PlayoffsBracketCtrl($scope,$filter,$location,$interval,$rootScope,$routeParams,PlayoffBracketsService,SEASONS,TodaysScoresService){function getTodaysScores(){TodaysScoresService.get().success(function(data){var games=data.gs.g;for(var i in games){var game=games[i],sid=game.gid.substr(0,9),series=$scope.serii[sid];if(series){var sg=$filter("filter")(series.g,{gid:game.gid})[0];angular.extend(sg,game),series.hasLiveGame=2===sg.st}}$scope.hasLiveGame=games.some(function(n){return 2==n.st})})}function makeSeriesArray(rounds){var inRound=function(r){r.co.forEach(inConf)},inConf=function(c,i){c.ser.forEach(inSeries.bind(null,i))},inSeries=function(cid,s,i){s.conf=1===cid?"WEST":"EAST",s.g&&s.g[0]&&(s.sid=s.g[0].gid.substr(0,9),s.round=s.sid.substr(7,1),s.isFinals="4"==s.round,s.season=20+s.sid.substr(3,2),$scope.serii[s.sid]=s)};rounds.forEach(inRound)}function navToSeries(series){if(series&&series.g&&series.g[0]){var seriesid=series.g[0].gid.substr(0,9);$scope.activeSeries=$scope.serii[seriesid],$location.path(seriesid)}}$scope.isOpen=!1,$scope.navToSeries=navToSeries,$scope.hasLiveGame=!1,$scope.updateInterval,$scope.iv=1e4,$scope.serii={},$scope.responsiveOptions={min:300,max:1250},"/"!==document.location.pathname.slice(-1)&&(document.location.pathname+="/"),$scope.$on("$routeChangeSuccess",function(event,newRoute){return newRoute?($scope.SeriesID=newRoute.params.SeriesID,void($scope.isOpen=!!$scope.SeriesID)):void($scope.isOpen=!1)});var season=SEASONS.playoffBracket.SeasonYear;$scope.isBracketLoading=!0,PlayoffBracketsService.get(season).then(function(response){$scope.isBracketLoading=!1,$scope.pb=response.data.pb,makeSeriesArray($scope.pb.r),$scope.activeSeries=$scope.serii[$scope.SeriesID],getTodaysScores(),$scope.updateInterval=$interval(getTodaysScores,$scope.iv)},function(response){window.location.href="/playoffpicture/"})}stats.controller("PlayoffsBracketCtrl",PlayoffsBracketCtrl),PlayoffsBracketCtrl.$inject=["$scope","$filter","$location","$interval","$rootScope","$routeParams","PlayoffBracketsService","SEASONS","TodaysScoresService"]}(),function(){function PlayoffsGameCtrl($scope,$element,$filter,$routeParams,boxscoreSummaryService,SEASONS,TEAMS){function getTeamInfo(){$scope.seed.low.info=$filter("filter")(TEAMS,{id:$scope.lowSeedId},!0)[0],$scope.seed.high.info=$filter("filter")(TEAMS,{id:$scope.highSeedId},!0)[0]}function getStats(){$scope.isLoading=!0,boxscoreSummaryService.get($scope.params).then(function(boxscore){$scope.isLoading=!1,$scope.boxscore=boxscore,$scope.summary=boxscore.summary,$scope.officials=boxscore.officials,$scope.gameInfo=boxscore.gameInfo,$scope.av=boxscore.av,$scope.teams=boxscore.teams,$scope.linescores=boxscore.teams,$scope.otherStats=boxscore.otherStats,$scope.teamInfo=boxscore.teamInfo,$scope.thisSeason=boxscore.season,$scope.seasonYear=parseInt(boxscore.season.substr(0,4),10),$scope.seasonType=boxscore.seasontype})}function onBracketBackClick(){$(window).scrollTo("#nba-playoff-bracket",200)}$scope.seed={low:{},high:{}},$scope.onBracketBackClick=onBracketBackClick,$scope.$watch("activeSeries",function(series){series&&($scope.isBracketLoading=!1,$scope.series=series,$scope.lowSeedId=series.tid2,$scope.highSeedId=series.tid1,$scope.season=series.season,$scope.round=series.round,$scope.SeriesID=series.sid,$scope.Season=$filter("seasonyear")($scope.season),$scope.SeasonType="Regular Season",$scope.params={GameID:$scope.SeriesID.toString()+$routeParams.GameID},getTeamInfo(),getStats())},!0)}stats.controller("PlayoffsGameCtrl",PlayoffsGameCtrl),PlayoffsGameCtrl.$inject=["$scope","$element","$filter","$routeParams","boxscoreSummaryService","SEASONS","TEAMS"]}(),function(){function PlayoffsPictureCtrl($scope,SEASONS,PlayoffPictureService){function getStats(){$scope.isLoading=!0,PlayoffPictureService.get($scope.params).then(function(data){$scope.datasets=data,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.activeTab="East",$scope.showRules=!IS_MOBILE,$scope.params={LeagueID:SEASONS.site.LeagueID,SeasonID:"2"+SEASONS.site.SeasonYear.toString()},getStats();var s=document.createElement("script");s.src="http://i.cdn.turner.com/ads/nba/nba_standings_playoffpictures.js",document.body.appendChild(s)}stats.controller("PlayoffsPictureCtrl",PlayoffsPictureCtrl),PlayoffsPictureCtrl.$inject=["$scope","SEASONS","PlayoffPictureService"]}(),function(){function PlayoffsPreviewCtrl($scope,$element,$filter,$rootScope,LeaguePlayerGeneralService,LeagueTeamGeneralService,SplitsService,TrackingDataService,TEAMS){function getTeamInfo(){$scope.seed.low.info=$filter("filter")(TEAMS,{id:$scope.lowSeedId})[0],$scope.seed.high.info=$filter("filter")(TEAMS,{id:$scope.highSeedId})[0]}function getPlayerBaseStats(){$scope.isPlayerBaseLoading=!0;var params=angular.extend({},config.params,{MeasureType:"Base"});LeaguePlayerGeneralService.get(params).then(function(data){$scope.isPlayerBaseLoading=!1,$scope.seed.low.playerBase=data.LeagueDashPlayerStats.datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.lowSeedId)),$scope.seed.high.playerBase=data.LeagueDashPlayerStats.datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.highSeedId))})}function getPlayerDefenseStats(){$scope.isPlayerDefLoading=!0;var params=angular.extend({},config.params,{PlayerOrTeam:"Player",PtMeasureType:"Defense"});TrackingDataService.get(params).then(function(data){$scope.isPlayerDefLoading=!1,$scope.seed.low.playerDef=data[0].datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.lowSeedId)),$scope.seed.high.playerDef=data[0].datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.highSeedId))})}function getTeamBaseStats(){$scope.isTeamBaseLoading=!0;var params=angular.extend({},config.params,{MeasureType:"Base"});LeagueTeamGeneralService.get(params).then(function(data){$scope.isTeamBaseLoading=!1,$scope.seed.low.base=data.LeagueDashTeamStats.datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.lowSeedId))[0],$scope.seed.high.base=data.LeagueDashTeamStats.datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.highSeedId))[0]})}function getTeamMiscStats(){$scope.isTeamScoringLoading=!0;var params=angular.extend({},config.params,{MeasureType:"Scoring"});LeagueTeamGeneralService.get(params).then(function(data){$scope.isTeamScoringLoading=!1,$scope.seed.low.scoring=data.LeagueDashTeamStats.datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.lowSeedId))[0],$scope.seed.high.scoring=data.LeagueDashTeamStats.datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.highSeedId))[0]})}function getTeamDefenseStats(){$scope.isTeamDefLoading=!0;var params=angular.extend({},config.params,{PlayerOrTeam:"Team",PtMeasureType:"Defense"});TrackingDataService.get(params).then(function(data){$scope.isTeamDefLoading=!1,$scope.seed.low.def=data[0].datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.lowSeedId))[0],$scope.seed.high.def=data[0].datatable.filter(filterLeagueStatsForTeamId.bind("",$scope.highSeedId))[0]})}function getSeriesDiffChart(){$scope.isDiffLoading=!0;var url="/media/v2/img/playoff-series-diff/"+$scope.SeriesID+"h.png",img=new Image,$img=angular.element(img);$img.on("load",function(){$scope.isDiffLoading=!1,$scope.$apply()}).on("error",function(){$scope.isDiffLoading=!0}),$img.attr("src",url)}function filterLeagueStatsForTeamId(tid,row){return row.TEAM_ID.toString()==tid.toString()}function onBracketBackClick(){$(window).scrollTo("#nba-playoff-bracket",200)}var config=SplitsService.get(["LeagueID","PerMode","GameSegment","Period","PlayerPosition","StarterBench","PlayerExperience","OpponentTeamID","VsConference","VsDivision","Outcome","Location","SeasonSegment","Month","LastNGames","PlusMinus","PaceAdjust","Rank","GameScope","DateFrom","DateTo","ShotClockRange","TeamID","Conference","Division","PORound","DraftYear","DraftPick","College","Country","Height","Weight"]);$scope.seed={low:{},high:{}},$scope.rs={teamBar:{min:300,max:1250},teamPts:{min:300,max:1250},def:{min:300,max:1250}},$scope.onBracketBackClick=onBracketBackClick,$scope.isDiffLoading=!0,$scope.isPlayerBaseLoading=!0,$scope.isPlayerDefLoading=!0,$scope.isTeamBaseLoading=!0,$scope.isTeamDefLoading=!0,$scope.isTeamScoringLoading=!0,$scope.$watch("activeSeries",function(series){series&&($scope.isBracketLoading=!1,$scope.series=series,$scope.lowSeedId=series.tid2,$scope.highSeedId=series.tid1,$scope.season=series.season,$scope.round=series.round,$scope.SeriesID=series.sid,$scope.Season=$filter("seasonyear")($scope.season),$scope.SeasonType="Regular Season",config.params.Season=$scope.Season,config.params.SeasonType=$scope.SeasonType,getTeamInfo(),getPlayerBaseStats(),getPlayerDefenseStats(),getTeamBaseStats(),getTeamMiscStats(),getTeamDefenseStats(),getSeriesDiffChart())},!0)}stats.controller("PlayoffsPreviewCtrl",PlayoffsPreviewCtrl),PlayoffsPreviewCtrl.$inject=["$scope","$element","$filter","$rootScope","LeaguePlayerGeneralService","LeagueTeamGeneralService","SplitsService","TrackingDataService","TEAMS"]}(),function(){function PlayoffsSeriesCtrl($scope,$filter,$interval,$location,$routeParams){$scope.selectedSeries,$scope.isBracketLoading=!0,$scope.$on("$routeChangeSuccess",function(event,newRoute,oldRoute){if(newRoute){var newSeries=newRoute?newRoute.params.SeriesID:null;oldRoute?oldRoute.params.SeriesID:null;$scope.SeriesID=newSeries,$scope.GameID=newRoute.params.GameID,$(window).scrollTo("#playoff-series-content",400)}}),$scope.$watch("activeSeries",function(series){series&&($scope.isBracketLoading=!1,$scope.series=series)},!0)}stats.controller("PlayoffsSeriesCtrl",PlayoffsSeriesCtrl),PlayoffsSeriesCtrl.$inject=["$scope","$filter","$interval","$location","$routeParams"]}(),stats.controller("ScoresCtrl",["$scope","$location","$filter","$http","SEASONS","ScoresService",function($scope,$location,$filter,$http,SEASONS,ScoresService){"use strict";function setStandingsVisibility(date){if(date instanceof Date&&!isNaN(date.valueOf())){var currDate=new Date;currDate.setDate(currDate.getDate()-2),$scope.showStandings=date.getTime()<=currDate.getTime(),console.log("show standings",$scope.showStandings)}}function setDate(adj){var date=new Date($scope.params.gameDate);date.setDate(date.getDate()+adj);var urlDate=$filter("date")(date,"MM/dd/yyyy");setStandingsVisibility(date),$location.path(urlDate)}function getStats(){$scope.isLoading=!0,ScoresService.get($scope.params).then(function(data){$scope.games=data.games,$scope.standings=data.standings,$scope.isLoading=!1,0===$scope.games.length?$scope.noGames=!0:$scope.noGames=!1;var resetTimer=!1;$scope.games.forEach(function(n,i){if(1==$scope.games[i].GAME_STATUS_ID){var getGameTime=data.games[i].GAME_STATUS_TEXT;getGameTime=getGameTime.split(":",1),getGameTime=1*getGameTime+12;var getUTCTime=new Date;getUTCTime=getUTCTime.getUTCHours(),getUTCTime<4&&(getUTCTime+=20);var timerOffset=getUTCTime-getGameTime;timerOffset<5&&timerOffset>0&&(resetTimer=!0)}2==$scope.games[i].GAME_STATUS_ID&&(liveGameStats(),resetTimer=!0)}),resetTimer&&setTimeout(getStats,6e4)})}function liveGameStats(){var getDate=new Date,livescores=(getDate.getFullYear(),"http://data.nba.com/data/5s/v2015/json/mobile_teams/nba/2016/scores/00_todays_scores.json");$http.get(livescores).then(function(data){$scope.lgames=data.data.gs.g}),setTimeout(liveGameStats,6e4)}$scope.isLoading=!0,$scope.noGames=!0,$scope.games=[],$scope.lgames=[],$scope.showCal=!1,$scope.dt=$location.path().slice(1),$scope.format="dd/MM/yyyy",$scope.standingsDate=new Date,$scope.standingsDate=$scope.standingsDate.setDate($scope.standingsDate.getDate()-1),$scope.params={LeagueID:"00",DayOffset:"0",gameDate:""},$scope.changeDate=function(direction){if(!$scope.isLoading){switch(direction){case"next":setDate(1);break;case"prev":setDate(-1);break;default:setDate(1)}callOmniture()}},$scope.$watch("dt",function(newval,oldval){var urlDate=$filter("date")($scope.dt,"MM/dd/yyyy"),date=new Date($scope.dt);setStandingsVisibility(date),$location.path(urlDate)});var referred=document.referrer;$scope.$watch(function(){return $location.path()},function(){if($location.path().slice(1)){$scope.params.gameDate=$location.path().slice(1);var date=$filter("date")($scope.params.gameDate);setStandingsVisibility(date),getStats()}else{var date=new Date;setStandingsVisibility(date);var urlDate=$filter("date")(date,"MM/dd/yyyy");urlDate==$scope.params.gameDate&&(window.location.href=referred),$location.path(urlDate)}})}]),stats.controller("StandingsCtrl",["$scope","$location","$filter","StatsRequest",function($scope,$location,$filter,StatsRequest){"use strict";function setDate(adj){var date=new Date($scope.params.gameDate);date.setDate(date.getDate()+adj);var urlDate=$filter("date")(date,"MM/dd/yyyy");$location.path(urlDate)}function getStats(){$scope.isLoading=!0,StatsRequest.get("scoreboard","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets=[{title:"Eastern Conference",datatable:datasets.EastConfStandingsByDay.datatable},{title:"Western Conference",datatable:datasets.WestConfStandingsByDay.datatable}],$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showCal=!1,$scope.showCal=!1,$scope.dt=$location.path().slice(1),$scope.format="dd/MM/yyyy",$scope.params={LeagueID:"00",DayOffset:"0",gameDate:""},$scope.changeDate=function(direction){if(!$scope.isLoading)switch(direction){case"next":setDate(1);break;case"prev":setDate(-1);break;default:setDate(1)}},$scope.$watch("dt",function(newval,oldval){var urlDate=$filter("date")($scope.dt,"MM/dd/yyyy");$location.path(urlDate)}),$scope.$watch(function(){return $location.path()},function(){if($location.path().slice(1))$scope.params.gameDate=$location.path().slice(1),getStats();else{var date=new Date,urlDate=$filter("date")(date,"MM/dd/yyyy");$location.path(urlDate)}})}]),stats.controller("ShotchartCtrl",["$scope","$element","$location","$filter","browser","ShotchartService",function($scope,$element,$location,$filter,browser,ShotchartService){function getStats(){$scope.isLoading=!0,ShotchartService.get($scope.params).then(function(shotchart){$scope.zones=shotchart.groupedShots,$scope.league=shotchart.groupedLeague,$scope.shots=shotchart.shots,$scope.isLoading=!1,setTimeout(onResize,100)})}function setParams(){for(var i in $location.search()){var param=$location.search()[i];$scope.params[i]=param}}function initOptions(){var mode=$location.search().mode||"Advanced";$scope.zoneMode=$filter("filter")($scope.zoneModes,{value:mode})[0],$scope.showZones="0"!=$location.search().showZones,$scope.showDetails="0"!=$location.search().showDetails,$scope.showShots="1"==$location.search().showShots}function updateURL(){$location.search("mode",$scope.zoneMode.value),$location.search("showZones",$scope.showZones?1:0),$location.search("showDetails",$scope.showDetails?1:0),$location.search("showShots",$scope.showShots?1:0)}$scope.isLoading=!0,$scope.zoneModes=[{label:"Basic Zones",value:"Basic"},{label:"Advanced Zones",value:"Advanced"}],$scope.zoneMode=$scope.zoneModes[1],$scope.showZones=!0,$scope.showDetails=!0,$scope.showShots=!0,$scope.showSplits=!1,$scope.court={margin:{top:15,right:10,bottom:10,left:10},width:478,height:450,rotation:40},$scope.svg={elm:$element.find("svg"),width:$scope.court.width+$scope.court.margin.left+$scope.court.margin.right,height:$scope.court.height+$scope.court.margin.top+$scope.court.margin.bottom},$scope.svg.aspect=$scope.svg.height/$scope.svg.width,$scope.params={PlayerID:"0",Season:"",SeasonType:"",LeagueID:"00",TeamID:"0",GameID:"",Outcome:"",Location:"",Month:"0",SeasonSegment:"",DateFrom:"",DateTo:"",OpponentTeamID:"0",VsConference:"",VsDivision:"",Position:"",PlayerPosition:"",RookieYear:"",GameSegment:"",Period:"0",LastNGames:0,ContextFilter:"",ContextMeasure:"FG_PCT",CFID:"",CFPARAMS:""},$scope.getZoneFill=function(type,zone){if($scope.zones&&$scope.zones[type]&&$scope.zones[type][zone])switch($scope.zones[type][zone].leaguePerformance){case"above":return"#00ff00";case"average":return"#ffff00";case"below":return"#ff0000";default:return"none"}},$scope.getShotFill=function(made){return made?"#33cc33  ":"#cc3333"},$scope.download=function(){console.log("download image");var $xml=$("#court").clone();$xml.find("svg").removeAttr("style").removeAttr("xmlns"),$xml.find("desc, defs").remove();var xml=$xml.html(),filename="Shotchart_"+Date.now();"ie"==browser()&&(filename+=".png");var $file=$("<input></input>").attr({type:"hidden",value:"Shotchart_"+Date.now()+".png",name:"Filename"}),$svg=$("<input></input>").attr({type:"hidden",value:xml,name:"Data"});$("<form></form>").attr({method:"post",action:"/util/transcode",enctype:"application/x-www-form-urlencoded"}).append($svg,$file).appendTo(document.body).submit();return!1},setParams(),getStats(),$scope.$watch("zoneMode",updateURL),$scope.$watch("showZones",updateURL),$scope.$watch("showDetails",updateURL),$scope.$watch("showShots",updateURL),initOptions();var onResize=function(){var width=Math.min(525,Math.max(295,$scope.svg.elm.width()));$scope.svg.elm.attr("width",width),$scope.svg.elm.attr("height",width*$scope.svg.aspect)};setTimeout(onResize,250),$(window).resize(onResize)}]),stats.controller("TeamGamelogsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamGameLogs","",$scope.params).then(function(){$scope.datasets=StatsRequest.getData(),$scope.noData=0===$scope.datasets.TeamGameLog.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamGameLogs.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[teamInfo.MIN_YEAR,teamInfo.MAX_YEAR],include:_isAllstar?[{val:"ALL",text:"All"}]:null},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamGameLogs.SeasonType,without:["All Star"]},"DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.datasets={},$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamLineupsAdvancedCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamLineups","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets={lineups:datasets.Lineups},$scope.noData=0===datasets.Lineups.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamLineups.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamLineups.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamLineups.SeasonType,without:["Preseason","All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Advanced",LeagueID:"00",TeamID:teamInfo.TEAM_ID,GroupQuantity:$scope.splits.GroupQuantity.selected.val,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameID:$location.search().GameID||"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=50,$scope.noData=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamLineupsBaseCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamLineups","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets={lineups:datasets.Lineups},$scope.noData=0===datasets.Lineups.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamLineups.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamLineups.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamLineups.SeasonType,without:["Preseason","All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"
},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,GroupQuantity:$scope.splits.GroupQuantity.selected.val,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameID:$location.search().GameID||"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=50,$scope.noData=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamLineupsFourFactorsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamLineups","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets={lineups:datasets.Lineups},$scope.noData=0===datasets.Lineups.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamLineups.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamLineups.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamLineups.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Four Factors",LeagueID:"00",TeamID:teamInfo.TEAM_ID,GroupQuantity:$scope.splits.GroupQuantity.selected.val,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameID:$location.search().GameID||"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=50,$scope.noData=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamLineupsMiscCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamLineups","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets={lineups:datasets.Lineups},$scope.noData=0===datasets.Lineups.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamLineups.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamLineups.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamLineups.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Misc",LeagueID:"00",TeamID:teamInfo.TEAM_ID,GroupQuantity:$scope.splits.GroupQuantity.selected.val,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameID:$location.search().GameID||"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=50,$scope.noData=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamLineupsOpponentCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamLineups","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets={lineups:datasets.Lineups},$scope.noData=0===datasets.Lineups.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamLineups.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamLineups.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamLineups.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Opponent",LeagueID:"00",TeamID:teamInfo.TEAM_ID,GroupQuantity:$scope.splits.GroupQuantity.selected.val,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameID:$location.search().GameID||"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=50,$scope.noData=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamLineupsScoringCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamLineups","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.datasets={lineups:datasets.Lineups},$scope.noData=0===datasets.Lineups.rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamLineups.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamLineups.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamLineups.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"GroupQuantity","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Scoring",LeagueID:"00",TeamID:teamInfo.TEAM_ID,GroupQuantity:$scope.splits.GroupQuantity.selected.val,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,GameID:$location.search().GameID||"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.rowsPerPage=50,$scope.noData=!1,$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamNavCtrl",["$scope","$location","$route",function($scope,$location,$route){"use strict";$scope.$on("$routeChangeSuccess",function(event,routeData){$scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0]}),$scope.pages=[{page:"profile",path:"",text:"Profile"},{page:"statsTraditional",path:"stats/",text:"Stats Traditional"},{page:"statsAdvanced",path:"stats/advanced/",text:"Stats Advanced"},{page:"statsFourFactors",path:"stats/fourfactors/",text:"Stats Four Factors"},{page:"statsMisc",path:"stats/misc/",text:"Stats Misc"},{page:"statsScoring",path:"stats/scoring/",text:"Stats Scoring"},{page:"statsOpponent",path:"stats/opponent/",text:"Stats Opponent"},{page:"statsShooting",path:"stats/shooting/",text:"Stats Shooting"},{page:"lineupsTraditional",path:"lineups/",text:"Lineups Traditional"},{page:"lineupsAdvanced",path:"lineups/advanced/",text:"Lineups Advanced"},{page:"lineupsFourFactors",path:"lineups/fourfactors/",text:"Lineups Four Factors"},{page:"lineupsMisc",path:"lineups/misc",text:"Lineups Misc"},{page:"lineupsScoring",path:"lineups/scoring",text:"Lineups Scoring"},{page:"lineupsOpponent",path:"lineups/opponent",text:"Lineups Opponent"},{page:"playersTraditional",path:"players/",text:"Players Traditional"},{page:"playersAdvanced",path:"players/advanced",text:"Players Advanced"},{page:"playersMisc",path:"players/misc",text:"Players Misc"},{page:"playersScoring",path:"players/scoring",text:"Players Scoring"},{page:"playersUsage",path:"players/usage",text:"Players Usage"},{page:"onoffcourtTraditional",path:"onoffcourt/",text:"On/Off Court Traditional"},{page:"onoffcourtAdvanced",path:"onoffcourt/advanced",text:"On/Off Court Advanced"},{page:"onoffcourtFourFactors",path:"onoffcourt/fourfactors",text:"On/Off Court Four Factors"},{page:"onoffcourtMisc",path:"onoffcourt/misc",text:"On/Off Court Misc"},{page:"onoffcourtScoring",path:"onoffcourt/scoring",text:"On/Off Court Scoring"},{page:"onoffcourtOpponent",path:"onoffcourt/opponent",text:"On/Off Court Opponent"},{page:"onoffcourtSummary",path:"onoffcourt/summary",text:"On/Off Court Summary"},{page:"seasons",path:"seasons/",text:"Seasons"},{page:"gamelogs",path:"gamelogs/",text:"Game Logs"},{page:"yearoveryear",path:"yearoveryear/",text:"Year Over Year"},{page:"trackingdashshots",path:"tracking/shots/",text:"Tracking Shots"},{page:"trackingdashrebounds",path:"tracking/rebounds/",text:"Tracking Rebounds"},{page:"trackingdashpasses",path:"tracking/passes/",text:"Tracking Passes"}],$scope.onNavChange=function(){$location.path($scope.TeamID+"/"+$scope.selected.path)}}]),stats.controller("TeamOnOffCourtAdvancedCtrl",["$scope","$location","$filter","Splits","StatsRequest","SEASONS","TeamFactory",function($scope,$location,$filter,Splits,StatsRequest,SEASONS,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffDetails","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Advanced",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamOnOffCourtBaseCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffDetails","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",initial:"Per48",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamOnOffCourtFourFactorsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffDetails","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Four Factors",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamOnOffCourtMiscCtrl",["$scope","$location","$filter","Splits","StatsRequest","SEASONS","TeamFactory",function($scope,$location,$filter,Splits,StatsRequest,SEASONS,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffDetails","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",initial:"Totals",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Misc",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamOnOffCourtOpponentCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffDetails","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},{name:"PerMode",initial:"Per48",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Opponent",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamOnOffCourtScoringCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffDetails","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Scoring",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};
$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamOnOffCourtSummaryCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayerOnOffSummary","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=datasets.slice(0,1),$scope.players=datasets.slice(1),$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamOnOffCourt.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamOnOffCourt.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamOnOffCourt.SeasonType,without:["Pre Season","All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamPlayersAdvancedCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayers","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=[datasets[0]],$scope.players=[datasets[1]],$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamPlayer.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamPlayer.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamPlayer.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Advanced",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamPlayersBaseCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayers","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=[datasets[0]],$scope.players=[datasets[1]],$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1,datasets[0].datatable.length&&($scope.noData=!1)})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamPlayer.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamPlayer.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamPlayer.SeasonType,without:["All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamPlayersMiscCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayers","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=[datasets[0]],$scope.players=[datasets[1]],$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamPlayer.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamPlayer.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamPlayer.SeasonType,without:["All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Misc",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamPlayersScoringCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayers","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=[datasets[0]],$scope.players=[datasets[1]],$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamPlayer.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamPlayer.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamPlayer.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Scoring",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamPlayersUsageCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamPlayers","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.overall=[datasets[0]],$scope.players=[datasets[1]],$scope.noData=0===datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamPlayer.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamPlayer.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamPlayer.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Usage",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),function(){function TeamProfileCtrl($scope,$http,$location,$routeParams,CMSENV,TeamFactory,TeamProfileService,TeamRecordsService){function getProfile(params){TeamProfileService.get(params).then(function(profile){$scope.teamBackground=profile.TeamBackground.datatable,$scope.teamHistory=profile.TeamHistory.datatable,$scope.teamSocial=profile.TeamSocialSites.datatable,$scope.championshipAwards=profile.TeamAwardsChampionships.datatable,$scope.divisionAwards=profile.TeamAwardsDiv.datatable,$scope.conferenceAwards=profile.TeamAwardsConf.datatable,$scope.retired=profile.TeamRetired.datatable,$scope.hof=profile.TeamHof.datatable})}function getRecords(params){TeamRecordsService.get(params).then(function(records){$scope.leaders=records.FranchiseLeaders.datatable[0]})}function getFantasyNews(feed){$http({method:"GET",url:feed}).then(function(response){$scope.fantasynews=response.data.TeamRotowires})}var _isAllstar=TeamFactory.isAllstar($scope.TeamID);$scope.isLoading=!0;$scope.$on("coachesLoaded",function(event,coaches){$scope.coaches=coaches}),$scope.$watch("teamInfo",function(teamInfo){if(teamInfo&&!_isAllstar){var fantasyFeed=CMSENV.prefix+"wp-json/statscms/v1/rotowire/player/?team="+teamInfo.TEAM_CODE+"&limit=3",params={teamID:$scope.TeamID};getProfile(params),getRecords(params),getFantasyNews(fantasyFeed)}})}stats.controller("TeamProfileCtrl",TeamProfileCtrl),TeamProfileCtrl.$inject=["$scope","$http","$location","$routeParams","CMSENV","TeamFactory","TeamProfileService","TeamRecordsService"]}(),stats.controller("TeamRosterCtrl",["$scope","$location","$rootScope","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$rootScope,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamCommonRoster","",$scope.params).then(function(){var datasets=StatsRequest.getResults();$scope.datasets=[datasets[0]],$rootScope.$broadcast("coachesLoaded",datasets[1].datatable),$scope.isLoading=!1})}$scope.isLoading=!0,$scope.showSplits=!1,$scope.$on("runit",function(event){getStats()}),$scope.$watch("teamInfo",function(teamInfo){var _isAllstar=TeamFactory.isAllstar($scope.TeamID);teamInfo&&($scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstarRoster.Season:SEASONS.teamRoster.Season,seasonRange:_isAllstar?[SEASONS.leagueAllstar.SeasonYearFrom,SEASONS.leagueAllstar.SeasonYear]:[teamInfo.MIN_YEAR,teamInfo.MAX_YEAR]}]),$scope.params={},_isAllstar&&($scope.params.SeasonType="All Star",$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)})),$scope.params.LeagueID="00",$scope.params.TeamID=teamInfo.TEAM_ID,$scope.params.Season=$scope.splits.Season.selected.val,getStats())})}]),stats.controller("TeamSeasonsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamSeason","",$scope.params).then(function(){$scope.datasets=StatsRequest.getData(),$scope.isLoading=!1})}var _isAllstar=TeamFactory.isAllstar($scope.TeamID);$scope.isLoading=!0,$scope.rowsPerPage=100,$scope.noData=!1,$scope.datasets={},_isAllstar&&($scope.noData=!0),$scope.$watch("teamInfo",function(teamInfo){teamInfo&&($scope.params={LeagueID:"00",TeamID:teamInfo.TEAM_ID,PerMode:"Totals",SeasonType:"Regular Season"},getStats())})}]),stats.controller("TeamStatsAdvancedCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamStats.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Advanced",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamStatsBaseCtrl",["$scope","$location","$filter","Splits","StatsRequest","SEASONS","TeamFactory",function($scope,$location,$filter,Splits,StatsRequest,SEASONS,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamStats.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.hasShotchart=!0,$scope.hasVideo=!0,$scope.hasTracking=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamStatsFourFactorsCtrl",["$scope","$location","$filter","Splits","StatsRequest","SEASONS","TeamFactory",function($scope,$location,$filter,Splits,StatsRequest,SEASONS,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamStats.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Four Factors",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamStatsMiscCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamStats.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Misc",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",
url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamStatsOpponentCtrl",["$scope","$location","$filter","Splits","StatsRequest","SEASONS","TeamFactory",function($scope,$location,$filter,Splits,StatsRequest,SEASONS,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamStats.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Opponent",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamStatsScoringCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get($scope.feed.url,"",$scope.params).then(function(){$scope.datasets=StatsRequest.getResults(),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamStats.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Scoring",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"PerGame",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamStatsShootingCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamShootingSplits","",$scope.params).then(function(){var ds=StatsRequest.getResults();$scope.datasets=ds.slice(0,ds.length-1),$scope.noData=0===$scope.datasets[0].rowSet.length,$scope.assists=ds.slice(-1),$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamStats.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[1997,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamStats.SeasonType,without:["All Star"]},"PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","PORound","ShotClockRange","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:"Totals",PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,PORound:$scope.splits.PORound.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};if($scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.feeds=[{name:"General Splits",val:"general",url:"teamGeneralSplits"},{name:"Opponent Splits",val:"opp",url:"teamOpponentSplits"},{name:"LastNGames Splits",val:"lastn",url:"teamLastNGamesSplits"},{name:"In Game Splits",val:"ingame",url:"teamInGameSplits"},{name:"Clutch Splits",val:"clutch",url:"teamClutchSplits"},{name:"Team Performance Splits",val:"teamperf",url:"teamPerformanceSplits"},{name:"Year over Year",val:"yoy",url:"teamYearOverYearSplits"}],$location.search().Split)var split=$filter("filter")($scope.feeds,{val:$location.search().Split});$scope.feed=split?split[0]:$scope.feeds[0],$scope.$on("runit",function(event){$scope.feed==$scope.feeds[0]?$location.search("Split",null):$location.search("Split",$scope.feed.val),setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){_teamInfo=teamInfo,_teamInfo&&(setStatsParams(_teamInfo),getStats())})}]),stats.controller("TeamSummaryCtrl",["$scope","$location","$routeParams","SEASONS","StatsRequest","TeamFactory",function($scope,$location,$routeParams,SEASONS,StatsRequest,TeamFactory){"use strict";function getStats(){$scope.isLoading=!0,StatsRequest.get("teamSummary","",$scope.params).then(function(){var datasets=StatsRequest.getData();$scope.teamInfo=datasets.TeamInfoCommon.datatable[0],$scope.teamRanks=datasets.TeamSeasonRanks.datatable[0],$scope.ai=$scope.teamInfo,$scope.isLoading=!1})}$scope.isLoading=!0,$scope.$on("$routeChangeSuccess",function(event,routeData){if($routeParams.TeamID&&$routeParams.TeamID!=$scope.TeamID){$scope.TeamID=$routeParams.TeamID;var _isAllstarTeam=TeamFactory.isAllstar($scope.TeamID);10!=$scope.TeamID.toString().length&&(document.location="/teams/"),$scope.params={season:_isAllstarTeam?SEASONS.allstar.Season:SEASONS.teamProfile.Season,SeasonType:_isAllstarTeam?SEASONS.allstar.SeasonType:SEASONS.teamProfile.SeasonType,LeagueID:"00",TeamID:$scope.TeamID},getStats()}})}]),stats.controller("TeamTrackingDashPassesCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,$scope.noData=!1,StatsRequest.get("teamTrackingDashPasses","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.PassesMade.datatable.length&&0===data.PassesReceived.datatable.length?($scope.noData=!0,$scope.datasets=[]):$scope.datasets=[{name:"Passes Made",datatable:data.PassesMade.datatable},{name:"Passes Received",datatable:data.PassesReceived.datatable}],$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamTracking.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamTracking.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamTracking.SeasonType,without:["Pre Season","All Star"]},"PerMode","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){if(_teamInfo=teamInfo){setStatsParams(_teamInfo);var _teamName=[_teamInfo.TEAM_CITY,_teamInfo.TEAM_NAME].join(" "),_section="(Passes)",_newPageTitle=["Team Tracking for",_teamName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle),getStats()}})}]),stats.controller("TeamTrackingDashReboundsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,$scope.noData=!1,StatsRequest.get("teamTrackingDashRebounds","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.OverallRebounding.datatable.length?($scope.noData=!0,$scope.datasets=[]):$scope.datasets=[{name:"OverallRebounding",datatable:data.OverallRebounding.datatable},{name:"NumContestedRebounding",datatable:data.NumContestedRebounding.datatable},{name:"RebDistanceRebounding",datatable:data.RebDistanceRebounding.datatable},{name:"ShotDistanceRebounding",datatable:data.ShotDistanceRebounding.datatable},{name:"ShotTypeRebounding",datatable:data.ShotTypeRebounding.datatable}],$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamTracking.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamTracking.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamTracking.SeasonType,without:["Pre Season","All Star"]},"PerMode","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){if(_teamInfo=teamInfo){setStatsParams(_teamInfo);var _teamName=[_teamInfo.TEAM_CITY,_teamInfo.TEAM_NAME].join(" "),_section="(Rebounds)",_newPageTitle=["Team Tracking for",_teamName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle),getStats()}})}]),stats.controller("TeamTrackingDashShotsCtrl",["$scope","$location","$filter","Splits","SEASONS","StatsRequest","TeamFactory","SEOFactory",function($scope,$location,$filter,Splits,SEASONS,StatsRequest,TeamFactory,SEOFactory){"use strict";function getStats(){$scope.isLoading=!0,$scope.noData=!1,StatsRequest.get("teamTrackingDashShots","",$scope.params).then(function(){var data=StatsRequest.getData();0===data.GeneralShooting.datatable.length?($scope.noData=!0,$scope.datasets=[]):$scope.datasets=[{name:"GeneralShooting",datatable:data.GeneralShooting.datatable},{name:"ShotClockShooting",datatable:data.ShotClockShooting.datatable},{name:"DribbleShooting",datatable:data.DribbleShooting.datatable},{name:"ClosestDefenderShooting",datatable:data.ClosestDefenderShooting.datatable},{name:"ClosestDefender10ftPlusShooting",datatable:data.ClosestDefender10ftPlusShooting.datatable},{name:"TouchTimeShooting",datatable:data.TouchTimeShooting.datatable}],$scope.isLoading=!1})}function setStatsParams(teamInfo){$scope.splits=Splits.get([{name:"Season",initial:_isAllstar?SEASONS.allstar.Season:SEASONS.teamTracking.Season,seasonRange:_isAllstar?[SEASONS.allstar.SeasonYearFrom,SEASONS.allstar.SeasonYear]:[SEASONS.teamTracking.SeasonYearFrom,teamInfo.MAX_YEAR]},{name:"SeasonType",initial:_isAllstar?"All Star":SEASONS.teamTracking.SeasonType,without:["Pre Season","All Star"]},"PerMode","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","DateFrom","DateTo"]),_isAllstar&&$scope.splits.Season.options.forEach(function(value,idex,array){value.text=$filter("seasonToSeasonYear")(value.text)}),$scope.params={MeasureType:"Base",LeagueID:"00",TeamID:teamInfo.TEAM_ID,Season:$scope.splits.Season.selected.val,SeasonType:_isAllstar?"All Star":$scope.splits.SeasonType.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlusMinus:$scope.splits.PlusMinus.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Rank:$scope.splits.Rank.selected.val,Outcome:$scope.splits.Outcome.selected.val,Location:$scope.splits.Location.selected.val,Month:$scope.splits.Month.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,GameSegment:$scope.splits.GameSegment.selected.val,Period:$scope.splits.Period.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val}}var _isAllstar=TeamFactory.isAllstar($scope.TeamID),_teamInfo={};$scope.isLoading=!0,$scope.showSplits=!1,$scope.noData=!1,$scope.$on("runit",function(event){setStatsParams(_teamInfo),getStats()}),$scope.$watch("teamInfo",function(teamInfo){if(_teamInfo=teamInfo){setStatsParams(_teamInfo);var _teamName=[_teamInfo.TEAM_CITY,_teamInfo.TEAM_NAME].join(" "),_section="(Shots)",_newPageTitle=["Team Tracking for",_teamName,_section].join(" ");SEOFactory.appendTitle(_newPageTitle),getStats()}})}]),function(){function TeamListCtrl($scope,$filter,TEAMS){$scope.divisionTemplate="/divisionTemplate.html",$scope.teams=$filter("filter")(TEAMS.slice(0),{special:!1}),console.log(TEAMS)}stats.controller("TeamListCtrl",TeamListCtrl),TeamListCtrl.$inject=["$scope","$filter","TEAMS"]}(),function(){function NaturalLanguageCtrl($scope,$cookies,$filter,$location,$anchorScroll,PlayerListService,PlayerSummaryService,TextAnalysisService,TextAnalysisFQService,TEAMS){function ask(qsource){$scope.isLoading||($location.hash("stats-nl_section-question"),$anchorScroll(),$location.search("question",$scope.params.Question),$scope.question=$scope.params.Question,$scope.isLoading=!0,$scope.isError=!1,$scope.sets=[],TextAnalysisService.get($scope.params).then(function(response){$scope.sets=response.results,$scope.info=$scope.sets[3],$scope.question=response.data.parameters.Question,$scope.similarQuestions=$scope.sets[5].rowSet.slice(0,4);var omData={focus:qsource,content:[$scope.question]};_nba.analytics.click(omData),callOmniture($scope.question);var bucket=$scope.info.rowSet[0][0];return $scope.qSeason=$scope.info.rowSet[0][1],$scope.qSeasonType=$scope.info.rowSet[0][2],""==$scope.info.rowSet[0][3]?$scope.disclaimer=$scope.disclaimerText[1]:(3==$scope.info.rowSet[0][3]&&($scope.isLongDisclaimer=!0),$scope.disclaimer=$scope.disclaimerText[$scope.info.rowSet[0][3]]),""==bucket?($scope.isError=!0,void($scope.isLoading=!1)):($scope.selectedTemplate=$scope.templates[bucket]||$scope.templates["No Template"],void($scope.answer=parsers[bucket]?parsers[bucket]($scope.sets[0]):parsers["No Template"]($scope.sets[0])))},function(response){$scope.isError=!0,$scope.isLoading=!1,$scope.reason=response.message}))}function viewFeatured(){var omData={focus:"featured-module"};_nba.analytics.click(omData),$location.hash("featured-questions"),$anchorScroll()}$scope.isLoading=!1,$scope.isError=!1,$scope.ask=ask,$scope.featuredQuestions,$scope.viewFeatured=viewFeatured,$scope.params={LeagueID:"00",Question:$location.search().question},$scope.isTutorial=!1;var nlCookie=$cookies.tutorial;nlCookie||($scope.isTutorial=!0,$cookies.tutorial=!0),TextAnalysisFQService.get().then(function(info){$scope.featuredQuestions=info.data.categories},function(){$scope.featuredQ_error=!0}),$scope.templates={"No Template":"/templates/nl/default-question-template.html",PlayerStat:"/templates/nl/player-stat-question-template.html",PlayerStatRank:"/templates/nl/player-stat-rank-question-template.html",PlayerAward:"/templates/nl/player-award-question-template.html","Player Stat Question League Leaders":"/PlayerStatQuestionLeagueLeadersTmpl.html",TeamAward:"/templates/nl/team-award-template.html",TeamBio:"/templates/nl/team-bio-template.html",TeamStat:"/templates/nl/team-stat-question-template.html",PlayerStatGame:"/templates/nl/player-stat-game-template.html",Game:"/templates/nl/game-question-template.html",PlayerBio:"/templates/nl/player-stat-weight-template.html",PlayerTeam:"/templates/nl/player-team-template.html",CoachAward:"/templates/nl/coach-award-template.html",CoachAwardCount:"/templates/nl/coach-award-count-template.html",CoachStat:"/templates/nl/coach-stat-template.html",CoachTeam:"/templates/nl/coach-team-template.html",PlayerAwardCount:"/templates/nl/player-award-count-template.html",PlayerStatCareerHigh:"/templates/nl/player-stat-career-high.html",PlayerFrag:"/templates/nl/player-frag-template.html",TeamFrag:"/templates/nl/team-frag-template.html",TeamStatGame:"/templates/nl/team-stat-game-question-template.html"},$scope.selectedTemplate=$scope.templates["No Template"],$scope.isLongDisclaimer=!1,$scope.longDisclaimerText={col1:{Rebounds:"1950-1951",Minutes:"1951-1952","Games Started":"1970-1971"},col2:{Steals:"1973-1974",Blocks:"1973-1974","Off Rebounds":"1973-1974"},col3:{"Def Rebounds":"1973-1974",Turnovers:"1977-1978","3 Point Field Goals":"1979-1980"}},$scope.disclaimerText=["","has full Play-by-Play based statistics back to the 1996-97 season.","has complete game-level stats back to the 1985-86 season. Box Scores before this year could be incomplete.","has complete season-level stats back to the 1946-47 season. Not all stats were recorded from the beginning of the NBA. Here is a list when certain stats started to be tracked:","has complete season-level stats back to the 1946-47 season.","began keeping Player Tracking stats in the 2013-14 season."];var parsers={"No Template":function(answer){return $scope.isLoading=!1,answer},PlayerStat:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[2],val:row[2]}},params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},PlayerStatCareerHigh:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[3],val:row[3]}},params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},PlayerStatRank:function(answer){var row=answer.rowSet[0];if(!row[1])return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={name:row[2],id:row[1],stats:answer,primary:{key:answer.headers[3],val:row[3]}},params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},PlayerAward:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;answer.player={name:row[2],id:row[0]};var params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:answer.player.id};return PlayerSummaryService.get(params).then(function(info){answer.player.info=info,$scope.isLoading=!1}),answer},PlayerAwardCount:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;answer.player={name:row[1],id:row[0]};var params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:answer.player.id};return PlayerSummaryService.get(params).then(function(info){answer.player.info=info,$scope.isLoading=!1}),answer},Game:function(answer){var headers=answer.headers,data=answer.rowSet[0],gameInfo={};if($scope.isLoading=!1,!data)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;for(var i=(answer.rowSet[0],0);i<headers.length;i++)gameInfo[headers[i]]=data[i];(Number(gameInfo.SEASON)+1).toString();return gameInfo.GAME_DATE=$filter("date")(Date.parse(data[0]),"MMMM d, y"),gameInfo.SEASON_STRING=$filter("seasonyear")(gameInfo.SEASON),gameInfo.VISITOR_TEAM_LEAD=!1,gameInfo.HOME_TEAM_LEAD=!1,Number(gameInfo.GAME_STATUS_ID)>1&&(Number(gameInfo.VISITOR_TEAM_PTS)>Number(gameInfo.HOME_TEAM_PTS)?gameInfo.VISITOR_TEAM_LEAD=!0:gameInfo.HOME_TEAM_LEAD=!0),gameInfo},PlayerBio:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[2],val:row[2]}},params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},PlayerFrag:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={id:row[0],stats:answer},params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},PlayerTeam:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={name:row[2],id:row[0],stats:answer,primary:{key:answer.headers[3],val:row[3],isLongName:!1}};player.primary.val.length>5&&(player.primary.isLongName=!0);var params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},PlayerStatGame:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var player={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[4],val:row[4]}},params={SeasonType:"Regular Season",LeagueID:"00",PlayerID:player.id};return PlayerSummaryService.get(params).then(function(info){player.info=info,$scope.isLoading=!1}),player},TeamAward:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var team={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[2],val:row[2],award:row[3]}};return team.info=$filter("filter")(TEAMS,{id:team.id})[0],$scope.isLoading=!1,team},TeamBio:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var team={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[5],val:row[5]}};return team.info=$filter("filter")(TEAMS,{id:team.id})[0],$scope.isLoading=!1,team},TeamFrag:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var team={id:row[0],stats:answer};return team.info=$filter("filter")(TEAMS,{id:team.id})[0],$scope.isLoading=!1,team},TeamStat:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var team={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[2],val:row[2]}};return team.info=$filter("filter")(TEAMS,{id:team.id})[0],$scope.isLoading=!1,team},TeamStatGame:function(answer){var row=answer.rowSet[0];if(!row)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",answer;var team={name:row[1],id:row[0],stats:answer,primary:{key:answer.headers[4],val:row[4]}};return team.info=$filter("filter")(TEAMS,{id:team.id})[0],$scope.isLoading=!1,team},CoachAward:function(answer){var headers=answer.headers,data=answer.rowSet[0],coach={};if(!data)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",coach;for(var i=0;i<headers.length;i++)coach[headers[i]]=data[i];return coach.headers=headers,coach.data=answer.rowSet,$scope.isLoading=!1,coach},CoachAwardCount:function(answer){var headers=answer.headers,data=answer.rowSet[0],coach={};if(!data)return coach;
for(var i=0;i<headers.length;i++)coach[headers[i]]=data[i];return coach.headers=headers,coach.data=answer.rowSet,$scope.isLoading=!1,coach},CoachStat:function(answer){var headers=answer.headers,data=answer.rowSet[0],coach={};if(!data)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",coach;for(var i=0;i<headers.length;i++)coach[headers[i]]=data[i];return coach.headers=headers,coach.data=answer.rowSet,coach.teaminfo=$filter("filter")(TEAMS,{id:coach.TEAM_ID})[0],$scope.isLoading=!1,coach},CoachTeam:function(answer){var headers=answer.headers,data=answer.rowSet[0],coach={};if(!data)return $scope.isLoading=!1,$scope.isError=!0,$scope.reason="We could not answer your question",coach;for(var i=0;i<headers.length;i++)coach[headers[i]]=data[i];return coach.headers=headers,coach.data=answer.rowSet,$scope.isLoading=!1,coach}};$location.search().question&&ask("qstring")}stats.controller("NaturalLanguageCtrl",NaturalLanguageCtrl),NaturalLanguageCtrl.$inject=["$scope","$cookies","$filter","$location","$anchorScroll","PlayerListService","PlayerSummaryService","TextAnalysisService","TextAnalysisFQService","TEAMS"]}(),function(){function TextAnalysisCtrl($scope,$location,TextAnalysisService){function ask(){$scope.isLoading||($location.search("Question",$scope.params.Question),$scope.isLoading=!0,$scope.isError=!1,$scope.sets=[],TextAnalysisService.get($scope.params).then(function(response){$scope.sets=response.results,$scope.question=response.data.parameters.Question,$scope.isLoading=!1},function(response){$scope.sets=response.results,$scope.question=response.data.parameters.Question,$scope.isError=!1,$scope.isLoading=!1,$scope.reason=response.reason||response}))}$scope.isLoading=!1,$scope.isError=!1,$scope.ask=ask,$scope.params={LeagueID:"00",Question:$location.search().Question||"How many points does lebron have?"}}stats.controller("TextAnalysisCtrl",TextAnalysisCtrl),TextAnalysisCtrl.$inject=["$scope","$location","TextAnalysisService"]}(),function(){function TrackingCatchShootCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section)||"Player",$scope.params.PtMeasureType="CatchShoot",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingCatchShootCtrl",TrackingCatchShootCtrl),TrackingCatchShootCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingDefenseCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="Defense",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingDefenseCtrl",TrackingDefenseCtrl),TrackingDefenseCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingDrivesCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="Drives",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingDrivesCtrl",TrackingDrivesCtrl),TrackingDrivesCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingElbowTouchCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="ElbowTouch",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingElbowTouchCtrl",TrackingElbowTouchCtrl),TrackingElbowTouchCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingNavCtrl($scope,$location,$route){$scope.$on("$routeChangeSuccess",function(event,routeData){if(!$scope.Section){$scope.Section="player";var path=$location.path().split("/");path[1]=$scope.Section,$location.path(path.join("/"))}$scope.page=$route.current.page,$scope.selected=$scope.pages.filter(function(n){return n.page==$scope.page})[0]}),$scope.pages=[{page:"summary",path:"",text:"Summary"},{page:"catchshoot",path:"catchshoot",text:"Catch & Shoot"},{page:"defense",path:"defense",text:"Defense"},{page:"drives",path:"drives",text:"Drives"},{page:"passing",path:"passing",text:"Passing"},{page:"possessions",path:"possessions",text:"Touches & Possessions"},{page:"pullup",path:"pullup",text:"Pull Up Shooting"},{page:"offensive-rebounding",path:"offensive-rebounding",text:"Offensive Rebounding"},{page:"defensive-rebounding",path:"defensive-rebounding",text:"Defensive Rebounding"},{page:"rebounding",path:"rebounding",text:"Rebounding"},{page:"shooting",path:"shooting",text:"Shooting Efficiency"},{page:"speed",path:"speed",text:"Speed & Distance"},{page:"elbow",path:"elbow",text:"Elbow Touch"},{page:"post",path:"post",text:"Post Touch"},{page:"paint",path:"paint",text:"Paint Touch"}],$scope.onNavChange=function(){$location.path($scope.Section+"/"+$scope.selected.path)}}stats.controller("TrackingNavCtrl",TrackingNavCtrl),TrackingNavCtrl.$inject=["$scope","$location","$route"]}(),function(){function TrackingPaintTouchCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="PaintTouch",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingPaintTouchCtrl",TrackingPaintTouchCtrl),TrackingPaintTouchCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingPassingCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="Passing",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingPassingCtrl",TrackingPassingCtrl),TrackingPassingCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingPossessionsCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="Possessions",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingPossessionsCtrl",TrackingPossessionsCtrl),TrackingPossessionsCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingPostTouchCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="PostTouch",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingPostTouchCtrl",TrackingPostTouchCtrl),TrackingPostTouchCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingPullupCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="PullUpShot",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingPullupCtrl",TrackingPullupCtrl),TrackingPullupCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingReboundingCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="Rebounding",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingReboundingCtrl",TrackingReboundingCtrl),TrackingReboundingCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingShootingCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="Efficiency",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingShootingCtrl",TrackingShootingCtrl),TrackingShootingCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingSpeedCtrl($scope,$filter,$location,SEASONS,SplitsService,TrackingDataService){function getStats(){$scope.isLoading=!0,TrackingDataService.get($scope.params).then(function(datasets){$scope.datasets=datasets,$scope.noData=0===$scope.datasets[0].datatable.length,$scope.isLoading=!1})}function setSectionFn(section){var path=$location.path().split("/");path[1]=section,$location.path(path.join("/"))}$scope.showSplits=!1,$scope.setSection=setSectionFn;var config=SplitsService.get(["LeagueID",{name:"Season",initial:SEASONS.trackingStats.Season,seasonRange:[SEASONS.trackingStats.SeasonFrom,SEASONS.trackingStats.Season]},{name:"SeasonType",initial:SEASONS.trackingStats.SeasonType,without:["Preseason"]},"College","Conference","Country","DateFrom","DateTo","Division","DraftPick","DraftYear","GameScope","Height","LastNGames","Location","Month","OpponentTeamID","Outcome","PerMode","PlayerExperience","PlayerPosition","PORound","SeasonSegment","StarterBench","VsConference","VsDivision","Weight","TeamID"]);$scope.splits=config.splits,$scope.params=config.params,$scope.params.PlayerOrTeam=$filter("toTitleCase")($scope.Section),$scope.params.PtMeasureType="SpeedDistance",getStats(),$scope.$on("customFields",function(event,cf){$scope.customFields=cf}),$scope.$on("runit",function(event){getStats()})}stats.controller("TrackingSpeedCtrl",TrackingSpeedCtrl),TrackingSpeedCtrl.$inject=["$scope","$filter","$location","SEASONS","SplitsService","TrackingDataService"]}(),function(){function TrackingSectionCtrl($scope,$routeParams){var gametimeliteNode=document.createElement("link");gametimeliteNode.setAttribute("rel","alternate"),gametimeliteNode.setAttribute("href","android-app://com.nbadigital.gametimelite/gametime/com.nbadigital.gametime/navigation/stats/player_tracking"),document.head.appendChild(gametimeliteNode),$scope.$on("$routeChangeSuccess",function(event,routeData){$routeParams.Section&&($scope.Section=$routeParams.Section)})}stats.controller("TrackingSectionCtrl",TrackingSectionCtrl),TrackingSectionCtrl.$inject=["$scope","$routeParams"]}(),stats.controller("TransactionsCtrl",function($scope,$location,$http,SEASONS,TEAMS,Splits,$timeout,$filter){"use strict";$scope.showSplits=!1,$scope.isLoading=!0,$scope.noData=!1;var seasonType=SEASONS.transactions;$scope.Teams=Splits.get(["OpponentTeamID"]).OpponentTeamID,$scope.Teams.options[0].text="All Teams",$scope.Seasons=Splits.get([{name:"Season",initial:seasonType.Season,seasonRange:[seasonType.SeasonYearFrom,seasonType.SeasonYear]}]).Season;var data=[];$scope.onrunit=function(){$scope.isLoading=!0;var dateGroupsArray=[],dateGroupsObj={},filterByTeam=[],filterBySeason=[],startYear=$scope.Seasons.selected.val.slice(2,4),endYear=$scope.Seasons.selected.val.slice(-2),selectedTeamID=$scope.Teams.selected.val;data.forEach(function(row,index,array){var teamID=parseInt(row.TEAM_ID,10),additionalID=parseInt(row.Additional_Sort,10),selectedID=parseInt(selectedTeamID,10);teamID===selectedID&&filterByTeam.push(row),additionalID===selectedID&&additionalID>0&&filterByTeam.push(row)});var teamFilter=0===filterByTeam.length?data:filterByTeam;teamFilter.forEach(function(row,index,array){var rowYear=row.TRANSACTION_DATE.slice(2,4);rowYear>=startYear&&rowYear<=endYear&&filterBySeason.push(row)});var seasonFilter=0===filterBySeason.length?[]:filterBySeason;if($scope.noData=0===filterBySeason.length,filterBySeason.length>0){seasonFilter.forEach(function(row,index,array){dateGroupsObj[row.TRANSACTION_DATE]={},dateGroupsObj[row.TRANSACTION_DATE].label=$filter("date")(row.TRANSACTION_DATE,"M/dd/yyyy"),dateGroupsObj[row.TRANSACTION_DATE].groups={}}),seasonFilter.forEach(function(row,index,array){dateGroupsObj[row.TRANSACTION_DATE].groups[row.GroupSort]=[]}),seasonFilter.forEach(function(row,index,array){dateGroupsObj[row.TRANSACTION_DATE].groups[row.GroupSort].push(row)}),seasonFilter.forEach(function(row,index,array){dateGroupsObj[row.TRANSACTION_DATE].groups[row.GroupSort].forEach(function(entry,index,array){var teamInfo=$filter("filter")(TEAMS,{id:entry.TEAM_ID});entry.Team={},entry.Team=teamInfo[0]})});for(var date in dateGroupsObj)dateGroupsArray.push(dateGroupsObj[date]);$scope.dateGroups=dateGroupsArray}$scope.isLoading=!1};$http.get("/js/data/playermovement/NBA_Player_Movement.json").then(function(resp){data=resp.data.NBA_Player_Movement.rows,$scope.onrunit()}),$scope.togglePlayer=function(player,array){for(var i=0,len=array.length;i<len;i++)array[i].isShown=!1;player.isShown=!0}}),stats.controller("VsSummaryCtrl",["$scope","$location","$routeParams","StatsRequest","$filter","TEAMS","SEASONS","Splits","$q","DeepLinksFactory",function($scope,$location,$routeParams,StatsRequest,$filter,TEAMS,SEASONS,Splits,$q,DeepLinksFactory){"use strict";function filterByTeamId(n){for(var i=0,len=teams.length;i<len;i++)if(n==teams[i].id)return teams[i]}function getTeams(){var filterTeamForConference=function(n){return n.conference==this};$scope.conferences=[{name:"Eastern",teams:teams.filter(filterTeamForConference.bind("Eastern"))},{name:"Western",teams:teams.filter(filterTeamForConference.bind("Western"))}]}function getAllPlayers(){StatsRequest.get("playerList","",$scope.params).then(function(){var playersAll=StatsRequest.getData().CommonAllPlayers.datatable,playersActive=$filter("filter")(playersAll,{ROSTERSTATUS:1});$scope.players=playersActive,$scope.isLoading=!1})}function getLineupInfo(team,side){var defer=$q.defer();return $scope.params.TeamID=team,side.hasPlayer=!1,side.hasTeam=!1,StatsRequest.get("teamCommonRoster","",$scope.params).then(function(){var dataset=StatsRequest.getData();side.lineup=dataset.CommonTeamRoster.datatable,side.lineupShow=!0,side.lineupTeam=team,defer.resolve(side.lineup)}),defer.promise}function getPlayerInfo(side){var defer=$q.defer();return StatsRequest.get("playerSummary","",$scope.params).then(function(){$scope.params.PerMode="Totals";var datasets=StatsRequest.getData();side.info=datasets.CommonPlayerInfo.datatable[0],$scope.isLoading=!1,side.hasPlayer=!0,side.team=filterByTeamId(side.info.TEAM_ID),side.type="player",$scope.params.PlayerID=side.info.PERSON_ID,defer.resolve()}),defer.promise}var _locationSearchObj=DeepLinksFactory.getSearchURL();$scope.isLoading=!0,$scope.limit=5,$scope.params={IsOnlyCurrentSeason:"0",LeagueID:"00",PlayerID1:0,PlayerID2:0,PlayerID3:0,PlayerID4:0,PlayerID5:0,PlayerTeamID:_locationSearchObj.PlayerTeamID||1,Season:SEASONS.playerVsPlayerStats.Season,SeasonType:"Regular Season",VsPlayerID1:0,VsPlayerID2:0,VsPlayerID3:0,VsPlayerID4:0,VsPlayerID5:0,VsTeamID:_locationSearchObj.VsTeamID||1},$scope.compare={isReady:!1,left:{type:"",hasPlayer:!1,hasTeam:!1,hasLineup:!1,isLoading:!0,lineup:[],lineupChosen:[],lineupIDs:[],lineupShow:!1,info:{},checked:0},right:{type:"",hasPlayer:!1,hasTeam:!1,hasLineup:!1,isLoading:!0,lineup:[],lineupShow:!1,lineupChosen:[],lineupIDs:[],info:{},checked:0}};var teams=TEAMS.slice(0);$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.switchSides=function(){var tempObj=$scope.compare.left;$scope.compare.left=$scope.compare.right,$scope.compare.right=tempObj},$scope.setStatType=function(stat,side,tag){side.type=stat,side.lineup=[],side.lineupChosen=[],side.lineupIDs=[],side.checked=0,side.hasTeam=!1,side.hasLineup=!1,side.hasPlayer=!1,"left"===tag&&($scope.compare.right.type="","player"!==stat&&"team"!==stat||(side.lineupShow=!1)),$scope.compare.isReady=!1},$scope.setTeam=function(team,side){var defer=$q.defer();return side.info=team,side.type="team",side.hasTeam=!0,side.isReady=!0,defer.resolve(),defer.promise},$scope.setLineup=function(side){side.lineupShow=!1,side.hasLineup=!0,side.isReady=!0,side.type="lineup"},$scope.chooseLineup=function(team,side){side.lineup=[],getLineupInfo(team,side),side.lineupShow=!0,side.team=team},$scope.checkChange=function(item,side){if(item.selected)side.checked++,side.lineupChosen.push(item),side.lineupIDs.push(item.PLAYER_ID);else{var _playerIndex=side.lineupIDs.indexOf(item.PLAYER_ID);side.lineupIDs.splice(_playerIndex,1),side.lineupChosen.splice(_playerIndex,1),side.checked--}},$scope.onSelect=function($item,$model,$label,side){$scope.$item=$item,$scope.$model=$model,$scope.$label=$label,$scope.params.PlayerID=$scope.$model.PERSON_ID,getPlayerInfo(side),side.lineupRoutes=[],side.info=$scope.$model,side.info.paramID=$scope.params.PlayerID,side.isReady=!0},$scope.$watch("compare",function(newVal,oldVal){var _hasLineupLeft=$scope.compare.left.hasLineup,_hasLineupRight=$scope.compare.right.hasLineup,_hasPlayerLeft=$scope.compare.left.hasPlayer,_hasPlayerRight=$scope.compare.right.hasPlayer,_hasTeamLeft=$scope.compare.left.hasTeam,_isTeamVsPlayer=_hasTeamLeft&&_hasPlayerRight,_isPlayerVsPlayer=_hasPlayerLeft&&_hasPlayerRight,_isLineupVsLineup=_hasLineupLeft&&_hasLineupRight,search={};if((_isTeamVsPlayer||_isPlayerVsPlayer||_isLineupVsLineup)&&($scope.compare.isReady=!0),(_isTeamVsPlayer||_isPlayerVsPlayer)&&(DeepLinksFactory.resetSearchURL(),_hasTeamLeft?search.TeamID=$scope.compare.left.info.id:search.PlayerID=$scope.compare.left.info.PERSON_ID,search.VsPlayerID=$scope.compare.right.info.PERSON_ID),_isLineupVsLineup){DeepLinksFactory.resetSearchURL(),search.LineupIDs=$scope.compare.left.lineupIDs.join("~"),search.VsLineupIDs=$scope.compare.right.lineupIDs.join("~"),search.PlayerTeamID=search.TeamID=$scope.compare.left.team,search.VsTeamID=$scope.compare.right.team;var _PlayerNamesArray=[],_VsPlayerNamesArray=[];$scope.compare.left.lineupChosen.forEach(function(value){_PlayerNamesArray.push(value.PLAYER)}),$scope.compare.right.lineupChosen.forEach(function(value){_VsPlayerNamesArray.push(value.PLAYER)}),search.PlayerNames=_PlayerNamesArray.join("~"),search.VsPlayerNames=_VsPlayerNamesArray.join("~")}DeepLinksFactory.setSearchURL(search),$scope.search="?"+$location.url().split("?")[1]},!0),$scope.$on("$locationChangeStart",function(){var TeamID=$location.search().TeamID,PlayerID=$location.search().PlayerID,VsPlayerID=$location.search().VsPlayerID;if(!$scope.compare.isReady){if(PlayerID&&VsPlayerID)return $scope.params.PlayerID=PlayerID,void getPlayerInfo($scope.compare.left).then(function(){$scope.params.PlayerID=VsPlayerID,getPlayerInfo($scope.compare.right).then(function(){$scope.compare.isReady=!0})});if(TeamID&&VsPlayerID){var sideTeam=filterByTeamId(TeamID);return void $scope.setTeam(sideTeam,$scope.compare.left).then(function(){$scope.params.PlayerID=VsPlayerID,getPlayerInfo($scope.compare.right).then(function(){$scope.compare.isReady=!0})})}if(PlayerID&&($scope.params.PlayerID=PlayerID,getPlayerInfo($scope.compare.left)),TeamID){var sideTeam=filterByTeamId(TeamID);$scope.setTeam(sideTeam,$scope.compare.left)}}}),$scope.pages=[{value:"/advanced/",text:"Advanced"},{value:"/misc/",text:"Misc"},{value:"/scoring/",text:"Scoring"},{value:"/fourfactors/",text:"Four Factors"},{value:"/opponent/",text:"Opponent"}],$scope.onNavChange=function(){$location.path($scope.pages.page)},getAllPlayers(),getTeams()}]),stats.controller("PlayerVsPlayerAdvancedCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS","DeepLinksFactory",function($scope,$location,Splits,PlayerVersusService,SEASONS,DeepLinksFactory){"use strict";var _locationSearchObj=DeepLinksFactory.getSearchURL(),_isLineup=!!_locationSearchObj.LineupIDs,LineupIDArray=[],PlayerNameArray=[],VsLineupIDArray=[],VsPlayerNameArray=[];_isLineup&&(LineupIDArray=_locationSearchObj.LineupIDs.split("~"),PlayerNameArray=_locationSearchObj.PlayerNames.split("~"),VsLineupIDArray=_locationSearchObj.VsLineupIDs.split("~"),VsPlayerNameArray=_locationSearchObj.VsPlayerNames.split("~"));var splits=[{name:"Season",initial:_locationSearchObj.Season||SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().range},{name:"SeasonType",initial:_locationSearchObj.SeasonType||SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},"DateFrom","DateTo","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","ShotClockRange"];
$scope.splits=Splits.get(splits),$scope.params={Conference:"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,Division:"",GameSegment:$scope.splits.GameSegment.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,LeagueID:"00",Location:$scope.splits.Location.selected.val,MeasureType:"Advanced",Month:$scope.splits.Month.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,Outcome:$scope.splits.Outcome.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Period:$scope.splits.Period.selected.val,PerMode:"PerGame",PlayerID1:LineupIDArray[0]||0,PlayerID2:LineupIDArray[1]||0,PlayerID3:LineupIDArray[2]||0,PlayerID4:LineupIDArray[3]||0,PlayerID5:LineupIDArray[4]||0,PlayerTeamID:_locationSearchObj.PlayerTeamID||1,PlusMinus:$scope.splits.PlusMinus.selected.val,Rank:$scope.splits.Rank.selected.val,Season:$scope.splits.Season.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.va,TeamID:$location.search().VsTeamID,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,VsPlayerID1:VsLineupIDArray[0]||0,VsPlayerID2:VsLineupIDArray[1]||0,VsPlayerID3:VsLineupIDArray[2]||0,VsPlayerID4:VsLineupIDArray[3]||0,VsPlayerID5:VsLineupIDArray[4]||0,VsTeamID:_locationSearchObj.VsTeamID||1},_isLineup&&($scope.compare.left.lineupIDs=LineupIDArray.map(function(value){return value}),$scope.compare.right.lineupIDs=VsLineupIDArray.map(function(value){return value}),$scope.compare.left.lineupIDs.forEach(function(value,index){$scope.compare.left.lineupChosen[index]={PLAYER_ID:value,PLAYER:PlayerNameArray[index]}}),$scope.compare.right.lineupIDs.forEach(function(value,index){$scope.compare.right.lineupChosen[index]={PLAYER_ID:value,PLAYER:VsPlayerNameArray[index]}}),$scope.compare.left.lineup=$scope.compare.left.lineupIDs,$scope.compare.right.lineup=$scope.compare.right.lineupIDs,$scope.compare.left.type=$scope.compare.right.type="lineup",PlayerVersusService.getStats($scope)),$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},OFF_RATING:{visible:!1,index:1,label:"OFF RATING",format:"number",invert:!1},DEF_RATING:{visible:!1,index:2,label:"DEF RATING",format:"number",invert:!0},NET_RATING:{visible:!0,index:3,label:"NET RATING",format:"number",invert:!1},AST_PCT:{visible:!1,index:4,label:"AST %",format:"percent",invert:!1},AST_TO:{visible:!1,index:5,label:"AST TO",format:"number",invert:!1},AST_RATIO:{visible:!0,index:6,label:"AST RATIO",format:"number",invert:!1},OREB_PCT:{visible:!1,index:7,label:"OREB %",format:"percent",invert:!1},DREB_PCT:{visible:!1,index:8,label:"DREB %",format:"percent",invert:!1},REB_PCT:{visible:!0,index:9,label:"REB %",format:"percent",invert:!1},TM_TOV_PCT:{visible:!1,index:10,label:"TO RATIO",format:"percent",invert:!0},EFG_PCT:{visible:!0,index:11,label:"EFG %",format:"percent",invert:!1},TS_PCT:{visible:!1,index:12,label:"TS %",format:"percent",invert:!1},USG_PCT:{visible:!1,index:13,label:"USG %",format:"percent",invert:!1},PACE:{visible:!1,index:14,label:"PACE",format:"number",invert:!1},PIE:{visible:!0,index:15,label:"PIE",format:"percent",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$scope.compare.isReady=!0;var _searchObj={};for(var param in $scope.splits)$scope.params[param]=_searchObj[param]=$scope.splits[param].selected.val;PlayerVersusService.getStats($scope),DeepLinksFactory.setSearchURL(_searchObj)},$scope.$watch("compare",function(){$scope.compare.isReady&&($scope.params.PlayerID1=$scope.compare.left.lineupIDs[0]||$scope.params.PlayerID1,$scope.params.PlayerID2=$scope.compare.left.lineupIDs[1]||$scope.params.PlayerID2,$scope.params.PlayerID3=$scope.compare.left.lineupIDs[2]||$scope.params.PlayerID3,$scope.params.PlayerID4=$scope.compare.left.lineupIDs[3]||$scope.params.PlayerID4,$scope.params.PlayerID5=$scope.compare.left.lineupIDs[4]||$scope.params.PlayerID5,$scope.params.VsPlayerID1=$scope.compare.right.lineupIDs[0]||$scope.params.VsPlayerID1,$scope.params.VsPlayerID2=$scope.compare.right.lineupIDs[1]||$scope.params.VsPlayerID2,$scope.params.VsPlayerID3=$scope.compare.right.lineupIDs[2]||$scope.params.VsPlayerID3,$scope.params.VsPlayerID4=$scope.compare.right.lineupIDs[3]||$scope.params.VsPlayerID4,$scope.params.VsPlayerID5=$scope.compare.right.lineupIDs[4]||$scope.params.VsPlayerID5,$scope.params.TeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.PlayerTeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.VsTeamID=$scope.compare.right.team||$scope.params.VsTeamID,PlayerVersusService.getStats($scope),$scope.splits=Splits.get(splits))},!0)}]),stats.controller("PlayerVsPlayerFourFactorsCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS",function($scope,$location,Splits,PlayerVersusService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},"DateFrom","DateTo","PerMode","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","ShotClockRange"];$scope.splits=Splits.get(splits),$scope.params={Conference:"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,Division:"",GameSegment:$scope.splits.GameSegment.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,LeagueID:"00",Location:$scope.splits.Location.selected.val,MeasureType:"Four Factors",Month:$scope.splits.Month.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,Outcome:$scope.splits.Outcome.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Period:$scope.splits.Period.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlayerID1:0,PlayerID2:0,PlayerID3:0,PlayerID4:0,PlayerID5:0,PlayerTeamID:0,PlusMinus:$scope.splits.PlusMinus.selected.val,Rank:$scope.splits.Rank.selected.val,Season:$scope.splits.Season.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.va,TeamID:$location.search().VsTeamID,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,VsPlayerID1:0,VsPlayerID2:0,VsPlayerID3:0,VsPlayerID4:0,VsPlayerID5:0,VsTeamID:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},EFG_PCT:{visible:!0,index:1,label:"EFG %",format:"percent",invert:!1},FTA_RATE:{visible:!0,index:2,label:"FTA RT",format:"number",invert:!1},TM_TOV_PCT:{visible:!0,index:3,label:"TM TV %",format:"percent",invert:!1},OREB_PCT:{visible:!0,index:4,label:"OREB %",format:"percent",invert:!1},OPP_EFG_PCT:{visible:!0,index:5,label:"OPP EFG %",format:"percent",invert:!0},OPP_FTA_RATE:{visible:!0,index:6,label:"OPP FTA RT",format:"number",invert:!0},OPP_TOV_PCT:{visible:!0,index:7,label:"OPP FTM",format:"percent",invert:!0},OPP_OREB_PCT:{visible:!1,index:8,label:"OPP FTA",format:"percent",invert:!0}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}PlayerVersusService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){if("player"==$scope.compare.left.type)return void $location.path("/");PlayerVersusService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("PlayerVsPlayerOpponentCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS",function($scope,$location,Splits,PlayerVersusService,SEASONS){"use strict";var splits=[{name:"Season",initial:SEASONS.playerVsPlayerStats.Season},{name:"SeasonType",initial:SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"DateFrom","DateTo","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames"];$scope.splits=Splits.get(splits),$scope.params={Conference:"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,Division:"",GameSegment:$scope.splits.GameSegment.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,LeagueID:"00",Location:$scope.splits.Location.selected.val,MeasureType:"Opponent",Month:$scope.splits.Month.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,Outcome:$scope.splits.Outcome.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Period:$scope.splits.Period.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlayerID1:0,PlayerID2:0,PlayerID3:0,PlayerID4:0,PlayerID5:0,PlayerTeamID:0,PlusMinus:$scope.splits.PlusMinus.selected.val,Rank:$scope.splits.Rank.selected.val,Season:$scope.splits.Season.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,ShotClockRange:"",TeamID:$location.search().VsTeamID,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,VsPlayerID1:0,VsPlayerID2:0,VsPlayerID3:0,VsPlayerID4:0,VsPlayerID5:0,VsTeamID:0},$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},OPP_FGM:{visible:!1,index:1,label:"OPP FGM",format:"number",invert:!0},OPP_FGA:{visible:!1,index:2,label:"OPP FGA",format:"number",invert:!0},OPP_FG_PCT:{visible:!0,index:3,label:"OPP FG%",format:"percent",invert:!0},OPP_FG3M:{visible:!1,index:4,label:"OPP 3PM",format:"number",invert:!0},OPP_FG3A:{visible:!1,index:5,label:"OPP 3PA",format:"number",invert:!0},OPP_FG3_PCT:{visible:!0,index:6,label:"OPP 3P%",format:"percent",invert:!0},OPP_FTM:{visible:!1,index:7,label:"OPP FTM",format:"number",invert:!0},OPP_FTA:{visible:!1,index:8,label:"OPP FTA",format:"number",invert:!0},OPP_FT_PCT:{visible:!0,index:9,label:"OPP FT%",format:"percent",invert:!0},OPP_OREB:{visible:!1,index:10,label:"OPP OREB",format:"number",invert:!0},OPP_DREB:{visible:!1,index:11,label:"OPP DREB",format:"number",invert:!0},OPP_REB:{visible:!0,index:12,label:"OPP REB",format:"number",invert:!0},OPP_AST:{visible:!0,index:13,label:"OPP AST",format:"number",invert:!0},OPP_TOV:{visible:!1,index:14,label:"OPP TOV",format:"number",invert:!1},OPP_STL:{visible:!0,index:15,label:"OPP STL",format:"number",invert:!0},OPP_BLK:{visible:!0,index:16,label:"OPP BLK",format:"number",invert:!0},OPP_PF:{visible:!1,index:17,label:"OPP PF",format:"number",invert:!0},OPP_PTS:{visible:!1,index:18,label:"OPP PTS",format:"number",invert:!0}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$location.search().Split=[];for(var i in $scope.splits){var val=$scope.splits[i].selected.val;val!=$scope.splits[i].default&&$location.search().Split.push(val),$scope.params[i]=$scope.splits[i].selected.val}PlayerVersusService.getStats($scope),$location.search()},$scope.$watch("compare",function(){if($scope.compare.isReady){if("player"==$scope.compare.left.type)return void $location.path("/");PlayerVersusService.getStats($scope),splits[0].seasonRange=$location.search().range,$scope.splits=Splits.get(splits)}},!0)}]),stats.controller("PlayerVsPlayerBaseCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS","DeepLinksFactory",function($scope,$location,Splits,PlayerVersusService,SEASONS,DeepLinksFactory){"use strict";var _locationSearchObj=DeepLinksFactory.getSearchURL(),_isLineup=!!_locationSearchObj.LineupIDs,LineupIDArray=[],PlayerNameArray=[],VsLineupIDArray=[],VsPlayerNameArray=[];_isLineup&&(LineupIDArray=_locationSearchObj.LineupIDs.split("~"),PlayerNameArray=_locationSearchObj.PlayerNames.split("~"),VsLineupIDArray=_locationSearchObj.VsLineupIDs.split("~"),VsPlayerNameArray=_locationSearchObj.VsPlayerNames.split("~"));var splits=[{name:"Season",initial:_locationSearchObj.Season||SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().seasonRange},{name:"SeasonType",initial:_locationSearchObj.SeasonType||"Regular Season",without:["Pre Season"]},{name:"PerMode",initial:_locationSearchObj.PerMode||"PerGame",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"DateFrom","DateTo","GameSegment","LastNGames","Location","Month","OpponentTeamID","Outcome","Period","SeasonSegment","ShotClockRange","VsConference","VsDivision"];$scope.splits=Splits.get(splits),$scope.params={Conference:"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,Division:"",GameSegment:$scope.splits.GameSegment.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,LeagueID:"00",Location:$scope.splits.Location.selected.val,MeasureType:"Base",Month:$scope.splits.Month.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,Outcome:$scope.splits.Outcome.selected.val,PaceAdjust:"N",Period:$scope.splits.Period.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlayerID1:LineupIDArray[0]||0,PlayerID2:LineupIDArray[1]||0,PlayerID3:LineupIDArray[2]||0,PlayerID4:LineupIDArray[3]||0,PlayerID5:LineupIDArray[4]||0,PlayerTeamID:_locationSearchObj.PlayerTeamID||1,PlusMinus:"N",Rank:"N",Season:_locationSearchObj.Season||$scope.splits.Season.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,SeasonType:_locationSearchObj.SeasonType||$scope.splits.SeasonType.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.val,TeamID:$location.search().VsTeamID,VsDivision:$scope.splits.VsDivision.selected.val,VsConference:$scope.splits.VsConference.selected.val,VsPlayerID1:VsLineupIDArray[0]||0,VsPlayerID2:VsLineupIDArray[1]||0,VsPlayerID3:VsLineupIDArray[2]||0,VsPlayerID4:VsLineupIDArray[3]||0,VsPlayerID5:VsLineupIDArray[4]||0,VsTeamID:_locationSearchObj.VsTeamID||1},_isLineup&&($scope.compare.left.lineupIDs=LineupIDArray.map(function(value){return value}),$scope.compare.right.lineupIDs=VsLineupIDArray.map(function(value){return value}),$scope.compare.left.lineupIDs.forEach(function(value,index){$scope.compare.left.lineupChosen[index]={PLAYER_ID:value,PLAYER:PlayerNameArray[index]}}),$scope.compare.right.lineupIDs.forEach(function(value,index){$scope.compare.right.lineupChosen[index]={PLAYER_ID:value,PLAYER:VsPlayerNameArray[index]}}),$scope.compare.left.lineup=$scope.compare.left.lineupIDs,$scope.compare.right.lineup=$scope.compare.right.lineupIDs,$scope.compare.left.type=$scope.compare.right.type="lineup",PlayerVersusService.getStats($scope)),$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},FGM:{visible:!1,index:1,label:"FGM",format:"number",invert:!1},FGA:{visible:!1,index:2,label:"FGA",format:"number",invert:!1},FG_PCT:{visible:!1,index:3,label:"FG%",format:"percent",invert:!1},FG3M:{visible:!1,index:4,label:"3PM",format:"number",invert:!1},FG3A:{visible:!1,index:5,label:"3PA",format:"number",invert:!1},FG3_PCT:{visible:!1,index:6,label:"3P%",format:"percent",invert:!1},FTM:{visible:!1,index:7,label:"FTM",format:"number",invert:!1},FTA:{visible:!1,index:8,label:"FTA",format:"number",invert:!1},FT_PCT:{visible:!1,index:9,label:"FT%",format:"percent",invert:!1},OREB:{visible:!1,index:10,label:"OREB",format:"number",invert:!1},DREB:{visible:!1,index:11,label:"DREB",format:"number",invert:!1},REB:{visible:!0,index:12,label:"REB",format:"number",invert:!1},AST:{visible:!0,index:13,label:"AST",format:"number",invert:!1},TOV:{visible:!1,index:14,label:"TOV",format:"number",invert:!0},STL:{visible:!0,index:15,label:"STL",format:"number",invert:!1},BLK:{visible:!0,index:16,label:"BLK",format:"number",invert:!1},PF:{visible:!1,index:17,label:"PF",format:"number",invert:!1},PTS:{visible:!0,index:18,label:"PTS",format:"number",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$scope.compare.isReady=!0;var _searchObj={};for(var param in $scope.splits)$scope.params[param]=_searchObj[param]=$scope.splits[param].selected.val;PlayerVersusService.getStats($scope),DeepLinksFactory.setSearchURL(_searchObj)},$scope.$watch("compare",function(){$scope.compare.isReady&&($scope.params.PlayerID1=$scope.compare.left.lineupIDs[0]||$scope.params.PlayerID1,$scope.params.PlayerID2=$scope.compare.left.lineupIDs[1]||$scope.params.PlayerID2,$scope.params.PlayerID3=$scope.compare.left.lineupIDs[2]||$scope.params.PlayerID3,$scope.params.PlayerID4=$scope.compare.left.lineupIDs[3]||$scope.params.PlayerID4,$scope.params.PlayerID5=$scope.compare.left.lineupIDs[4]||$scope.params.PlayerID5,$scope.params.VsPlayerID1=$scope.compare.right.lineupIDs[0]||$scope.params.VsPlayerID1,$scope.params.VsPlayerID2=$scope.compare.right.lineupIDs[1]||$scope.params.VsPlayerID2,$scope.params.VsPlayerID3=$scope.compare.right.lineupIDs[2]||$scope.params.VsPlayerID3,$scope.params.VsPlayerID4=$scope.compare.right.lineupIDs[3]||$scope.params.VsPlayerID4,$scope.params.VsPlayerID5=$scope.compare.right.lineupIDs[4]||$scope.params.VsPlayerID5,$scope.params.TeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.PlayerTeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.VsTeamID=$scope.compare.right.team||$scope.params.VsTeamID,PlayerVersusService.getStats($scope),$scope.splits=Splits.get(splits))},!0)}]),stats.controller("PlayerVsPlayerMiscCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS","DeepLinksFactory",function($scope,$location,Splits,PlayerVersusService,SEASONS,DeepLinksFactory){"use strict";var _locationSearchObj=DeepLinksFactory.getSearchURL(),_isLineup=!!_locationSearchObj.LineupIDs,LineupIDArray=[],PlayerNameArray=[],VsLineupIDArray=[],VsPlayerNameArray=[];_isLineup&&(LineupIDArray=_locationSearchObj.LineupIDs.split("~"),PlayerNameArray=_locationSearchObj.PlayerNames.split("~"),VsLineupIDArray=_locationSearchObj.VsLineupIDs.split("~"),VsPlayerNameArray=_locationSearchObj.VsPlayerNames.split("~"));var splits=[{name:"Season",initial:_locationSearchObj.Season||SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().SeasonRange},{name:"PerMode",include:[{val:"Per100Possessions",text:"Per 100 Poss"},{val:"Per100Plays",text:"Per 100 Plays"},{val:"Per48",text:"Per 48 Minutes"},{val:"Per40",text:"Per 40 Minutes"},{val:"Per36",text:"Per 36 Minutes"},{val:"PerMinute",text:"Per 1 Minute"},{val:"PerPossession",text:"Per 1 Poss"},{val:"PerPlay",text:"Per 1 Play"},{val:"MinutesPer",text:"Minutes Per"}]},"DateFrom","DateTo","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","SeasonType","ShotClockRange"];$scope.splits=Splits.get(splits),$scope.params={Conference:"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,Division:"",GameSegment:$scope.splits.GameSegment.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,LeagueID:"00",Location:$scope.splits.Location.selected.val,MeasureType:"Misc",Month:$scope.splits.Month.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,Outcome:$scope.splits.Outcome.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Period:$scope.splits.Period.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlayerID1:LineupIDArray[0]||0,PlayerID2:LineupIDArray[1]||0,PlayerID3:LineupIDArray[2]||0,PlayerID4:LineupIDArray[3]||0,PlayerID5:LineupIDArray[4]||0,PlayerTeamID:_locationSearchObj.PlayerTeamID||1,PlusMinus:$scope.splits.PlusMinus.selected.val,Rank:$scope.splits.Rank.selected.val,Season:$scope.splits.Season.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.va,TeamID:$location.search().VsTeamID,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,VsPlayerID1:VsLineupIDArray[0]||0,VsPlayerID2:VsLineupIDArray[1]||0,VsPlayerID3:VsLineupIDArray[2]||0,VsPlayerID4:VsLineupIDArray[3]||0,VsPlayerID5:VsLineupIDArray[4]||0,VsTeamID:_locationSearchObj.VsTeamID||1},_isLineup&&($scope.compare.left.lineupIDs=LineupIDArray.map(function(value){return value}),$scope.compare.right.lineupIDs=VsLineupIDArray.map(function(value){return value}),$scope.compare.left.lineupIDs.forEach(function(value,index){$scope.compare.left.lineupChosen[index]={PLAYER_ID:value,PLAYER:PlayerNameArray[index]}}),$scope.compare.right.lineupIDs.forEach(function(value,index){$scope.compare.right.lineupChosen[index]={PLAYER_ID:value,PLAYER:VsPlayerNameArray[index]}}),$scope.compare.left.lineup=$scope.compare.left.lineupIDs,$scope.compare.right.lineup=$scope.compare.right.lineupIDs,$scope.compare.left.type=$scope.compare.right.type="lineup",PlayerVersusService.getStats($scope)),$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},PTS_OFF_TOV:{visible:!0,index:1,label:"PTS OFF TOV",format:"number",invert:!1},PTS_2ND_CHANCE:{visible:!0,index:2,label:"PTS 2ND CHANCE",format:"number",invert:!1},PTS_FB:{visible:!0,index:3,label:"PTS FB",format:"number",invert:!1},PTS_PAINT:{visible:!1,index:4,label:"PTS PAINT",format:"number",invert:!1},OPP_PTS_OFF_TOV:{visible:!1,index:5,label:"OPP PTS OFF TOV",format:"number",invert:!0},OPP_PTS_2ND_CHANCE:{visible:!1,index:6,label:"OPP PTS 2ND CHANCE",format:"number",invert:!0},OPP_PTS_FB:{visible:!1,index:7,label:"OPP PTS FB",format:"number",invert:!0},OPP_PTS_PAINT:{visible:!0,index:8,label:"OPP PTS PAINT",format:"number",invert:!0},BLK:{visible:!1,index:9,label:"BLK",format:"number",invert:!1},BLKA:{visible:!1,index:10,label:"BLKA",format:"number",invert:!0},PF:{visible:!1,index:11,label:"PF",format:"number",invert:!0},PFD:{visible:!1,index:12,label:"PFD",format:"number",invert:!0}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$scope.compare.isReady=!0;var _searchObj={};for(var param in $scope.splits)$scope.params[param]=_searchObj[param]=$scope.splits[param].selected.val;PlayerVersusService.getStats($scope),DeepLinksFactory.setSearchURL(_searchObj)},$scope.$watch("compare",function(){$scope.compare.isReady&&($scope.params.PlayerID1=$scope.compare.left.lineupIDs[0]||$scope.params.PlayerID1,$scope.params.PlayerID2=$scope.compare.left.lineupIDs[1]||$scope.params.PlayerID2,$scope.params.PlayerID3=$scope.compare.left.lineupIDs[2]||$scope.params.PlayerID3,$scope.params.PlayerID4=$scope.compare.left.lineupIDs[3]||$scope.params.PlayerID4,$scope.params.PlayerID5=$scope.compare.left.lineupIDs[4]||$scope.params.PlayerID5,$scope.params.VsPlayerID1=$scope.compare.right.lineupIDs[0]||$scope.params.VsPlayerID1,$scope.params.VsPlayerID2=$scope.compare.right.lineupIDs[1]||$scope.params.VsPlayerID2,$scope.params.VsPlayerID3=$scope.compare.right.lineupIDs[2]||$scope.params.VsPlayerID3,$scope.params.VsPlayerID4=$scope.compare.right.lineupIDs[3]||$scope.params.VsPlayerID4,$scope.params.VsPlayerID5=$scope.compare.right.lineupIDs[4]||$scope.params.VsPlayerID5,$scope.params.TeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.PlayerTeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.VsTeamID=$scope.compare.right.team||$scope.params.VsTeamID,PlayerVersusService.getStats($scope),$scope.splits=Splits.get(splits))},!0)}]),stats.controller("PlayerVsPlayerScoringCtrl",["$scope","$location","Splits","PlayerVersusService","SEASONS","DeepLinksFactory",function($scope,$location,Splits,PlayerVersusService,SEASONS,DeepLinksFactory){"use strict";var _locationSearchObj=DeepLinksFactory.getSearchURL(),_isLineup=!!_locationSearchObj.LineupIDs,LineupIDArray=[],PlayerNameArray=[],VsLineupIDArray=[],VsPlayerNameArray=[];_isLineup&&(LineupIDArray=_locationSearchObj.LineupIDs.split("~"),PlayerNameArray=_locationSearchObj.PlayerNames.split("~"),VsLineupIDArray=_locationSearchObj.VsLineupIDs.split("~"),VsPlayerNameArray=_locationSearchObj.VsPlayerNames.split("~"));var splits=[{name:"Season",initial:_locationSearchObj.Season||SEASONS.playerVsPlayerStats.Season,seasonRange:$location.search().range},{name:"SeasonType",initial:_locationSearchObj.SeasonType||SEASONS.playerVsPlayerStats.SeasonType,without:["Pre Season"]},{name:"PerMode",include:[]},"DateFrom","DateTo","PlusMinus","PaceAdjust","Rank","Outcome","Location","Month","SeasonSegment","OpponentTeamID","VsConference","VsDivision","GameSegment","Period","LastNGames","ShotClockRange"];$scope.splits=Splits.get(splits),$scope.params={Conference:"",DateFrom:$scope.splits.DateFrom.selected.val,DateTo:$scope.splits.DateTo.selected.val,Division:"",GameSegment:$scope.splits.GameSegment.selected.val,LastNGames:$scope.splits.LastNGames.selected.val,LeagueID:"00",Location:$scope.splits.Location.selected.val,MeasureType:"Scoring",Month:$scope.splits.Month.selected.val,OpponentTeamID:$scope.splits.OpponentTeamID.selected.val,Outcome:$scope.splits.Outcome.selected.val,PaceAdjust:$scope.splits.PaceAdjust.selected.val,Period:$scope.splits.Period.selected.val,PerMode:$scope.splits.PerMode.selected.val,PlayerID1:LineupIDArray[0]||0,PlayerID2:LineupIDArray[1]||0,PlayerID3:LineupIDArray[2]||0,PlayerID4:LineupIDArray[3]||0,PlayerID5:LineupIDArray[4]||0,PlayerTeamID:_locationSearchObj.PlayerTeamID||1,PlusMinus:$scope.splits.PlusMinus.selected.val,Rank:$scope.splits.Rank.selected.val,Season:$scope.splits.Season.selected.val,SeasonSegment:$scope.splits.SeasonSegment.selected.val,SeasonType:$scope.splits.SeasonType.selected.val,ShotClockRange:$scope.splits.ShotClockRange.selected.va,TeamID:$location.search().VsTeamID,VsConference:$scope.splits.VsConference.selected.val,VsDivision:$scope.splits.VsDivision.selected.val,VsPlayerID1:VsLineupIDArray[0]||0,VsPlayerID2:VsLineupIDArray[1]||0,VsPlayerID3:VsLineupIDArray[2]||0,VsPlayerID4:VsLineupIDArray[3]||0,VsPlayerID5:VsLineupIDArray[4]||0,VsTeamID:_locationSearchObj.VsTeamID||1},_isLineup&&($scope.compare.left.lineupIDs=LineupIDArray.map(function(value){return value}),$scope.compare.right.lineupIDs=VsLineupIDArray.map(function(value){return value}),$scope.compare.left.lineupIDs.forEach(function(value,index){$scope.compare.left.lineupChosen[index]={PLAYER_ID:value,PLAYER:PlayerNameArray[index]}}),$scope.compare.right.lineupIDs.forEach(function(value,index){$scope.compare.right.lineupChosen[index]={PLAYER_ID:value,PLAYER:VsPlayerNameArray[index]}}),$scope.compare.left.lineup=$scope.compare.left.lineupIDs,$scope.compare.right.lineup=$scope.compare.right.lineupIDs,$scope.compare.left.type=$scope.compare.right.type="lineup",PlayerVersusService.getStats($scope)),$scope.showCol={MIN:{visible:!1,index:0,label:"MIN",format:"number",invert:!1},PCT_FGA_2PT:{visible:!1,index:1,label:"% FGA 2PT",format:"percent",invert:!1},PCT_FGA_3PT:{visible:!1,index:2,label:"% FGA 3PT",format:"percent",invert:!1},PCT_PTS_2PT:{visible:!1,index:3,label:"% PTS 2PT",format:"percent",invert:!1},PCT_PTS_2PT_MR:{visible:!0,index:4,label:"% PTS 2PT MR",format:"percent",invert:!1},PCT_PTS_3PT:{visible:!0,index:5,label:"% PTS 3PT",format:"percent",invert:!1},PCT_PTS_FB:{visible:!0,index:6,label:"% PTS FB",format:"percent",invert:!1},PCT_PTS_FT:{visible:!0,index:7,label:"% PTS FT",format:"percent",invert:!1},PCT_PTS_OFF_TOV:{visible:!1,index:8,label:"% PTS OFF TOV",format:"percent",invert:!1},PCT_PTS_PAINT:{visible:!0,index:9,label:"% PTS PAINT",format:"percent",invert:!1},PCT_AST_2PM:{visible:!1,index:10,label:"% AST 2PM",format:"percent",invert:!1},PCT_UAST_2PM:{visible:!1,index:11,label:"% UAST 2PM",format:"percent",invert:!1},PCT_AST_3PM:{visible:!1,index:12,label:"% AST 3PM ",format:"percent",invert:!1},PCT_UAST_3PM:{visible:!1,index:13,label:"% UAST 3PM",format:"percent",invert:!1},PCT_AST_FGM:{visible:!1,index:14,label:"% AST FGM",format:"percent",invert:!1},PCT_UAST_FGM:{visible:!1,index:15,label:"% UAST FGM",format:"percent",invert:!1}},$scope.columns=[];for(var i in $scope.showCol)$scope.showCol[i].name=i,$scope.columns.push($scope.showCol[i]);$scope.onrunit=function(){$scope.compare.isReady=!0;var _searchObj={};for(var param in $scope.splits)$scope.params[param]=_searchObj[param]=$scope.splits[param].selected.val;PlayerVersusService.getStats($scope),DeepLinksFactory.setSearchURL(_searchObj)},$scope.$watch("compare",function(){$scope.compare.isReady&&($scope.params.PlayerID1=$scope.compare.left.lineupIDs[0]||$scope.params.PlayerID1,$scope.params.PlayerID2=$scope.compare.left.lineupIDs[1]||$scope.params.PlayerID2,$scope.params.PlayerID3=$scope.compare.left.lineupIDs[2]||$scope.params.PlayerID3,$scope.params.PlayerID4=$scope.compare.left.lineupIDs[3]||$scope.params.PlayerID4,$scope.params.PlayerID5=$scope.compare.left.lineupIDs[4]||$scope.params.PlayerID5,$scope.params.VsPlayerID1=$scope.compare.right.lineupIDs[0]||$scope.params.VsPlayerID1,$scope.params.VsPlayerID2=$scope.compare.right.lineupIDs[1]||$scope.params.VsPlayerID2,$scope.params.VsPlayerID3=$scope.compare.right.lineupIDs[2]||$scope.params.VsPlayerID3,$scope.params.VsPlayerID4=$scope.compare.right.lineupIDs[3]||$scope.params.VsPlayerID4,$scope.params.VsPlayerID5=$scope.compare.right.lineupIDs[4]||$scope.params.VsPlayerID5,$scope.params.TeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.PlayerTeamID=$scope.compare.left.team||$scope.params.PlayerTeamID,$scope.params.VsTeamID=$scope.compare.right.team||$scope.params.VsTeamID,PlayerVersusService.getStats($scope),$scope.splits=Splits.get(splits))},!0)}]),function(){function statsFanduelChartDirective(){return{restrict:"AE",replace:!1,scope:{stats:"="},templateUrl:"/templates/charts/stats-fanduel-chart.html",controller:statsFanduelChartController}}function statsFanduelChartController($scope,$filter){function onGameData(stats){stats&&($scope.chart.maxValue=getMaxValue(stats),$scope.isLoading=!1)}function getMaxValue(stats){var max=0;for(var i in $scope.categories){var s=$scope.categories[i],l=Math.max(stats.vtm.player[s],stats.htm.player[s]);max=l>max?l:max}return max}function getStatTotalHeight(value){return value/$scope.chart.maxValue*$scope.chart.barchartMaxHeight}$scope.chart={width:590,height:730,barchartMaxHeight:220,barchartWidth:30},$scope.isLoading=!0,$scope.getStatTotalHeight=getStatTotalHeight,$scope.responsiveOptions={min:300,max:1140},$scope.categories=["PTS","REB","AST","BLK","STL","TOV"],$scope.$watch("stats",onGameData,!0)}stats.directive("statsFanduelChart",statsFanduelChartDirective),statsFanduelChartController.$inject=["$scope","$filter"]}(),function(){function statsGameFlowDirective(){return{restrict:"E",transclude:!1,templateUrl:"/templates/charts/stats-game-flow.html",scope:{gameSummary:"="},controller:statsGameFlowController}}function statsGameFlowController($scope){function onSummaryUpdate(summary){if(summary&&summary.events){$scope.summary=summary;var maxMargin=getMaxMargin(summary.events),periods=getTotalPeriods(summary.events),seconds=getTotalSeconds(periods);$scope.xAxis=getPeriodAxisMarkers(periods,$scope.chart.width),
$scope.yAxisMargin=getMarginAxisDivisions(maxMargin,$scope.chart.height),$scope.eventData=parseEventData(summary.events,$scope.chart.width,seconds,$scope.chart.height,maxMargin),$scope.htmPath=getPathForEventArray($scope.eventData.htm,$scope.chart.height,$scope.chart.width),$scope.vtmPath=getPathForEventArray($scope.eventData.vtm,$scope.chart.height,$scope.chart.width)}}$scope.svg={height:550,width:1140},$scope.chart={padding:{bottom:120,left:60,right:40,top:20}},$scope.responsiveOptions={min:300,max:1140},$scope.chart.height=$scope.svg.height-($scope.chart.padding.bottom+$scope.chart.padding.top),$scope.chart.width=$scope.svg.width-($scope.chart.padding.left+$scope.chart.padding.right),$scope.$watch("gameSummary",onSummaryUpdate,!0)}function getMaxMargin(events){var margin=0;for(var i in events)margin=Math.abs(events[i].HOME_SCORE_MARGIN)>margin?Math.abs(events[i].HOME_SCORE_MARGIN):margin;var rounded=margin+10-(margin+10)%10;return rounded}function getMarginAxisDivisions(maxMargin,height){for(var array=[],spread=5,divisions=maxMargin/spread,pixelsPerDivision=height/(2*divisions),i=maxMargin;i>=-maxMargin;i-=spread){var obj={text:Math.abs(i)};array.push(obj)}for(var j in array)array[j].y=j*pixelsPerDivision;return array}function getPeriodAxisMarkers(periods,width){for(var array=[],numOT=periods-4,totalMinutes=48+5*numOT,pixelsPerMinute=width/totalMinutes,i=0;i<periods;i+=1){var obj={period:i+1};if(periods<=4)obj.x=i*pixelsPerMinute*12,obj.text="Q"+obj.period;else if(periods>4&&i<4)obj.x=i*pixelsPerMinute*12,obj.text="Q"+obj.period;else if(periods>4&&i>=4){var ot=obj.period-4;obj.x=4*pixelsPerMinute*12+(ot-1)*pixelsPerMinute*5,obj.text="OT"+ot}array.push(obj)}return array}function getTotalPeriods(events){return events.slice(-1)[0].PERIOD}function getTotalSeconds(periods){return periods<=4?720*periods:2880+300*(periods-4)}function getPathXPosition(period,secondsRemaining,pixelsPerSecond){var second=0;return second=period<=4?720*(period-1)+(720-secondsRemaining):2880+300*(period-5)+(300-secondsRemaining),second*pixelsPerSecond}function parseEventData(events,width,seconds,height,margin){var half=height/2,pixelsPerSecond=width/seconds,pixelsPerPoint=half/margin,htm=[{e:null,x:0,y:half}],vtm=[{e:null,x:0,y:half}],pct=[{e:null,x:0,y:half}],pts={htm:0,vtm:0};for(var i in events){var e=events[i],x=getPathXPosition(e.PERIOD,e.SECONDS_REMAINING,pixelsPerSecond);pts.htm=e.HOME_PTS,pts.vtm=e.VISITOR_PTS,htm.push({e:e,f:"h"==e.LOCATION,x:x,y:Math.max(e.HOME_SCORE_MARGIN*pixelsPerPoint,0)+half,z:e.HOME_SCORE_MARGIN*pixelsPerPoint+half}),vtm.push({e:e,f:"v"==e.LOCATION,x:x,y:Math.max(e.HOME_SCORE_MARGIN*-1*pixelsPerPoint,0)*-1+half,z:e.HOME_SCORE_MARGIN*pixelsPerPoint+half}),pct.push({e:e,x:x,y:(e.HOME_PCT-.5)*height+half})}return htm.push({e:null,x:width,y:half}),vtm.push({e:null,x:width,y:half}),pct.push({e:null,x:width,y:half}),{htm:htm,vtm:vtm,pct:pct}}function getPathForEventArray(points,height,width){var d="M0 "+height/2;for(var i in points){var p=points[i];d+=" H"+p.x.toFixed(1)+" V"+p.y.toFixed(1)}return d+=" H"+width+" V"+height/2+" Z"}stats.directive("statsGameFlow",statsGameFlowDirective),statsGameFlowController.$inject=["$scope"]}(),function(){function statsHeadToHeadChartDirective(){return{restrict:"AE",replace:!1,scope:{stats:"=",vtm:"=",htm:"="},templateUrl:"/templates/charts/stats-head-to-head-chart.html",controller:statsHeadToHeadChartController}}function statsHeadToHeadChartController($scope,$filter){function onGameData(stats){stats&&($scope.chart.maxValue=getMaxValue(stats),$scope.isLoading=!1)}function getMaxValue(stats){var max=0;for(var i in stats){var s=stats[i],l=Math.max(s.vtm||0,s.htm||0);max=l>max?l:max}return max}function getStatTotal(value){return isNaN(value)?0:value/$scope.chart.maxValue*$scope.chart.maxRectWidth}function getFormattedStat(stat,label){return isNaN(stat)?"-":label.indexOf("%")>-1?stat.toFixed(1):stat}$scope.chart={width:800,height:670,padding:{left:90,right:90,top:20,bottom:20},group:{height:50,labelWidth:100,padding:{top:20}}},$scope.chart.maxRectWidth=280,$scope.isLoading=!0,$scope.getStatTotal=getStatTotal,$scope.getFormattedStat=getFormattedStat,$scope.responsiveOptions={min:300,max:1140},$scope.$watch("stats",onGameData,!0)}stats.directive("statsHeadToHeadChart",statsHeadToHeadChartDirective),statsHeadToHeadChartController.$inject=["$scope","$filter"]}(),function(){function statsRoseChartDirective(){return{restrict:"AE",replace:!1,scope:{linescores:"="},templateUrl:"/templates/charts/stats-rose-chart.html",controller:statsRoseChartController}}function statsRoseChartController($scope,$filter){function onGameData(linescores){if(linescores){$scope.stats.forEach(getLeader.bind(null,linescores));var statValues=$scope.stats.map(getStatValue),max=Math.max.apply(Math,statValues),ppp=(maxRadius-minRadius)/max;$scope.stats.forEach(setRadius.bind(null,ppp,minRadius)),$scope.isLoading=!1}}function setRadius(ppp,min,stat){stat.radius=ppp*stat.value+min,stat.cx=stat.radius*Math.cos(stat.rads),stat.cy=stat.radius*Math.sin(stat.rads),stat.line.x=stat.line.len*Math.cos(stat.rads),stat.line.y=stat.line.len*Math.sin(stat.rads),stat.left="left"===stat.side?-140:0}function getStatValue(stat){return stat.value}function getLeader(game,stat){var s=stat.cat,t=stat.type,players=game[t].players;stat.team=game[t];var leader=players.reduce(function(a,b){return a&&a[s]?b&&b[s]?a[s]>=b[s]?a:b:a:b});stat.value=leader[s],stat.player=leader}function getArcPath(x,y,radius,startAngle,endAngle){var start=polarToCartesian(x,y,radius,endAngle),end=polarToCartesian(x,y,radius,startAngle),arcSweep=endAngle-startAngle<=180?"0":"1",d=["M",x,y,"L",start.x,start.y,"A",radius,radius,0,arcSweep,0,end.x,end.y,"Z"].join(" ");return d}function polarToCartesian(centerX,centerY,radius,angleInDegrees){var angleInRadians=(angleInDegrees-90)*Math.PI/180;return{x:centerX+radius*Math.cos(angleInRadians),y:centerY+radius*Math.sin(angleInRadians)}}$scope.width=1140,$scope.height=920,$scope.paddingTop=200,$scope.chartHeight=$scope.height-$scope.paddingTop,$scope.isLoading=!0,$scope.stats=[],$scope.getArcPath=getArcPath,$scope.responsiveOptions={min:300,max:1140};for(var cats=["REB","BLK","AST","PTS"],types=["vtm","htm"],delta=360/(cats.length*types.length),minRadius=90,maxRadius=300,i=0;i<cats.length;++i)for(var j=0;j<types.length;++j){var index=i*types.length+j,obj={cat:cats[i],type:types[j],index:index,angle:index*delta,rads:(index*delta-90+delta/2)*Math.PI/180,line:{len:350},side:index*delta+delta/2>180?"left":"right"};$scope.stats.push(obj)}$scope.$watch("linescores",onGameData,!0)}stats.directive("statsRoseChart",statsRoseChartDirective),statsRoseChartController.$inject=["$scope","$filter"]}(),stats.directive("statsShotchartDetail",function(){"use strict";return{restrict:"A",scope:{zone:"="},link:function(scope,element,attrs){scope.$watch("zone",function(zone){if(zone){console.log(zone);var svgNS="http://www.w3.org/2000/svg",ratio=document.createElementNS(svgNS,"text");ratio.setAttributeNS("","text-anchor","middle"),ratio.setAttributeNS("","stroke","none"),ratio.setAttributeNS("","fill","#000000"),ratio.setAttributeNS("","font-family","Arial"),ratio.setAttributeNS("","font-size","12px"),ratio.setAttributeNS("","dy","0"),ratio.textContent=zone.FGM+" / "+zone.FGA;var pct=document.createElementNS(svgNS,"text");pct.setAttributeNS("","text-anchor","middle"),pct.setAttributeNS("","stroke","none"),pct.setAttributeNS("","fill","#000000"),pct.setAttributeNS("","font-family","Arial"),pct.setAttributeNS("","font-size","12px"),pct.setAttributeNS("","dy","14"),pct.textContent=(100*zone.FG_PCT).toFixed(1)+"%",element.append(ratio).append(pct)}})}}}),stats.directive("statsShotchartMarker",function(){"use strict";return{restrict:"A",scope:{shot:"="},link:function(scope,element,attrs){scope.$watch("shot",function(shot){var translate="translate("+1.2*(shot.LOC_X+250)+","+1.2*(shot.LOC_Y+50)+")",madeflag=shot.SHOT_MADE_FLAG?"made":"missed";element.html('<circle cx="0" cy="0" r="5" class="'+madeflag+'" />'),element.attr("transform",translate)})}}}),function(){function statsSvgBarCompareDirective(){return{restrict:"A",scope:{stats:"="},templateUrl:"/templates/charts/stats-svg-bar-compare.html",controller:statsSvgBarCompareController}}function statsSvgBarCompareController($scope){$scope.chart={height:100,width:800,padding:{left:50,right:50,top:10,bottom:10},label:{width:100},rectHeight:40},$scope.$watch("stats",function(stats){stats&&($scope.total=stats.left.value+stats.right.value,$scope.pct={left:stats.left.value/total,right:stats.right.value/total})})}stats.directive("statsSvgBarCompare",statsSvgBarCompareDirective),statsSvgBarCompareController.$inject=["$scope"]}(),function(){function statsSvgDonutChartDirective(){return{restrict:"E",templateUrl:"/templates/charts/stats-svg-donut-chart.html",scope:{stat:"="},controller:statsSvgDonutChartController}}function statsSvgDonutChartController($scope){function onStatDataUpdate(stat){if(stat){var total=stat.vtm.value+stat.htm.value,pct=stat.htm.value/total*100,unit=2*Math.PI/100,startangle=0,endangle=pct*unit,half=$scope.half,x1=half+Math.sin(startangle)*half,y1=half-Math.cos(startangle)*half,x2=half+Math.sin(endangle)*half,y2=half-Math.cos(endangle)*half,big=endangle-startangle>Math.PI?1:0,d=["M ",half,",",half," L ",x1,",",y1," A ",half,",",half," 0 ",big," 1 ",x2,",",y2," Z"].join("");$scope.path=d}}$scope.padding={left:50,right:50,top:50},$scope.size=300,$scope.half=$scope.size/2,$scope.innerRadius=70,$scope.statRadius=40,$scope.responsiveOptions={min:80,max:400},$scope.$watch("stat",onStatDataUpdate,!0)}stats.directive("statsSvgDonutChart",statsSvgDonutChartDirective),statsSvgDonutChartController.$inject=["$scope"]}(),function(){function statsSvgHeadshotDirective(){return{restrict:"AE",replace:!1,scope:{playerId:"@",playerName:"@",teamAbbr:"@",color:"@",x:"@",y:"@",side:"@"},templateUrl:"/templates/charts/stats-svg-headshot.html",controller:statsSvgHeadshotController}}function statsSvgHeadshotController($scope){function onAttrChange(){$scope.x=+$scope.x,$scope.y=+$scope.y,$scope.left="left"===$scope.side?$scope.width*-1:0}$scope.width=140,$scope.left=0,$scope.headshotHeight=113,$scope.rectHeight=52,$scope.height=$scope.headshotHeight+$scope.rectHeight,$scope.$watch("playerName",function(name){name&&($scope.firstName=name.match(/([a-zA-Z\-\.]+)(.*)/)[1].toUpperCase(),$scope.lastName=name.match(/([a-zA-Z\-\.]+)(.*)/)[2].toUpperCase())}),$scope.$watch("side",onAttrChange),$scope.$watch("x",onAttrChange),$scope.$watch("y",onAttrChange)}stats.directive("statsSvgHeadshot",statsSvgHeadshotDirective),statsSvgHeadshotController.$inject=["$scope"]}(),function(){function svgArcDirective(){return{restrict:"AE",replace:!1,scope:{x:"@",y:"@",r:"@",angle:"@",color:"@"},template:['<path ng-attr-d="{{ path }}" fill="{{ color }}" />'].join(""),controller:svgArcController}}function svgArcController($scope,$filter){function onAttrChange(attr){var x=+$scope.x,y=+$scope.y,r=+$scope.r,a=+$scope.angle;$scope.path=$filter("arcPath")(x,y,r,a,a+45)}$scope.$watch("x",onAttrChange),$scope.$watch("y",onAttrChange),$scope.$watch("r",onAttrChange),$scope.$watch("angle",onAttrChange)}stats.directive("svgArc",svgArcDirective),svgArcController.$inject=["$scope","$filter"]}(),function(){function svgImageEmbedDirective(){return{restrict:"A",replace:!1,transclude:!1,scope:{href:"@",height:"@",width:"@"},controller:svgImageEmbedController}}function svgImageEmbedController($scope,$element){function onAttrChange(){if($scope.href&&$scope.height&&$scope.width){for(;elm.hasChildNodes();)elm.removeChild(elm.lastChild);imgsvg.setAttributeNS("http://www.w3.org/1999/xlink","href",$scope.href),imgsvg.setAttribute("height",$scope.height),imgsvg.setAttribute("width",$scope.width),imgsvg.setAttribute("x",0),imgsvg.setAttribute("y",0),elm.appendChild(imgsvg)}}var elm=angular.element($element).get(0),imgsvg=document.createElementNS("http://www.w3.org/2000/svg","image");$scope.$watch("href",onAttrChange,!0),$scope.$watch("height",onAttrChange,!0),$scope.$watch("width",onAttrChange,!0)}stats.directive("svgImageEmbed",svgImageEmbedDirective),svgImageEmbedController.$inject=["$scope","$element"]}(),function(){function svgInclude(){return{restrict:"A",compile:compile}}function compile(tElement,tAttributes){function append(el){elm.appendChild(el)}var elm=tElement.get(0),selector=tElement.attr("svg-include"),inner=angular.element(selector).get(0).innerHTML,target=document.createElement("div");target.innerHTML="<svg>"+inner+"</svg>";var nodes=Array.prototype.slice.call(target.childNodes[0].childNodes);nodes.forEach(append)}stats.directive("svgInclude",svgInclude)}(),function(){function svgResponsiveDirective(){return{restrict:"A",replace:!1,scope:{svgResponsive:"="},controller:svgResponsiveController}}function svgResponsiveController($scope,$element,$window){function resizeChart(){if($scope.options){var width=Math.max(Math.min($scope.container.width(),$scope.options.max),$scope.options.min);$element.attr("width",width),$element.attr("height",width*$scope.ratio)}}var $w=angular.element($window);$scope.getWindowDimensions=function(){return{h:$w.height(),w:$w.width()}},$scope.$watch("svgResponsive",function(options){options&&($scope.options=options,$scope.ratio=$element.attr("height")/$element.attr("width"),$scope.container=options.selector?angular.element(options.selector):$element.parent().parent(),resizeChart())}),$scope.$watch($scope.getWindowDimensions,function(n,o){resizeChart()},!0),$w.bind("resize",function(){$scope.$apply()})}stats.directive("svgResponsive",svgResponsiveDirective),svgResponsiveController.$inject=["$scope","$element","$window"]}(),function(){function statsHomepageTileDirective(){return{restrict:"E",replace:!1,scope:{dataset:"=",template:"@",tileIndex:"=",currentIndex:"="},templateUrl:function(elem,attr){return["/templates/homepage/",attr.template,".html"].join("")},link:statsHomepageTileLink}}function statsHomepageTileLink(scope,elem,attr,ctrl){function setState(){scope.dataset&&scope.dataset.length&&(scope.isPlayer=!!scope.dataset[0].PLAYER_ID,scope.isTeam=!scope.isPlayer,scope.leader=scope.dataset[0],scope.runnerups=scope.dataset.slice(1))}function setVisibility(index){scope.isVisible=scope.tileIndex===index}function changePanel(num){scope.$emit("statsHomepagePanelDidChange",num)}scope.isPlayer=!1,scope.isTeam=!1,scope.changePanel=changePanel,scope.$watch("dataset",setState),scope.$watch("currentIndex",setVisibility)}stats.directive("statsHomepageTile",statsHomepageTileDirective)}(),function(){function InViewportDirective(){return{restrict:"A",scope:{inViewport:"="},controller:InViewportController}}function InViewportController($scope,$element,$timeout,$window){function checkInViewport(event){var docTop=$win.scrollTop(),docBot=docTop+$win.height(),elmTop=$elm.offset().top,elmBot=elmTop+$elm.height(),inView=elmBot<=docBot+$elm.height();inView&&($scope.hasFired=!0,$timeout($scope.defaults.callback.bind(this,$elm),$scope.defaults.delay)),$scope.hasFired&&$scope.defaults.triggerOnce&&(angular.element($window).unbind("scroll",checkInViewport),angular.element($window).unbind("resize",checkInViewport))}var $elm=angular.element($element),$win=angular.element($window);$scope.hasFired=!1,$scope.defaults={triggerOnce:!0,delay:500,callback:function(){}},$scope.$watch("inViewport",function(opt){opt&&($scope.defaults=angular.extend({},$scope.defaults,opt),$scope.hasFired=!1,checkInViewport())},!0),angular.element($window).bind("scroll",checkInViewport),angular.element($window).bind("resize",checkInViewport)}stats.directive("inViewport",InViewportDirective),InViewportController.$inject=["$scope","$element","$timeout","$window"]}(),function(){function nbaWithDirective(){return{scope:!0,link:linkFunction}}function linkFunction(scope,el,attr){function watchData(attr,i){var p=lowersize(i.substr(11)),a=attr[i];scope.$watch(a,function(val){scope[p]=val},!0)}function watchProp(attr,i){var p=lowersize(i.substr(7));attr.$observe(i,function(val){scope[p]=val})}for(var i in attr)"nbaWith"===i||(0===i.indexOf("nbaWithData")?watchData(attr,i):0===i.indexOf("nbaWith")&&watchProp(attr,i))}function lowersize(str){return str.charAt(0).toLowerCase()+str.slice(1)}stats.directive("nbaWith",nbaWithDirective)}(),function(){function StatsPlayerProfileBioController($scope,$sce,PlayerBioService){function onPlayerInfo(playerinfo){playerinfo&&playerinfo.PERSON_ID&&PlayerBioService.get(playerinfo.PERSON_ID).then(function(data){$scope.bio=$sce.trustAsHtml(data.Bio.professional)})}$scope.$watch("playerInfo",onPlayerInfo,!1)}stats.directive("statsPlayerProfileBio",function(){return{restrict:"E",templateUrl:"/templates/player/playerProfileBio.html",scope:{playerInfo:"="},controller:StatsPlayerProfileBioController}}),StatsPlayerProfileBioController.$inject=["$scope","$sce","PlayerBioService"]}(),stats.directive("statsSeriesMatchup",[function(){"use strict";return{restrict:"A",templateUrl:"/templates/playoffpicture/matchup.html",scope:{matchupInfo:"="}}}]),function(){"use strict";angular.module("stats").directive("scrollLeft",function(){return{restrict:"A",replace:!1,scope:{scrollLeft:"="},link:function(scope,element,attr){scope.$watch("scrollLeft",function(left){element.scrollLeft(left)})}}})}(),function(){function statsIframeDirective(){return{restrict:"A",scope:{},controller:statsIframeController}}function statsIframeController($scope,$element,$window){function resizeMsg(){var url=$window.location!=$window.parent.location?document.referrer:document.location,eventData={command:"resize",path:$window.location.pathname,height:$element.outerHeight(),"width:":$element.outerWidth()};parent.postMessage(angular.toJson(eventData),url)}$scope.$watch(function(){return $element.outerHeight()},function(newValue,oldValue){resizeMsg()}),$window.addEventListener("resize",function(){resizeMsg()})}stats.directive("statsIframeDirective",statsIframeDirective),statsIframeController.$inject=["$scope","$element","$window"]}(),function(){function statsLoaderDirective(){return{restrict:"A",replace:!1,template:['<div ng-show="statsLoader" class="loader">','<img src="/media/img/pacifier.svg" />',"</div>"].join(""),scope:{statsLoader:"="}}}stats.directive("statsLoader",statsLoaderDirective)}(),function(){function statsNoDataMsgDirective(){return{restrict:"A",replace:!1,template:['<div ng-show="statsNoDataMsg" class="no-data">',"<h1>No statistics are currently available for the selected filters.</h1>","</div>"].join(""),scope:{statsNoDataMsg:"="}}}stats.directive("statsNoDataMsg",statsNoDataMsgDirective)}(),function(){function statsRunItDirective(){return{restrict:"E",replace:!0,template:['<div class="col-sm-6 col-sm-offset-6 col-md-3 col-md-offset-9">','<a href="" class="run-it" ng-click="runit();">Run It</a>',"</div>"].join(""),controller:statsRunItController}}function statsRunItController($scope,$location){$scope.runit=function(){var splits=$scope.splits,params=$scope.params;for(var i in splits){var val=splits[i].selected.val;val==splits[i].default&&"SeasonType"!=i&&"Season"!=i?$location.search(i,null):$location.search(i,val),params[i]=val}$scope.$emit("runit")}}stats.directive("statsRunIt",statsRunItDirective),statsRunItController.$inject=["$scope","$location"]}(),function(){function statsSplitSelectDirective(){return{restrict:"EA",scope:{split:"=?"},template:['<select name="{{split.name}}" ng-model="split.selected" ng-options="v.text for v in split.options"></select>'].join("")}}stats.directive("statsSplitSelect",statsSplitSelectDirective)}(),function(){function statsTablePaginationDirective(){return{restrict:"A",replace:!0,template:['<div class="table-pagination" ng-if="totalPages > 1">','<span class="ng-scope ng-binding">Page {{currentPage}} of {{totalPages}} | {{totalRows}} Rows</span>','<div class="page-nav left disabled" ng-class="{disabled: currentPage == 1}" ng-click="playerPaginate(\'prev\')"><i class="fa fa-caret-left"></i></div>','<div class="page-nav right" ng-class="{disabled: currentPage == totalPages}" ng-click="playerPaginate(\'next\')"><i class="fa fa-caret-right"></i></div>',"</div>"].join("")}}stats.directive("statsTablePagination",statsTablePaginationDirective)}(),stats.directive("statsBroadcasterLogo",function(){"use strict";return{restrict:"E",scope:{broadcaster:"="},replace:!0,template:['<div broadcaster-logo class="broadcaster {{ broadcaster }}">',' <img ng-if="hasLogo" class="broadcast-logo" ng-src="{{ src }}" />',' <span ng-if="!hasLogo" class="broadcast-text">{{ broadcaster }}</span>',"</div>"].join(""),controller:["$scope",function($scope){$scope.hasLogo=!1,$scope.src="";var root="/media/img/broadcast-logos/",logos={ABC:"abc.png",ESPN:"espn.png","ESPN 2":"espn2.png","NBA TV":"nbatv.png",TNT:"tnt.png"};$scope.$watch("broadcaster",function(broadcaster){var logo=logos[broadcaster];logo?($scope.src=root+logo,$scope.hasLogo=!0):$scope.hasLogo=!1})}]}}),stats.directive("statsCompareBar",["$timeout",function($timeout){"use strict";return{restrict:"AE",scope:{player:"@",vs:"@",invert:"="},controller:["$scope","$element",function($scope,$element){function setBar(){var player=parseFloat($scope.player,10),vs=parseFloat($scope.vs,10),total=player+vs,pct=player/total*80;pct>80&&(pct=80),$element.css({width:"0%"}),$timeout(function(){$element.css({width:pct+"%"}),player>=vs&&!$scope.invert?$element.addClass("leader"):player<=vs&&$scope.invert?$element.addClass("leader"):$element.removeClass("leader")},100)}$scope.$watch("player",setBar),$scope.$watch("vs",setBar),$scope.$watch("invert",setBar)}]}}]),stats.directive("statsCompareSelector",["SEASONS","TEAMS","PlayerListService","PlayerSummaryService","TeamRosterService",function(SEASONS,TEAMS,PlayerListService,PlayerSummaryService,TeamRosterService){"use strict";return{restrict:"E",replace:!0,templateUrl:"/templates/vs/selector.html",scope:{side:"@",type:"=",id:"="},controller:["$scope","$element",function($scope,$element){$scope.isLoading=!1;var elm=$element.get(0);$scope.options=[{type:"Player",enabled:elm.hasAttribute("player")},{type:"Team",enabled:elm.hasAttribute("team")},{type:"Lineup",enabled:elm.hasAttribute("lineup")}],$scope.show={teamPicker:!1,playerPicker:!1,lineupPicker:!1},$scope.conferences=[{name:"Eastern",divisions:["Atlantic","Central","Southeast"]},{name:"Western",divisions:["Northwest","Pacific","Southwest"]}],$scope.teams=TEAMS;var params={Season:SEASONS.site.Season,LeagueID:SEASONS.site.LeagueID,IsOnlyCurrentSeason:"1"};PlayerListService.get(params).then(function(players){$scope.players=players}),$scope.changeSelection=function(type){console.log(type,$scope.side),$scope.show.selector=!1,$scope.show.playerPicker=!1,$scope.show.teamPicker=!1,$scope.show.lineupPicker=!1,"Player"==type&&($scope.show.playerPicker=!0),"Team"!=type&&"Lineup"!=type||($scope.show.teamPicker=!0)},$scope.selectPlayer=function(player){$scope.show.playerPicker=!1,console.log(player)},$scope.selectTeam=function(team){$scope.show.teamPicker=!1,$scope.show.lineupPicker?$scope.show.lineupPicker=!0:console.log("team selected",team)},$scope.selectLineup=function(lineup){$scope.lineupPicker=!1}}]}}]),stats.directive("statsCustomFilter",["$filter",function($filter){"use strict";return{restrict:"A",replace:!0,scope:{filter:"=",fields:"="},template:["<table>"," <tr>",'   <td class="close"><button ng-click="remove()"><i class="fa fa-times"></i></button></td>','   <td class="field"><select ng-model="field" ng-options="v.text for v in fields"></select></td>','   <td class="comparator"><select ng-model="comparator" ng-options="v.v for v in comparators"></select></td>','   <td class="val"><input type="text" ng-model="value" ng-model-options="{debounce: {default:500, blur:0}  }"></td>'," </tr>","</div>"].join(""),controller:["$scope","$element",function($scope,$element){function initFilter(){if($scope.fields&&$scope.filter){var s=$scope.filter.value.split("*");$scope.field=$filter("filter")($scope.fields,{name:s[0]},!0)[0],$scope.field||($scope.field=$scope.fields[0]),$scope.comparator=$filter("filter")($scope.comparators,{k:s[1]})[0],$scope.value=s[2]}}function setFilter(){$scope.field&&$scope.comparator&&($scope.filter.value=[$scope.field.name,$scope.comparator.k,getScopeValue()].join("*"),$scope.$emit("filterUpdated",$scope.filter))}function getScopeValue(){var _setPlayerHeight="PLAYER_HEIGHT_INCHES"===$scope.field.name;return _setPlayerHeight?$scope.value>60?$scope.value:$filter("toInches")($scope.value):$scope.value}$scope.comparators=[{k:"E",v:"="},{k:"NE",v:"≠"},{k:"G",v:">"},{k:"GE",v:"≥"},{k:"L",v:"<"},{k:"LE",v:"≤"}],$scope.toggled=!1,$scope.remove=function(){$scope.$emit("removeFilter",$scope.filter)},$scope.$watch("filter",initFilter),$scope.$watch("fields",initFilter),$scope.$watch("field",setFilter),$scope.$watch("comparator",setFilter),$scope.$watch("value",setFilter)}]}}]),stats.directive("statsCustomFilters",["$filter","$timeout","$location",function($filter,$timeout,$location){"use strict";function serializeCustomFilter(filters){var str=filters.map(function(n){return n.value}).join("|");$location.search("CF",str||null)}function deserializeCustomFilter(){var qs=$location.search().CF;if(!qs)return[];var filters=qs.split("|").map(function(n,i){return{name:"CF"+i,value:n}});return filters}return{restrict:"A",replace:!1,scope:{filters:"=",fields:"="},template:['<div class="col-sm-6 col-md-3">',' <button class="add-filter" ng-click="addFilter()"><i class="fa fa-filter"></i> Add A Custom Filter</button>',"</div>",'<div ng-repeat="filter in filters" class="col-sm-6 col-md-3">','   <div stats-custom-filter fields="fields" filter="filter"></div>',"</div>"].join(""),controller:["$scope","$element","$document",function($scope,$element,$document){$scope.filters||($scope.filters=deserializeCustomFilter());var maxFilters=5,current=$scope.filters.length;$scope.addFilter=function(){$scope.filters.length>=maxFilters||(current+=1,$scope.filters.push({name:"CF"+current,value:"**"}),$scope.filters=$scope.filters.slice(0))},$scope.$on("removeFilter",function(event,filter){$scope.filters=$filter("filter")($scope.filters,{name:"!"+filter.name}),serializeCustomFilter($scope.filters)}),$scope.$on("filterUpdated",function(event,filter){$scope.filters=$scope.filters.slice(0),serializeCustomFilter($scope.filters)}),$scope.$watch("fields",function(fields){$scope.fields=fields})}]}}]),stats.directive("statsDragParent",function($document){return{restrict:"A",link:function(scope,element,attr){function mousemove(event){y=event.screenY-startY,x=event.screenX-startX,parentElem.css({top:y+"px",left:x+"px"})}function mouseup(){$document.off("mousemove",mousemove),$document.off("mouseup",mouseup)}var startX=0,startY=0,x=0,y=0,parentElem=element.parent();parentElem.css({position:"relative",cursor:"move"}),parentElem.on("mousedown",function(event){var _isInteractive=event.target.classList.contains("is-interactive");_isInteractive||(event.preventDefault(),startX=event.screenX-x,startY=event.screenY-y,$document.on("mousemove",mousemove),$document.on("mouseup",mouseup))})}}}),stats.directive("statsFilterButton",[function(){"use strict";return{restrict:"E",replace:!0,template:['<div class="filter-button spin" data-ng-class="{toggled: showSplits==true}" data-ng-click="showSplits=!showSplits;">','  <div tooltip="Tap on the gear icon to filter your stats." tooltip-placement="top">','    <i class="fa fa-gear"></i>',"  </div>","</div>"].join("")}}]),stats.directive("statsModalLink",["$modal",function($modal){"use strict";return{restrict:"A",transclude:!0,template:["<span ng-transclude></span>"],link:function(scope,element,attrs){element.on("click",function(e){e.stopPropagation(),e.preventDefault();$modal.open({templateUrl:"/templates/overlay/modal.html",controller:"ModalInstanceCtrl",size:"lg",windowClass:attrs.type,resolve:{url:function(){return attrs.href},title:function(){return attrs.title},type:function(){return attrs.type}}})})}}}]),stats.directive("statsImgPlayer",function(){"use strict";return{restrict:"E",scope:{playerId:"=",size:"@",type:"@"},link:function(scope,iElement,iAttrs){scope.$watch("playerId",function(playerId){var playerActionImgFull="http://stats.nba.com/media/players/700/"+playerId+".png",playerActionImg2x=playerActionImgFull+"?interpolation=lanczos-none&resize=*:500px",playerActionImg1x=playerActionImgFull+"?interpolation=lanczos-none&resize=*:300px",playerHeadshotFull="http://stats.nba.com/media/players/230x185/"+playerId+".png",playerHeadshot2x=playerHeadshotFull+"?interpolation=lanczos-none&resize=*:340px",playerHeadshot1x=playerHeadshotFull+"?interpolation=lanczos-none&resize=*:170px",playerAvatarFull="http://stats.nba.com/media/players/132x132/"+playerId+".png",playerAvatar2x=playerAvatarFull+"?interpolation=lanczos-none&resize=*:70px",playerAvatar1x=playerAvatarFull+"?interpolation=lanczos-none&resize=*:35px",fallbackActionImg="http://stats.nba.com/media/img/no-player_large.png",fallbackHeadshot="http://stats.nba.com/media/img/no-headshot_small.png",fallbackUrl="";(playerId||scope.type||void 0===scope.size)&&iElement.html('<img class="not-found '+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+fallbackActionImg+'">'),"action"===scope.type&&(fallbackUrl=fallbackActionImg,"large"===scope.size?iElement.html('<img class="'+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+playerActionImgFull+'">'):iElement.html('<img class="'+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+playerActionImg1x+'" srcset="'+playerActionImgFull+" 3x, "+playerActionImg2x+" 2x, "+playerActionImg1x+' 1x">')),"head"===scope.type&&(fallbackUrl=fallbackHeadshot,"large"===scope.size?iElement.html('<img class="'+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+playerHeadshotFull+'">'):iElement.html('<img class="'+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+playerHeadshot1x+'" srcset="'+playerHeadshotFull+" 3x, "+playerHeadshot2x+" 2x, "+playerHeadshot1x+' 1x">')),"avatar"===scope.type&&(fallbackUrl=fallbackHeadshot,"large"===scope.size?iElement.html('<img class="'+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+playerAvatarFull+'">'):iElement.html('<img class="'+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+playerAvatar1x+'" srcset="'+playerAvatarFull+" 3x, "+playerAvatar2x+" 2x, "+playerAvatar1x+' 1x">')),iElement.find("img").on("error",function(){var img=angular.element(this);img.attr("src",fallbackUrl).attr("srcset","").addClass("not-found")})})}}}),stats.directive("statsPlayerSummary",function(){"use strict";return{restrict:"E",replace:!0,templateUrl:"/templates/player/summary.html"}}),function(){function statsPlayerListRowDirective($filter){return{restrict:"EA",scope:{letter:"="},link:function(scope,iElement,iAttrs){scope.$watch("letter",function(letter){var html="";html+='<div class="col-sm-1 player-initial">'+letter.initial+"</div>",html+='<div class="col-sm-11"><div class="row">';for(var i=1;i<4;i+=1){html+='<div class="col-sm-4 player-list-column">';var groups=$filter("listColumn")(letter.items,i,3);for(var j in groups){var player=groups[j],playerStatus=1==player.ROSTERSTATUS?"active":"historic";html+="<div>",html+="active"==playerStatus?'<a class="'+playerStatus+'" href="/player/#!/'+player.PERSON_ID+'/">'+player.DISPLAY_LAST_COMMA_FIRST+"</a> ["+player.TEAM_ABBREVIATION+"]":'<a class="'+playerStatus+'" href="/player/#!/'+player.PERSON_ID+'/">'+player.DISPLAY_LAST_COMMA_FIRST+"</a>",html+="</div>"}html+="</div>"}html+="</div></div>",iElement.html(html)})}}}stats.directive("statsPlayerListRow",statsPlayerListRowDirective),statsPlayerListRowDirective.$inject=["$filter"]}(),stats.directive("statsImgPlaylistThumbnail",function(){"use strict";return{restrict:"E",scope:{videodata:"="},link:function(scope,iElement,iAttrs){scope.$watch("videodata",function(item){if(void 0!==item){var fallbackUrl="http://stats.nba.com/media/video/thumbs/nothumb.jpg",thumbnailUrl="http://stats.nba.com/media/video/thumbs/"+item.y+item.m+item.d+"/"+item.ri+"_"+item.ei+".jpg";iElement.html('<img class="thumbnail '+iAttrs.class+'" alt="'+iAttrs.alt+'" src="'+thumbnailUrl+'">'),iElement.find("img").bind("error",function(){
var $img=angular.element(this);$img.attr("src",fallbackUrl),iElement.addClass("not-found")})}})}}}),stats.directive("statsPopup",["$filter","$modal","$timeout","$location",function($filter,$modal,$timeout,$location){"use strict";function overrideStyle(){return{addTo:function(elem){elem.attr({style:"-webkit-overflow-scrolling:auto;"})},removeFrom:function(elem){elem.attr({style:""})}}}return{restrict:"EA",scope:{title:"@",desc:"@",placement:"@",video:"@",shotchart:"@",tracking:"@",movement:"@",field:"@",eventid:"@",params:"=",row:"=",ai:"="},templateUrl:"/templates/lib/stats-popup.html",link:function(scope,iElement,iAttrs){var params=angular.extend({CFID:scope.row.CFID||"",CFPARAMS:scope.row.CFPARAMS||"",PlayerID:scope.row.PLAYER_ID||"0",TeamID:scope.row.TEAM_ID||"0",GameID:scope.row.GAME_ID||scope.row.Game_ID||"",ContextMeasure:scope.field,Season:"",SeasonType:""},scope.params);scope.row.TEAM_ID&&(params.TeamID=scope.row.TEAM_ID);var section=document.location.pathname.split("/")[1],title="",isBoxscoreSection=!1;switch(section){case"game":title+=scope.ai&&scope.field?(scope.row.PLAYER_NAME||scope.row.TEAM_CITY+" "+scope.row.TEAM_NAME)+" "+scope.field+" during "+scope.ai.gamename+" - "+scope.ai.gamedate:scope.desc+" during "+scope.ai.gamename+" - "+scope.ai.gamedate,isBoxscoreSection=!0;break;case"leaders":title+=scope.row.PLAYER+" "+scope.field+" during "+params.Season+" "+params.SeasonType;break;case"league":params.CFID="",params.CFPARAMS="",title+=(scope.row.PLAYER_NAME||scope.row.TEAM_NAME||scope.row.GROUP_NAME)+" "+scope.field+" during "+params.Season+" "+params.SeasonType,scope.params.ClutchTime&&(title+=" - "+scope.params.AheadBehind+" in the "+scope.params.ClutchTime+" by "+scope.params.PointDiff+" points or less"),scope.row.MATCHUP&&(title+=" ("+scope.row.MATCHUP+")"),document.location.pathname.indexOf("lineups")>-1&&(params.islineup=1,params.GroupID=params.GROUP_ID=scope.row.GROUP_ID);break;case"team":scope.ai&&(scope.row.PLAYER_NAME&&(title+=" ("+scope.row.PLAYER_NAME+") "),title+=scope.ai.TEAM_CITY+" "+scope.ai.TEAM_NAME+" "+scope.field+" during "+params.Season+" "+params.SeasonType,scope.row.MATCHUP&&(title+=" ("+scope.row.GAME_DATE+" "+scope.row.MATCHUP+")"),scope.row.CFPARAMS&&(title+=" ("+scope.row.CFPARAMS+")"));break;case"player":scope.ai&&(title+=scope.ai.DISPLAY_FIRST_LAST+" "+scope.field+" during "+params.Season+" "+params.SeasonType,scope.row.MATCHUP&&(title+=" ("+scope.row.GAME_DATE+" "+scope.row.MATCHUP+")"),scope.row.CFPARAMS&&(title+=" ("+scope.row.CFPARAMS+")"));break;case"vs":title+=scope.row.GROUP_VALUE+" "+scope.field+" during "+params.Season+" "+params.SeasonType,"0"===params.PlayerID?params.CFID="":(params.CFID="",params.TeamID="0");break;case"default":title+=""}scope.contextTitle=scope.title||title;var seasonyear=parseInt(params.Season.substring(0,4),10),querystring=$filter("param")(params),boxscoregameid=scope.row.GAME_ID||scope.row.Game_ID;boxscoregameid&&scope.row.EVENTNUM&&(querystring="GameID="+boxscoregameid+"&GameEventID="+scope.row.EVENTNUM);var placement="undefined"!=typeof iAttrs.placement?iAttrs.placement:"left";seasonyear>=2016?scope.videoURL="/cvp3.html?"+querystring:scope.videoURL="http://stats.nba.com/cvp.html?"+querystring,scope.shotchartURL="/shotchart/#!/?"+querystring;var maxGameId=21600018,hasVideoAttribute="undefined"!=typeof iAttrs.video&&iAttrs.video!==!1,isNotPreseason="Preseason"!==params.SeasonType&&"Preseason"!==params.SeasonType,hasCVP2Video=hasVideoAttribute&&!IS_MOBILE&&seasonyear>2011&&seasonyear<2016&&isNotPreseason,hasCVP3Video=hasVideoAttribute&&seasonyear>=2016&&isNotPreseason&&isBoxscoreSection&&+boxscoregameid>maxGameId,hasCVP3Video=!1;scope.hasVideo=hasCVP2Video||hasCVP3Video,scope.hasShotchart="undefined"!=typeof iAttrs.shotchart&&iAttrs.shotchart!==!1&&seasonyear>2e3&&"Preseason"!=params.SeasonType,scope.hasTracking=!1,scope.hasMovement=!1,scope.hasPBPMovement=!1,(scope.hasVideo||scope.hasShotchart||scope.hasTracking||scope.hasMovement)&&iElement.parent().addClass("stats-popup-link").on("click",function(){var parentTable=$(this).parents(".table-responsive"),svtlink=iElement.find(".svtlink");svtlink.show().addClass(placement),IS_MOBILE&&overrideStyle().addTo(parentTable),$timeout(function(){$("body").one("click",function(){svtlink.hide(),IS_MOBILE&&overrideStyle().removeFrom(parentTable)})},100)}),scope.openOverlay=function(url,type,title){$modal.open({templateUrl:"/templates/overlay/modal.html",controller:"ModalInstanceCtrl",size:"lg",windowClass:type,resolve:{url:function(){return url},title:function(){return title},type:function(){return type}}})}}}}]),function(){"use strict";function slideshow(){return{restrict:"E",scope:{slides:"=",duration:"@",template:"="},template:['<div id="defensivehub__slideshow">','<div class="slide-container">','<div ng-repeat="slide in slides" ng-include src="slideshowTemplate.slide"></div>',"</div>",'<div class="[ clear-fix ]"></div>','<div ng-include src="slideshowTemplate.nav"></div>',"</div>"].join(""),controller:slideshowCtrl}}function slideshowCtrl($scope,$element,$interval,$sce,$timeout,$window){function prevSlide(){slideTotal=$scope.slides.length,$scope.slidesIndex=($scope.slidesIndex+slideTotal-1)%slideTotal,resetInterval()}function nextSlide(isAuto){autoSize(),slideTotal=$scope.slides.length,$scope.slidesIndex=($scope.slidesIndex+slideTotal+1)%slideTotal,isAuto||resetInterval()}function isActiveSlide(n){return n==$scope.slidesIndex}function autoSlide(){isNaN($scope.duration)||(intervalPromise=$interval(nextSlide.bind(void 0,!0),$scope.slideTime))}function resetInterval(){$interval.cancel(intervalPromise),$timeout.cancel(timeoutPromise),timeoutPromise=$timeout(autoSlide,$scope.slideTime)}function autoSize(){var slideshowContainer=angular.element($element[0].children[0]),slideshowWidth=slideshowContainer[0].clientWidth,slideItems=$element.find(".slide-item"),tallest=0;angular.forEach(slideItems,function(item){var itemElement=angular.element(item);itemElement.css({width:slideshowWidth}),item.clientHeight>tallest&&(tallest=item.clientHeight)}),container.css({height:tallest})}var slideTotal,intervalPromise,timeoutPromise,container=angular.element($element[0].children[0].children[0]);$scope.slideshowTemplate={slide:"/slideshow-tpl-slide.html",nav:"/slideshow-tpl-controls.html"},$scope.trustAsHtml=$sce.trustAsHtml,$scope.slidesIndex=0,$scope.slideTime=1e3*Number($scope.duration),$scope.nextSlide=nextSlide,$scope.prevSlide=prevSlide,$scope.isActiveSlide=isActiveSlide,$scope.$watch($scope.slides,function(){autoSize(),autoSlide()}),angular.element($window).bind("resize",function(){autoSize()})}stats.directive("statsSlideshow",slideshow)}(),stats.directive("statsSplitDate",["$filter",function($filter){"use strict";return{restrict:"EA",scope:{split:"=?"},template:['<p class="input-group stats-date-split stats-calendar">','  <input type="text" datepicker-options="dateOptions" placeholder="{{ split.label }}" name="{{ split.name }}" class="form-control" datepicker-popup="MM/dd/yyyy" ng-model="dt" is-open="opened" show-button-bar="false" />','  <span class="input-group-btn">','   <button type="button" class="stats-calendar-button" ng-click="open($event)" tooltip="{{ split.label }}"><i class="fa fa-calendar"></i></button>',"  </span>","</p>"].join(""),controller:function($scope){$scope.opened=!1,$scope.open=function($event){$event.preventDefault(),$event.stopPropagation(),$scope.opened=!$scope.opened},$scope.dateOptions={datepickerAppendToBody:!0,showWeeks:!1,showButtonBar:!1},$scope.split||($scope.split={selected:{}}),$scope.dt=$scope.split.selected.val,$scope.$watch("dt",function(dt){$scope.split.selected.val=$filter("date")($scope.dt,"MM/dd/yyyy")||""}),$scope.$watch("split",function(split){$scope.dt=$scope.split.selected.val})}}}]),stats.directive("statsImgTeam",function(){"use strict";return{restrict:"E",scope:{teamAbbr:"=",type:"@",season:"="},link:function(scope,iElement,iAttrs){function createPillLogo(){if(scope.teamAbbr){var root="/media/img/teams/pills/",teamurl=[root,scope.teamAbbr,"_68x44.png"].join(""),imgElem=angular.element("<img></img>");imgElem.addClass("team-img").attr("src",teamurl),iElement.html(imgElem)}}function createTeamLogo(){if(scope.teamAbbr){var hasSeason=!!scope.season,rootURL="/media/img/teams/logos/",fallbackURL=[rootURL,"NBA-grey_logo.svg"].join(""),teamURL=[rootURL,scope.teamAbbr,"_logo.svg"].join(""),teamSeasonURL=[rootURL,"season/",scope.season,"/",scope.teamAbbr,"_logo.svg"].join(""),imgElem=angular.element("<img></img>");imgElem.addClass("team-img").attr("type","image/svg+xml").attr("src",hasSeason?teamSeasonURL:teamURL),iElement.html(imgElem),iElement.find("img").bind("error",function(){hasSeason?(hasSeason=!1,angular.element(this).attr("src",teamURL)):angular.element(this).attr("src",fallbackURL)})}}scope.$watch("season",function(season){"pill"===iAttrs.type?createPillLogo():createTeamLogo()}),scope.$watch("teamAbbr",function(teamAbbr){"pill"===iAttrs.type?createPillLogo():createTeamLogo()})}}}),stats.directive("statsWith",function(){return{scope:!0,link:function(scope,el,attr){var expression=attr.statsWith,parts=expression.split(" as ");2==parts.length&&scope.$watch(parts[0],function(value){scope[parts[1]]=value},!0)}}}),function(undefined){"use strict";function statsTransactionPanel($filter){return{restrict:"E",replace:!1,scope:{transaction:"=",filterBy:"="},templateUrl:"/templates/transactions/transactions-panel.html",link:function(scope,elem,attr,ctrl){function changePanelFn(num){var index=scope.currentIndex,TOTAL=scope.transaction.length;scope.currentIndex=((index+num)%TOTAL+TOTAL)%TOTAL}scope.group=scope.transaction,scope.currentIndex=0,scope.changePanel=changePanelFn,scope.$watch("filterBy",function(){scope.filterBy?scope.group=$filter("filter")(scope.transaction,{TRANSACTION_DESCRIPTION:scope.filterBy}):scope.group=scope.transaction,scope.isHidden=0===scope.group.length})}}}stats.directive("statsTransactionPanel",statsTransactionPanel),statsTransactionPanel.$inject=["$filter"]}(),stats.filter("byLetter",function(){return function(arr,field){var obj={},letters=[];for(var i in arr){var val=field?arr[i][field]:arr[i],li=val.charAt(0).toUpperCase();obj[li]||(obj[li]=[]),obj[li].push(arr[i])}for(var l in obj)letters.push({initial:l,items:obj[l]});return letters}}),function(){function arcPath(){return function(x,y,radius,startAngle,endAngle){return describeArc(x,y,radius,startAngle,endAngle)}}function polarToCartesian(centerX,centerY,radius,angleInDegrees){var angleInRadians=(angleInDegrees-90)*Math.PI/180;return{x:centerX+radius*Math.cos(angleInRadians),y:centerY+radius*Math.sin(angleInRadians)}}function describeArc(x,y,radius,startAngle,endAngle){var start=polarToCartesian(x,y,radius,endAngle),end=polarToCartesian(x,y,radius,startAngle),arcSweep=endAngle-startAngle<=180?"0":"1",d=["M",x,y,"L",start.x,start.y,"A",radius,radius,0,arcSweep,0,end.x,end.y,"Z"].join(" ");return d}stats.filter("arcPath",arcPath)}(),stats.filter("area",function(){return function(area){return area?(area/100).toFixed(1)+" ft ²":0}}),function(){function donutArc(){return function(pct,half){if(pct){var unit=2*Math.PI/100,startangle=0,endangle=100*pct*unit,x1=half+Math.sin(startangle)*half,y1=half-Math.cos(startangle)*half,x2=half+Math.sin(endangle)*half,y2=half-Math.cos(endangle)*half,big=endangle-startangle>Math.PI?1:0,d=["M ",half,",",half," L ",x1,",",y1," A ",half,",",half," 0 ",big," 1 ",x2,",",y2," Z"].join("");return d}}}stats.filter("donutArc",donutArc)}(),stats.filter("countdownClock",function(){return function(time){var q1max=7200,q2max=14400,q3max=21600,q4max=28800,OTperiod=0,overtime=0,prefix="",remaining=0;time<=q1max&&(prefix="Q1",remaining=q1max-time),time>q1max&&time<=q2max&&(prefix="Q2",remaining=q1max-time+q1max),time>q2max&&time<=q3max&&(prefix="Q3",remaining=q1max-time+q2max),time>q3max&&time<=q4max&&(prefix="Q4",remaining=q1max-time+q3max),time>q4max&&(overtime=time-q4max,OTperiod=Math.ceil(overtime/3e3),remaining=3e3*OTperiod-time+q4max,prefix="OT"+OTperiod);var totalSecs=remaining/10,displayMins=("0"+Math.floor(totalSecs/60)).substr(-2),displaySecs=("0"+Math.floor(totalSecs%60)).substr(-2),displayTime=[displayMins,displaySecs].join(":");return[prefix,displayTime].join(" - ")}}),stats.filter("customStatFilter",function(){return function(items,filter){var types={E:function(e){return"string"==typeof e[field]?e[field].toLowerCase().indexOf(val.toLowerCase())>-1:e[field]==val},NE:function(e){return"string"==typeof e[field]?e[field].toLowerCase().indexOf(val.toLowerCase())==-1:e[field]!=val},G:function(e){return e[field]>val},GE:function(e){return e[field]>=val},L:function(e){return e[field]<val},LE:function(e){return e[field]<=val}},s=filter.split("*"),field=s[0],func=types[s[1]],val=s[2];if(!field||!func||!val)return items;field.indexOf("PCT")>-1&&(val/=100);items.filter(func);return items.filter(func)}}),stats.filter("decimalTime",function(){return function(period,timestring){var time=0,rts=Math.min(period,4),ots=Math.max(period-4,0);if(timestring){var ts=timeString.split(":"),min=parseInt(ts[0],10),sec=parseInt(ts[1],10),maxReg=28800;period<=4?time=7200*(period-1)+(7200-(600*min+10*sec)):(time=3e3*(ots-1)+(3e3-(600*min+10*sec)),time+=maxReg)}else time=7200*rts+3e3*ots;return time}}),stats.filter("equality",function(){return function(items,c,v,f){if(items&&c){var types={E:function(e){return f?e[f]==v:e==v},NE:function(e){return f?e[f]!=v:e!=v},G:function(e){return f?e[f]>v:e>v},GE:function(e){return f?e[f]>=v:e>=v},L:function(e){return f?e[f]<v:e<v},LE:function(e){return f?e[f]<=v:e<=v}},func=types[c.toUpperCase()];if(func){var filtered=items.filter(func);return filtered}}}}),stats.filter("first",function(){return function(items){return items[0]}}),stats.filter("format",["$filter",function($filter){return function(value,filterName,filterParam){return $filter(filterName)(value,filterParam)}}]),stats.filter("gametime",function(){return function(time){var minutes=Math.floor(time/60),seconds=time%60;return minutes>0?minutes+":"+("00"+seconds.toFixed(0)).slice(-2):"00:"+("00"+seconds.toFixed(0)).slice(-2)}}),stats.filter("leagueRanking",function(){return function(val,row){return val&&"NR"!=val?"#"+val:"NR"}}),stats.filter("lineup",function(){return function(lineup){var out=lineup.split(" - ").map(function(n){var name=n.split(","),first=name[1]||"",last=name[0];return first.charAt(0)+"."+last}).join(", ");return out}}),stats.filter("listColumn",function(){return function(arr,col,cols){var ipc=Math.ceil(arr.length/cols),offset=(col-1)*ipc,items=arr.slice(offset,ipc+offset);return items}}),stats.filter("notFirst",function(){return function(items){return items.shift(),items}}),stats.filter("ordinal",[function(){return function(n){if(!n)return"-";var s=["th","st","nd","rd"],v=n%100,ordinal=s[(v-20)%10]||s[v]||s[0];return n+ordinal}}]),stats.filter("param",function(){return function(obj){var arr=[];for(var i in obj)arr.push(i+"="+obj[i]);return arr.join("&")}}),stats.filter("percent",function(){return function(n,useSign){if(1==n)return useSign?"100%":100;if(null===n||"undefined"==typeof n)return"-";var val=(100*n).toFixed(1);return useSign?val+"%":val}}),function(){function periodToText(){return function(period){return period<=4?"Q"+period:"OT"+(period-4)}}stats.filter("periodToText",periodToText)}(),stats.filter("permode",[function(){return function(n,mode,col,override){if(null===n)return"-";if(""===n)return"";if(!n&&0!==n)return n;var defaultPrecision=override?+override:1;if("MIN"==col)switch(mode){case"PerGame":return n.toFixed(1);case"Per100Possessions":return n.toFixed(1);case"Per100Plays":return n.toFixed(1);case"PerPossession":return n.toFixed(3);case"PerPlay":return n.toFixed(3);default:return n.toFixed(0)}else switch(mode){case"Totals":return n.toFixed(0);case"PerPlay":return n.toFixed(3);case"PerPossession":return n.toFixed(3);default:return n.toFixed(defaultPrecision)}}}]),function(){function playerFirstLast(){return function(playername,part){var obj={fn:"",ln:""};return playername&&"string"==typeof playername&&(obj.fn=playername.match(/([a-zA-Z\-\.]+)(.*)/)[1],obj.ln=playername.match(/([a-zA-Z\-\.]+)(.*)/)[2]),part?obj[part]:obj}}stats.filter("playerFirstLast",playerFirstLast)}(),stats.filter("reverse",function(){return function(items){if(items)return items.slice().reverse()}}),stats.filter("seasonToSeasonYear",function(){return function(season){if(season){var val=parseInt(season.substr(0,4),10)+1;return isNaN(val)?season:val}}}),stats.filter("seasonid",function(){return function(gameid){var yp=parseInt(gameid.substr(3,2),10),yearFrom=yp+(yp<40?2e3:1900),yearTo=yearFrom+1,SeasonID=yearFrom+"-"+yearTo.toString().substr(2,2);return SeasonID}}),stats.filter("seasontype",function(){return function(gameid){switch(gameid.substr(2,1)){case"1":return"Preseason";case"2":return"Regular Season";case"3":return"All Star";case"4":return"Playoffs";default:return"Regular Season"}}}),stats.filter("seasonyear",function(){return function(year){var next=(+year+1).toString().slice(-2),season=year+"-"+next;return season}}),function(){function statFieldFormatter($filter){return function(val,field){if(field+="",null===val)return"-";var numExtract=/_fmtD(\d+)$/;if(field.indexOf("_fmtPCT")>-1)return(100*val).toFixed(1);if(field.indexOf("_PG")>-1)return val.toFixed(1);if(field.indexOf("_RATING")>-1)return val.toFixed(1);if(null!=numExtract.exec(field)){var myArray=numExtract.exec(field),num=myArray[1];return val.toFixed(num)}return field.indexOf("PCT")>-1?(100*val).toFixed(1):field.indexOf("JERSEY")>-1?"#"+val:field.indexOf("_fmtINT")>-1?$filter("number")(val,0):val}}stats.filter("statFieldFormatter",statFieldFormatter),statFieldFormatter.$inject=["$filter"]}(),function(){function statFieldToText(){return function(field){field+="";return field=field.replace(/_fmt.*$/," ").replace("PCT","%").replace("_NUM"," ").replace(/\_/g," ").replace("Regular_Season"," Regular Season")}}stats.filter("statFieldToText",statFieldToText)}(),function(){function statNumber($filter){return function(n,precision){var val;return val="percent"===precision?$filter("percent")(n):$filter("number")(n,precision),""===val?"-":val}}angular.module("stats").filter("statNumber",statNumber),statNumber.$inject=["$filter"]}(),function(){function TeamColorChooser(){return function(HTM,VTM){var minHue=130;for(var i in VTM.colors){var vRGB=hexToRGB(VTM.colors[i]),hRGB=hexToRGB(HTM.colors[0]),hue=(brightnessDiff(hRGB,vRGB),hueDiff(hRGB,vRGB)),passed=hue>=minHue;if(passed)return{htm:HTM.colors[0],vtm:VTM.colors[i]}}return{htm:HTM.colors[0],vtm:VTM.colors[0]}}}function hexToRGB(hex){return{r:parseInt(hex.substr(0,2),16),g:parseInt(hex.substr(2,2),16),b:parseInt(hex.substr(4,2),16)}}function brightnessDiff(vtm,htm){var v=(299*vtm.r+587*vtm.g+141*vtm.b)/1e3,h=(299*htm.r+587*htm.g+141*htm.b)/1e3;return Math.abs(v-h)}function hueDiff(vtm,htm){var r=Math.abs(vtm.r-htm.r),g=Math.abs(vtm.g-htm.g),b=Math.abs(vtm.b-htm.b);return r+g+b}stats.filter("TeamColorChooser",TeamColorChooser)}(),stats.filter("toTitleCase",function(){return function(text){var _oldString=text||"",_oldTextArray=_oldString.split(" "),_newTextArray=[],_newString="";return"N/A"===_oldString?_newString=_oldString:(_oldTextArray.forEach(function(value,index,array){var _word=[value.charAt(0).toUpperCase(),value.substr(1).toLowerCase()].join("");_newTextArray.push(_word)}),_newString=_newTextArray.join(" ")),_newString}}),stats.filter("toUpperCase",function(){return function(text){return text?text.toString().toUpperCase():text}}),stats.filter("toArray",function(){return function(obj){var array=[];return angular.forEach(obj,function(value,key,object){array.push({key:key,value:value})}),array}}),stats.filter("toFeetAndInches",function(){return function(measure){var _measure=parseInt(measure,10),_feet=Math.floor(_measure/12),_inches=_measure%12;return[_feet,_inches].join("-")}}),stats.filter("toInches",function(){return function(size){function toArray(string){return string.split(/\D/)}function filterArray(oldArray){return oldArray.filter(function(value,index,array){if(""!==value||null!==value||void 0!==value)return value})}var _sizeArray=filterArray(toArray(size)),_feet=12*parseInt(_sizeArray[0],10),_inches=_sizeArray[1]?parseInt(_sizeArray[1],10):0,totalInches=(_feet+_inches).toString();return isNaN(totalInches)?null:totalInches}}),stats.filter("toObject",function(){return function(array){var object={};return object[array[0]]=array[1],object}}),stats.filter("toSlug",function(){function isString(item){return"String"===Object.prototype.toString.call(item).slice(8,-1)}return function(text){return text?(text=text.toString(),isString(text)?text.replace(/['‘’]/g,"").replace(/[\W\s]+/g,"-").toLowerCase():void console.error("The 'text' parameter must be a string.")):text}}),stats.filter("wallclock",function(){return function(time){var pre,qtr,sec,min,mod,ott;return time>=7200&&(time-=10),time<=28800?(pre="Q",qtr=Math.ceil(time/7200),mod=time%7200):(ott=time-28800,pre="OT",qtr=Math.ceil(ott/3e3),mod=ott%3e3),min=Math.floor(mod/600),sec=(60*(mod/600-min)).toFixed(0),0==min&&"0"==sec&&(qtr+=1),pre+qtr+" - "+("0"+min).substr(-2)+":"+("0"+sec).substr(-2)}});
